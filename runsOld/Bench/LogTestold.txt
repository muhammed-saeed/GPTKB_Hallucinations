[bench] START
[bench] root_out=runs/AllParallel
[bench] crawler=crawler_batch_concurrency_topic.py
[bench] total_planned=108
  plan[0] domain=topic model=deepseek seed=ancient city of Babylon strategy=baseline profile=det batch=False conc=20 → runs/AllParallel/topic/deepseek/baseline/det/ancient_city_of_Babylon/20251029_221654
  plan[1] domain=topic model=deepseek seed=The Big Bang Theory strategy=baseline profile=det batch=False conc=20 → runs/AllParallel/topic/deepseek/baseline/det/The_Big_Bang_Theory/20251029_221654
  plan[2] domain=topic model=deepseek seed=DAX 40 Index strategy=baseline profile=det batch=False conc=20 → runs/AllParallel/topic/deepseek/baseline/det/DAX_40_Index/20251029_221654
  plan[3] domain=topic model=deepseek seed=ancient city of Babylon strategy=baseline profile=medium batch=False conc=20 → runs/AllParallel/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_221654
  plan[4] domain=topic model=deepseek seed=The Big Bang Theory strategy=baseline profile=medium batch=False conc=20 → runs/AllParallel/topic/deepseek/baseline/medium/The_Big_Bang_Theory/20251029_221654
  plan[5] domain=topic model=deepseek seed=DAX 40 Index strategy=baseline profile=medium batch=False conc=20 → runs/AllParallel/topic/deepseek/baseline/medium/DAX_40_Index/20251029_221654
  plan[6] domain=topic model=deepseek seed=ancient city of Babylon strategy=baseline profile=wild batch=False conc=20 → runs/AllParallel/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_221654
  plan[7] domain=topic model=deepseek seed=The Big Bang Theory strategy=baseline profile=wild batch=False conc=20 → runs/AllParallel/topic/deepseek/baseline/wild/The_Big_Bang_Theory/20251029_221654
  plan[8] domain=topic model=deepseek seed=DAX 40 Index strategy=baseline profile=wild batch=False conc=20 → runs/AllParallel/topic/deepseek/baseline/wild/DAX_40_Index/20251029_221654
  plan[9] domain=topic model=deepseek seed=ancient city of Babylon strategy=calibrate profile=det batch=False conc=20 → runs/AllParallel/topic/deepseek/calibrate/det/ancient_city_of_Babylon/20251029_221654
  plan[10] domain=topic model=deepseek seed=The Big Bang Theory strategy=calibrate profile=det batch=False conc=20 → runs/AllParallel/topic/deepseek/calibrate/det/The_Big_Bang_Theory/20251029_221654
  plan[11] domain=topic model=deepseek seed=DAX 40 Index strategy=calibrate profile=det batch=False conc=20 → runs/AllParallel/topic/deepseek/calibrate/det/DAX_40_Index/20251029_221654
[bench] executing with max_procs=6

[RUN 1/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/deepseek/baseline/det/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 2/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/deepseek/baseline/det/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 3/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/deepseek/baseline/det/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 4/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 5/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/deepseek/baseline/medium/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 6/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/deepseek/baseline/medium/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 7/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 8/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/deepseek/baseline/wild/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 9/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/deepseek/baseline/wild/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 10/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/deepseek/calibrate/det/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 11/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/deepseek/calibrate/det/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 12/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/deepseek/calibrate/det/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 13/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 14/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/deepseek/calibrate/medium/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 15/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 16/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 17/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/deepseek/calibrate/wild/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 18/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 19/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/deepseek/icl/det/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 20/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/deepseek/icl/det/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 21/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/deepseek/icl/det/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 22/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 23/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/deepseek/icl/medium/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 24/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/deepseek/icl/medium/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 25/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 26/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/deepseek/icl/wild/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 27/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/deepseek/icl/wild/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 28/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/deepseek/dont_know/det/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 29/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/deepseek/dont_know/det/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 30/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/deepseek/dont_know/det/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 31/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 32/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/deepseek/dont_know/medium/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 33/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 34/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 35/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/deepseek/dont_know/wild/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 36/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 37/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/granite8b/baseline/det/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 38/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/granite8b/baseline/det/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 39/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/granite8b/baseline/det/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 40/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/granite8b/baseline/medium/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 41/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/granite8b/baseline/medium/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 42/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/granite8b/baseline/medium/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 43/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/granite8b/baseline/wild/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 44/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/granite8b/baseline/wild/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 45/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/granite8b/baseline/wild/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 46/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/granite8b/calibrate/det/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 47/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/granite8b/calibrate/det/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 48/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/granite8b/calibrate/det/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 49/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/granite8b/calibrate/medium/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 50/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/granite8b/calibrate/medium/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 51/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/granite8b/calibrate/medium/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 52/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/granite8b/calibrate/wild/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 53/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/granite8b/calibrate/wild/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 54/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/granite8b/calibrate/wild/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 55/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/granite8b/icl/det/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 56/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/granite8b/icl/det/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 57/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/granite8b/icl/det/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 58/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/granite8b/icl/medium/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 59/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/granite8b/icl/medium/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 60/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/granite8b/icl/medium/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 61/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/granite8b/icl/wild/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 62/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/granite8b/icl/wild/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 63/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/granite8b/icl/wild/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 64/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/granite8b/dont_know/det/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 65/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/granite8b/dont_know/det/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 66/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/granite8b/dont_know/det/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 67/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/granite8b/dont_know/medium/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 68/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/granite8b/dont_know/medium/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 69/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/granite8b/dont_know/medium/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 70/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/granite8b/dont_know/wild/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 71/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/granite8b/dont_know/wild/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 72/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/granite8b/dont_know/wild/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 73/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/gpt4o-mini/baseline/det/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 74/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/gpt4o-mini/baseline/det/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 75/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/gpt4o-mini/baseline/det/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 76/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/gpt4o-mini/baseline/medium/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 77/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/gpt4o-mini/baseline/medium/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 78/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/gpt4o-mini/baseline/medium/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 79/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/gpt4o-mini/baseline/wild/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 80/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/gpt4o-mini/baseline/wild/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 81/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/gpt4o-mini/baseline/wild/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 82/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/gpt4o-mini/calibrate/det/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 83/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/gpt4o-mini/calibrate/det/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 84/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/gpt4o-mini/calibrate/det/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 85/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/gpt4o-mini/calibrate/medium/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 86/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/gpt4o-mini/calibrate/medium/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 87/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/gpt4o-mini/calibrate/medium/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 88/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/gpt4o-mini/calibrate/wild/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 89/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/gpt4o-mini/calibrate/wild/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 90/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/gpt4o-mini/calibrate/wild/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 91/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/gpt4o-mini/icl/det/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 92/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/gpt4o-mini/icl/det/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 93/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/gpt4o-mini/icl/det/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 94/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/gpt4o-mini/icl/medium/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 95/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/gpt4o-mini/icl/medium/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 96/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/gpt4o-mini/icl/medium/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 97/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/gpt4o-mini/icl/wild/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 98/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/gpt4o-mini/icl/wild/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 99/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/gpt4o-mini/icl/wild/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 100/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/gpt4o-mini/dont_know/det/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 101/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/gpt4o-mini/dont_know/det/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 102/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/gpt4o-mini/dont_know/det/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.0 --top-p 1.0 --max-tokens 2000

[RUN 103/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/gpt4o-mini/dont_know/medium/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 104/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/gpt4o-mini/dont_know/medium/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 105/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/gpt4o-mini/dont_know/medium/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 2000

[RUN 106/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallel/topic/gpt4o-mini/dont_know/wild/ancient_city_of_Babylon/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 107/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallel/topic/gpt4o-mini/dont_know/wild/The_Big_Bang_Theory/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000

[RUN 108/108] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallel/topic/gpt4o-mini/dont_know/wild/DAX_40_Index/20251029_221654 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 2000
[simple] output_dir: runs/AllParallel/topic/deepseek/baseline/det/ancient_city_of_Babylon/20251029_221654
[simple] output_dir: runs/AllParallel/topic/deepseek/baseline/det/The_Big_Bang_Theory/20251029_221654
[simple] output_dir: runs/AllParallel/topic/deepseek/baseline/medium/The_Big_Bang_Theory/20251029_221654
[simple] seeded: The Big Bang Theory
[simple] seeded: The Big Bang Theory
[simple] seeded: ancient city of Babylon
[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: ancient city of Babylon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: The Big Bang Theory

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: The Big Bang Theory

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[simple] output_dir: runs/AllParallel/topic/deepseek/baseline/medium/DAX_40_Index/20251029_221654
[simple] output_dir: runs/AllParallel/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_221654
[simple] seeded: DAX 40 Index
[simple] seeded: ancient city of Babylon
[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 40 Index

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: ancient city of Babylon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[simple] output_dir: runs/AllParallel/topic/deepseek/baseline/det/DAX_40_Index/20251029_221654
[simple] seeded: DAX 40 Index
[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 40 Index

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
2010
2011
2013
2014
279
American television sitcom
Amy Farrah Fowler
Apartment 4A
Barenaked Ladies
Barry Kripke
Bernadette Rostenkowski
Bill Prady
CBS
Caltech
Chuck Lorre
Chuck Lorre Productions
Comedy
Critics' Choice Television Award
Experimental physicist
Golden Globe Award
Howard Wolowitz
Jim Parsons
John Ross Bowie
Johnny Galecki
Kaley Cuoco
Kevin Sussman
Kunal Nayyar
Leonard Hofstadter
Leslie Winkle
May 16, 2019
Mayim Bialik
Melissa Rauch
Nerd culture
Pasadena, California
Penny
People's Choice Award
Primetime Emmy Award
Rajesh Koothrappali
Sara Gilbert
September 24, 2007
Sheldon Cooper
Simon Helberg
Sitcom
Stuart Bloom
Teen Choice Award
The History of Everything
Theoretical physicist
Warner Bros. Television
Warner Bros. Television Distribution

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
605–562 BC
Akkadian
Alexander the Great
Amorites
Assyrians
Bible
Code of Hammurabi
Esagila
Etemenanki
Euphrates River
Greek astronomy
Hammurabi
Hanging Gardens
Herodotus' Histories
Hittites
Ishtar Gate
Jerusalem
Marduk
Mesopotamia
Nebuchadnezzar II
Neo-Babylonian Empire
Persians
Solomon's Temple
Tower of Babel
about 70 years
advanced
after Alexander's death
agriculture
ancient city
arid
around 1754 BC
astronomy
base-60 number system
bulls and dragons
by 2nd century AD
canals
city halves
city's size and splendor
cuneiform
exile of Jews
eye for an eye
glazed bricks
led to Ishtar Gate
massive
massive building projects
mathematics
modern-day Iraq
multiple gates
one of Seven Wonders
over 200,000

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000 points
40
9:00 AM to 5:30 PM CET
Adidas AG
Allianz SE
BASF SE
BMW AG
Bayer AG
DAX
DAX 30 Index
DAX indices
DAXperformance index
DE0008469008
December 30, 1987
Deutsche Bank AG
Deutsche Börse
Deutscher Aktienindex
EU financial regulations
Eurex
Euro
European Securities and Markets Authority
Frankfurt Stock Exchange
German economy
German stock market
Germany
July 1, 1988
Laspeyres formula
MDAX
Mercedes-Benz Group AG
SAP SE
SDAX
September 20, 2021
Siemens AG
TecDAX
Volkswagen AG
automotive
blue-chip companies
cash-settled
chemicals
consumer goods
deutsche-boerse.com
diverse industries
finance
financial news outlets
free-float market capitalization
futures
healthcare
high
iShares Core DAX UCITS ETF
inclusion of more companies

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1792-1750 BCE
19th century
605-562 BCE
Akkadian
Alexander the Great
Amorites
Ashurbanipal
Assyrians
Babylon
Babylon his capital
Babylonia
Bible
Code of Hammurabi
Esagila
Esarhaddon
Etemenanki
Euphrates River
Hammurabi
Hanging Gardens
Herodotus' Histories
Hittites
Iraq War
Ishtar Gate
Jerusalem
Jews to Babylon
Kassites
Marduk
Mesopotamia
Nebuchadnezzar II
Neo-Babylonian Empire
Pergamon Museum
Persian conquest
Persians
Robert Koldewey
Sennacherib
Solomon's Temple
Tower of Babel
ancient city
astronomy
base on site
base-60 number system
by 2nd century CE
calendar systems
cuneiform
dragons and bulls
eight major gates
eye for an eye
glazed bricks
legal code
legendary

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
2010
2011
2013
2014
279
American television sitcom
Amy Farrah Fowler
Apartment 4A
Barenaked Ladies
Barry Kripke
Bernadette Rostenkowski
Bill Prady
CBS
Caltech
Carol Ann Susi
Chuck Lorre
Chuck Lorre Productions
Golden Globe Award
Howard Wolowitz
Iain Armitage
Jim Parsons
John Ross Bowie
Johnny Galecki
Kaley Cuoco
Kevin Sussman
Kunal Nayyar
Leonard Hofstadter
Leslie Winkle
May 16, 2019
Mayim Bialik
Melissa Rauch
Mrs. Wolowitz
Pasadena, California
Penny
Primetime Emmy Award
Rajesh Koothrappali
Sara Gilbert
September 24, 2007
September 25, 2017
Sheldon Cooper
Simon Helberg
Stuart Bloom
The Cheesecake Factory
The History of Everything
Warner Bros. Television
Warner Bros. Television Distribution
Young Sheldon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
10% maximum weight per constituent
1000 points
30
40
9:00 AM to 5:30 PM CET
Adidas
Airbus
Allianz
BASF
BMW
Bayer
DAX
DAX 30 Index
DAX indices
DE0008469008
December
Deutsche Bank
Deutsche Börse
Deutsche Telekom
E.ON
Euro
European Securities and Markets Authority
Frankfurt Stock Exchange
Fresenius
German economy
Germany
Infineon
July 1, 1988
June
Laspeyres formula
Linde
MDAX
March
Mercedes-Benz Group
Munich Re
RWE
SAP
SDAX
September
September 20, 2021
Siemens
TecDAX
Volkswagen
Vonovia
applied quarterly
audited annual financial statements
automotive
chemicals
consumer goods
continuous trading

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Young Sheldon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Barenaked Ladies

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Amy Farrah Fowler

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Barry Kripke

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bernadette Rostenkowski

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bill Prady

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: CBS

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Caltech

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Carol Ann Susi

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Chuck Lorre

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Chuck Lorre Productions

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Golden Globe Award

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Howard Wolowitz

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Iain Armitage

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Jim Parsons

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: John Ross Bowie

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Kevin Sussman

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Johnny Galecki

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Kunal Nayyar

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Kaley Cuoco

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Leonard Hofstadter

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
financial analysts
financial services
free-float market capitalization
fund managers
healthcare
industrial
investors
market capitalization
performance index
positive EBITDA
quarterly
stock market index
technology
trading volume
utilities
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
rectangular
stone stele
trade
uncertain

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Amy Farrah Fowler

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Barenaked Ladies

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Barry Kripke

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bernadette Rostenkowski

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bill Prady

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: CBS

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Caltech

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Chuck Lorre

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Chuck Lorre Productions

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Critics' Choice Television Award

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Golden Globe Award

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Howard Wolowitz

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: John Ross Bowie

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Jim Parsons

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Johnny Galecki

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Kaley Cuoco

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Kevin Sussman

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Kunal Nayyar

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Leonard Hofstadter

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Leslie Winkle

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Akkadian

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Alexander the Great

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Amorites

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Assyrians

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bible

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Code of Hammurabi

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Esagila

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Etemenanki

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Euphrates River

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hanging Gardens

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Herodotus' Histories

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hittites

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Ishtar Gate

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Mesopotamia

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Nebuchadnezzar II

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Neo-Babylonian Empire

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Jerusalem

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Persians

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hammurabi

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Marduk

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
massive
mathematics
modern construction
modern-day Iraq
one of Seven Wonders
rectangular
since 2019
stone stele
time measurement

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
institutional and retail investors
market capitalization and trading volume
medium to high
moderate to high
options
over 18000 points
price index
quarterly
real-time
stock market index
technology
top 10 stock indices
under 1000 points
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Adidas

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Airbus

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Allianz

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: BASF

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: BMW

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bayer

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Bank

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 30 Index

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Telekom

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Börse

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: E.ON

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Frankfurt Stock Exchange

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Germany

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: European Securities and Markets Authority

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Infineon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Linde

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: MDAX

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Fresenius

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Mercedes-Benz Group

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Alexander the Great

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Akkadian

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Assyrians

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Ashurbanipal

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Amorites

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Babylonia

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Esagila

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Babylon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bible

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Code of Hammurabi

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Esarhaddon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hanging Gardens

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Etemenanki

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Euphrates River

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hammurabi

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Herodotus' Histories

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Iraq War

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Ishtar Gate

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hittites

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Jerusalem

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Adidas AG

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Allianz SE

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: BASF SE

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: BMW AG

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bayer AG

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 30 Index

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX indices

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAXperformance index

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Bank AG

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Börse

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutscher Aktienindex

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Eurex

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: European Securities and Markets Authority

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Frankfurt Stock Exchange

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Germany

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Euro

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Mercedes-Benz Group AG

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: MDAX

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Laspeyres formula

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1
2
3
4
5
Amy Farrah Fowler
Bernadette Rostenkowski
Bill Prady
Caltech
Chuck Lorre
Howard Wolowitz
Leonard Hofstadter
Pasadena
Penny
Raj Koothrappali
Sara Gilbert
Sheldon Cooper
The Big Bang Theory
The Big Bang Theory pilot
The Big Bang Theory season 5
academic
brown hair
casual clothing
character dynamics
competitive
confident
direct
experimental physicist
female scientist
fictional character
glasses
humorous lines
intellectual challenges
intelligent
later episodes
main characters
physics
plot development
professional rivalry
recurring character
romantic involvement
sarcastic
scientific discussions
scientific experiments
show viewers
sitcom ensemble
university events

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1988
1992
1994
1996
1998
2000
2003
2006
2007
2010
2013
2015
2017
2021
All in Good Time
Andy Creeggan
Barenaked Ladies Are Me
Barenaked Ladies Are Men
Born on a Pirate Ship
Brian Wilson
Canadian band
Detour de Force
Ed Robertson
Everything to Everyone
Fake Nudes
Falling for the First Time
Gordon
Grinning Streak
If I Had $1000000
It's All Been Done
Jim Creeggan
Kevin Hearn
Maroon
Maybe You Should Drive
One Week
Pinch Me
Rock Spectacle
Scarborough, Ontario
Silverball
Steven Page
Stunt
The Old Apartment
Too Little Too Late
Tyler Stewart
alternative rock
appeared on The Tonight Show
comedy rock
pop rock
won Grammy nomination
won multiple Juno Awards

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
127
170
1997
22
262
279
3
7
8
ABC
Al Higgins
B Positive
Bill Prady
Bob Hearts Abishola
Bookie
Burbank, California
CBS
Chuck Lorre
Critics' Choice Television Awards
Cybill
Dharma & Greg
Eddie Gorodetsky
Golden Globe Awards
Grace Under Fire
Lee Aronsohn
Mike & Molly
Mom
NBC
Netflix
People's Choice Awards
Roseanne
Steven Molaro
The Big Bang Theory
The Connors
The Kominsky Method
Two and a Half Men
United States of Al
Warner Bros. Television Distribution
Warner Bros. Television Studios
Young Sheldon
laugh track
multi-camera sitcom
multiple Emmy Awards
producing successful sitcoms
single-camera comedy
studio audience
television production
television production company

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
7021 Hollywood Boulevard
Al Higgins
American
American television composer
American television director
American television producer
American television writer
Ashton Kutcher
Bethpage, New York
Bill Prady
Bob Hearts Abishola
Bookie
Charles Michael Levine
Charlie Sheen
Chuck Lorre Productions
Composer
Creating successful television sitcoms
Critics' Choice Television Awards
Cybill
Dharma & Greg
Eddie Gorodetsky
For various television shows
Golden Globe Awards
Grace Under Fire
His production company in 2000
In 2009
Jon Cryer
Lee Aronsohn
Mom
Multiple Emmy Awards
Multiple television episodes
Music
Musician and songwriter
October 18, 1952
On the Hollywood Walk of Fame
Over 1,000 television episodes
Over 500 television episodes
People's Choice Awards
Primetime Emmy Awards
Producer on Roseanne
Producers Guild of America Awards
Roseanne
Steven Molaro
TV Land Awards
Teenage Mutant Ninja Turtles
Television director
Television producer
Television writer
The Big Bang Theory
The Kominsky Method

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1927
2019
48 Hours
60 Minutes
All in the Family
America's Most Watched Network
Arthur Judson
Blue Bloods
CBS Entertainment
CBS Evening News
CBS News
CBS Radio
CBS Sports
CBS Studios
CBS Television Network
CBS Television Stations
CBS This Morning
CBS field-sequential color system
CSI: Crime Scene Investigation
Cheers
Criminal Minds
Dan Rather
Ed Bradley
Elementary
Everybody Loves Raymond
Face the Nation
Frasier
Gayle King
George Cheeks
Hawaii Five-0
How I Met Your Mother
I Love Lucy
July 1, 1941
Lesley Stahl
Leslie Moonves
M*A*S*H
Madam Secretary
Mike Wallace
Morley Safer
Murder, She Wrote
NCIS
National Amusements
New York City
Norah O'Donnell
Only CBS
Paramount Global
Person of Interest
Scott Pelley
September 18, 1927
Showtime Networks

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Amy Farrah Fowler
Bernadette
Bernadette Rostenkowski
Bernadette's father
Caltech
Debbie Wolowitz
English
Footprints on the Moon
Fruit Loops
Green Lantern
Howie
Jet Propulsion Laboratory
Jewish
Jewish American
Klingon
Leonard Hofstadter
MIT
Mike Rostenkowski
Mrs. Rostenkowski
Pasadena
Penny
Raj Koothrappali
Sheldon Cooper
Simon Helberg
Star Trek
Star Wars
The Big Bang Theory
aerospace engineer
belts with large buckles
brave
car
caring
collecting action figures
comic books
commitment
confident
curly hair
engineering
fictional character
flirtatious
funny
his mother
immature
impersonations
insecure
inventing
keyboard
loyal
magic
master's degree

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Bernadette Rostenkowski
Bill Prady
Caltech
Cello
Chuck Lorre
Cinnamon the Hamster
Collecting Action Figures
Competitive
Conservative
Doctor Who
English
Fictional Character
Frumpy
Glasses
Glendale California
Harp
Harry Potter
Harvard University
Howard Wolowitz
Human Intimacy
Intelligent
Jewish
Klingon
Knitting
Leonard Hofstadter
Liberal
Literal-Minded
Long Skirts
Long Straight
Loyal
Mandarin
Married
May 16 2018
Mayim Bialik
Monkey
Mr Fowler
Mrs Fowler
Neuroscientist
None
Often in Ponytail
Pasadena California
Penny Hofstadter
PhD in Neuroscience
Playing Harp
Primate Behavior
Prius
Purple
Raj Koothrappali
Reading
Sarcastic

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Albert Einstein
Alfred Hofstadter
Apartment 4A
Beverly Hofstadter
Caltech
Dungeons & Dragons
E=mc²
Halo
Howard Wolowitz
J.R.R. Tolkien
Johnny Galecki
Katee Sackhoff
Penny
Raj Koothrappali
Richard Feynman
Rush
Sheldon Cooper
Spock
Star Trek
Star Wars
Thai food
The Big Bang Theory
The Cheesecake Factory
The Flash
The Lord of the Rings
Tom Sawyer
Toyota Prius
William Shatner
bee stings
beer
comic books
confrontation
dairy products
double-slit experiment
e
electromagnetism
electron
experimental physicist
fictional character
heights
in experimental physics
insecure
intelligent
kind-hearted
laser physics
particle physics
patient
quantum mechanics
role-playing games
romantic

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1
124 acres
1891
39
3:1
5
6
Amos G. Throop
Avery House
Beaver
Beaver Apartments
Blacker House
Braun House
Cahill Center for Astronomy and Astrophysics
California Institute of Technology
Carver Mead
Charles Richter
Dabney House
David Baltimore
Division of Biology and Biological Engineering
Division of Chemistry and Chemical Engineering
Division of Engineering and Applied Science
Division of Geological and Planetary Sciences
Division of Humanities and Social Sciences
Division of Physics, Mathematics and Astronomy
Edward B. Lewis
Fleming House
Frances Arnold
Frank Capra
Geology Library
George Ellery Hale
Gordon Moore
Jet Propulsion Laboratory
John Schwarz
Kip Thorne
LIGO Hanford Observatory
LIGO Livingston Observatory
Lee Hood
Linus Pauling
Lloyd House
Millikan Library
Murray Gell-Mann
NASA's Deep Space Network
Owens Valley Radio Observatory
Page House
Palomar Observatory
Pasadena, California
Richard Feynman
Ricketts House
Robert Millikan

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2017
American
Big Little Lies
Euan Morton
Georgia, United States
Iain Loves Theatre
July 15, 2008
Law & Order: Special Victims Unit
Lee Armitage
Live with Kelly and Ryan
Lydia Armitage
PAW Patrol
Richard Armitage
The Arsenio Hall Show
The Chew
The Divorce Court
The Dr. Oz Show
The Dr. Phil Show
The Ellen DeGeneres Show
The Glass Castle
The Good Fight
The Jerry Springer Show
The Judge Alex Show
The Judge Cristina Perez Show
The Judge Glenda Hatchett Show
The Judge Greg Mathis Show
The Judge Hatchett Show
The Judge Joe Brown Show
The Judge Judy Show
The Judge Karen Mills-Francis Show
The Judge Maria Lopez Show
The Judge Marilyn Milian Show
The Judge Mathis Show
The Last of Us
The Late Show with Stephen Colbert
The Martha Stewart Show
The Maury Show
The Meredith Vieira Show
The Nate Berkus Show
The Oprah Winfrey Show
The People's Court
The Queen Latifah Show
The Rachael Ray Show
The Rosie O'Donnell Show
The Steve Harvey Show
The Talk
The Today Show
The Tonight Show Starring Jimmy Fallon
The Tyra Banks Show
The View

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
After maternity leave
Ambitious
Amy Farrah Fowler
Antibiotics
Bernadette Wolowitz
Bernie
Breaking up with Howard
Cheesecake
Cheesecake Factory
Cinnamon
Clowns
Competitive
Dating Howard Wolowitz
Dog
Employee of the Month
Fictional Character
First pregnancy
Girls' nights
Gossiping with friends
Halley Wolowitz
High-pitched
Higher than Howard's
Howard Wolowitz
Intelligent
Laboratory
Main breadwinner
Marrying Howard Wolowitz
Melissa Rauch
Microbiologist
Mike Rostenkowski
Mrs. Rostenkowski
Neil Michael Wolowitz
New Jersey
Oh, honey
Older Sister
Other scientists at Zangen
Pasadena, California
Penny
PhD in Microbiology
Pharmaceutical Researcher
Sarcastic
Scientific grant
Season 3
Season 5 finale
Second pregnancy
Seriously?
Shopping
Short
Singing
Storms

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2
American
Caltech
Howard Wolowitz
Howie for Howard Wolowitz
John Ross Bowie
Lenny for Leonard Hofstadter
Leonard Hofstadter
Raj Koothrappali
Raj for Raj Koothrappali
Sheldon Cooper
Shelly for Sheldon Cooper
The Barbarian Sublimation
The Big Bang Theory
academic rivalry
antagonist
arrogant
attends university events
boasts about accomplishments
brown hair
colleague with Howard Wolowitz
colleague with Raj Koothrappali
comic relief
competes for grants
competitive
condescending
confident delivery
contributed to scientific community
cosmology
distinctive due to rhotacism
earned PhD in physics
enjoys teasing colleagues
experimental design
experimental physics
fictional character
frenemy with Leonard Hofstadter
frenemy with Sheldon Cooper
has competitive nature
intelligent
mocking inflection
mocking others
often sarcastic tone
often wears casual clothing
participates in physics debates
physicist
pronounces R as W
pronouncing R as W
public speaking
published research papers
recurring character

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
5 feet 5 inches
Alaina Meyer
Allegory Productions
American
American actor
April 30, 1975
Avery
Bree, Belgium
Chicago as a child
Critics' Choice Television Award
David Healy
Ellen
Entourage
Hope & Faith
In Time
It's My Life
Jim Parsons
Kaley Cuoco
Kelli Garner
Kunal Nayyar
Leonard Hofstadter
Mary Lou
Mayim Bialik
Melissa Rauch
My Boys
National Lampoon's Christmas Vacation
People's Choice Award
Primetime Emmy Award
Richard Galecki
Roseanne
Russell 'Rusty' Griswold
Screen Actors Guild Award
Simon Helberg
The Big Bang Theory
The Conners
The Late Show with David Letterman
The Little Dog Laughed
The Little Engine That Could
The Tonight Show Starring Jimmy Fallon
The Trevor Project
Vanilla Sky
a farm in California
a production company
at age 7
attended high school in Chicago
charitable causes
environmental conservation
estimated over $100 million
for Bon Jovi
from 2007 to 2009

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
10.75 inches
1944
1952
2019
5.5 pounds
Academy Awards
Best Actor – Motion Picture Drama
Best Actor – Television Series Drama
Best Actress – Motion Picture Drama
Best Actress – Television Series Drama
Best Animated Feature Film
Best Director – Motion Picture
Best Foreign Language Film
Best Motion Picture – Drama
Best Original Score – Motion Picture
Best Original Song – Motion Picture
Best Screenplay – Motion Picture
Best Supporting Actor – Motion Picture
Best Supporting Actress – Motion Picture
Best Television Series – Drama
Beverly Hills, California
Carol Burnett
Carol Burnett Award
Cecil B. DeMille
Cecil B. DeMille Award
Hollywood Foreign Press Association
Jimmy Fallon
La La Land
NBC
NBC until 2026
Ricky Gervais
Seth Meyers
Tina Fey and Amy Poehler
a dinner
adding more diverse members
adopting a code of conduct
alcohol service
an indicator for Academy Awards
around 90
award
controversial speeches
excellence in film and television
for ethical concerns
for lack of diversity
gold-plated
in 2021
in 2022
in 2023
less formal than the Oscars
lifetime achievements in entertainment

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
American actress
Brooklyn, New York
Curb Your Enthusiasm
Death Becomes Her
Debbie Wolowitz
Italian-American
January 2, 1952
Just Shoot Me!
Los Angeles, California
Murphy Brown
My Blue Heaven
November 11, 2014
Sabrina the Teenage Witch
That Thing You Do!
That's So Raven
The Big Bang Theory pilot episode
The Big Bang Theory season 8
The Drew Carey Show
The King of Queens
The Search for One-eye Jimmy
appeared in television commercials
attended Herbert G. Birch Services
beloved by Big Bang Theory fans
cancer
character written out after her death
collaborated with top TV producers
created memorable character without being seen
had distinctive Brooklyn accent
had no children
heard but never seen
influential voice actress
known for distinctive voice
known for professionalism
lived in Los Angeles
mother of Howard Wolowitz
moved from theater to television
never married
over 30 years in entertainment
performed comedy and drama
performed in New York theater
played various ethnic roles
provided voice for animated series
regular role on hit TV series
remembered for iconic TV role
respected character actress
started in New York theater
studied at HB Studio
studied various acting techniques
voice actor for video games
worked in sitcoms and dramas

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2004
American
Arrested Development
Bachelor of Arts
Baskets
Curb Your Enthusiasm
English
He's Just Not That Into You
Iris Bowie
It's Always Sunny in Philadelphia
Jamie Denbo
Jimmy DiMeo in Speechless
Law & Order
May 30, 1971
Modern Family
New York City
Reno 911!
Speechless
The 40-Year-Old Virgin
The Bernie Mac Show
The Big Bang Theory
The Bob's Burgers Movie
The Boss
The Comeback
The Conners
The Dictator
The Disaster Artist
The Drew Carey Show
The Exes
The Five-Year Engagement
The Goldbergs
The Good Fight
The Good Wife
The Guilty
The Heat
The House
The Intern
The King of Queens
The Kominsky Method
The Lovebirds
The Many Saints of Newark
The McCarthys
The Middle
The Millers
The New Adventures of Old Christine
The Odd Couple
The Office
The Polka King
The Sarah Silverman Program
The Starling

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2016
2022
5 feet 6 inches
8 Simple Rules
American actress
Based on a True Story
Billie Jenkins in Charmed
Bridget Hennessy in 8 Simple Rules
Burning Bodhi
Camarillo, California
Cassie Bowden in The Flight Attendant
Charmed
Critics' Choice Television Award
December 31, 2013
Golden Globe Award
Harley Quinn
Hop
Humane Society
June 30, 2018
Kaley Christine Cuoco
Karl Cook
Lucky 13
March 30, 2023
Matilda Carmine Richie Pelphrey
November 30, 1985
Penny in The Big Bang Theory
People's Choice Award
Primetime Emmy Award
Project Chimps
Ryan Sweeting
Satellite Award
The Big Bang Theory
The Flight Attendant
The Last Ride
The Man from Toronto
The Penthouse
The Wedding Ringer
To Be Fat like Me
Tom Pelphrey
Why Him?
Yes, Norman Productions
actress
as a child
cats
dogs
equestrian sports
for Barbie
for Lay's potato chips
horse riding
horses

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
$1 million
$160 million
2001
2007
2012
2015
2017
2018
4
6 feet 1 inch
American
American actor
Aries
Bachelor of Arts in Theater
Barry B. Benson in The Simpsons
Best Actor in a Comedy Series
Bill Krogstad in The Big Year
Caucasian
Ed
Elmo in Hidden Figures
Garden State
God in An Act of God
Henry Willson in Hollywood
Houston, Texas
Human Rights Campaign
Individual Achievement in Comedy
James Joseph Parsons
Judging Amy
Klein Oak High School
March 24, 1973
Master of Fine Arts in Acting
Micheál in An Act of God
Nowhere to Go
Oh in Home
Pilot
Stuart Bloom in The Muppets
That's Wonderful Productions
The Big Bang Theory
The Big Bang Theory narrator
The Castle
The Ensemble Theatre
The Stockholm Syndrome
The Trevor Project
Tim in Garden State
Todd Spiewak
Tommy Boatwright in The Normal Heart
University of Houston
University of San Diego
Young Sheldon
gay

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
3rd Rock from the Sun
American actor
Burn Notice
CSI: Crime Scene Investigation
Caroline in the City
December 4, 1970
Eternal Sunshine of the Spotless Mind
Everybody Loves Raymond
Law & Order
Malcolm in the Middle
Modern Family
New York City
Shameless
Stuart Bloom
The 40-Year-Old Virgin
The Adventures of Pete & Pete
The Big Year
The Blacklist
The Book of Love
The Clapper
The Comeback
The D Train
The Drew Carey Show
The Five-Year Engagement
The Good Wife
The Great Buck Howard
The Great New Wonderful
The Guilty
The Intern
The Invention of Lying
The John Larroquette Show
The King of Queens
The Larry Sanders Show
The Last Shot
The Last Summer
The Layover
The Lovebirds
The Manchurian Candidate
The Many Saints of Newark
The Meddler
The Mentalist
The Mindy Project
The Movie Hero
The Nanny
The New Adventures of Old Christine
The Office
The Promotion
The Single Guy
The Sleepover
The Smurfs

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1960
American Cinema Editors Award
American television writer
Annie Award
Art Directors Guild Award
BAFTA TV Award
Bob Hearts Abishola
Caroline in the City
Chuck Lorre
Cinema Audio Society Award
Costume Designers Guild Award
Critics' Choice Television Award
Dharma & Greg
Directors Guild of America Award
Dream On
GLAAD Media Award
Gary Unmarried
Gilmore Girls
Golden Globe Award
Good Morning, Miami
Hollywood Music in Media Award
Hope & Faith
How to Be a Bookie
Hugo Award
International Emmy Award
It's Like, You Know...
Joey
Less than Perfect
Location Managers Guild Award
Married... with Children
Mike & Molly
Mom
Motion Picture Sound Editors Award
NAACP Image Award
New York City
Nickelodeon Kids' Choice Award
Outstanding Comedy Series
People's Choice Award
Primetime Emmy Award
Producers Guild of America Award
Samantha Who?
Satellite Award
Saturn Award
Society of Camera Operators Award
Star Trek: Voyager
Teen Choice Award
Television Critics Association Award
The Big Bang Theory
The Ellen Show
The Geena Davis Show

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
$800,000 for The Big Bang Theory
2013
2015
5 feet 8 inches
April 30, 1981
Bachelor of Business Administration
Barry in The Tiger
British
Conan
December 22, 2011
Drunk History
English
Golden Retriever
Gupta in Trolls
Hindi
Hindu
Indian
Jhumpa Lahiri
London
Los Angeles
Master of Fine Arts in Acting
Neha Kapur
New Delhi
Oregon Shakespeare Festival
Sachin Tendulkar
Sanjay in NCIS
Screen Actors Guild Awards
Temple University
The Ellen DeGeneres Show
The Last Airbender
The Namesake
The Nerdist
University of Portland
Vijay in Ice Age: Continental Drift
WTF with Marc Maron
Yes, My Accent Is Real
actor
attended St. Columba's School in Delhi
black
brown
cricket
dog named Aadi
estimated $45 million
former Miss India
memoir
played a Fire Nation soldier
reading
supports The Loomba Foundation
widows and orphans
writing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Adventurous
Ambitious
Analytical
Bernadette Rostenkowski
Bill Prady
Blunt
Caltech
Caring
Chuck Lorre
Compassionate
Competitive
Curious
Dependable
Determined
Diligent
Disciplined
Empathetic
Fictional Character
Focused
Funny
Generous
Honest
Howard Wolowitz
Humble
Independent
Intelligent
Kind
Leonard Hofstadter
Logical
Loyal
Married
Mayim Bialik
Methodical
Neurobiologist
Neurobiology
Observant
Organized
Patient
Penny Hofstadter
Perceptive
Playful
Primates
Raj Koothrappali
Reliable
Resourceful
Responsible
Romantic
Sarcastic
Season 3
Sheldon Cooper

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
10
12
2007 to 2019
2011
2012
2015
2017
4
6 feet 1 inch
American actor
An Act of God
Bachelor of Arts in Theater
Best Actor in a Comedy Series
Best Featured Actor in a Play
Dr. Sheldon Cooper
Elmo's World
Family Guy
GLAAD
Garden State
God
Hidden Figures
Home
Houston, Texas
Individual Achievement in Comedy
Intel
James Joseph Parsons
March 24, 1973
Master of Fine Arts in Acting
Mister Noodle's brother Mister Noodle
Oh
Paul Stafford
Sprint
Television
That's Wonderful Productions
The Big Bang Theory
The Big Year
The Giggity Wife
The Normal Heart
The Princess Guide
The Simpsons
The Trevor Project
Todd Spiewak
University of Houston
University of San Diego
Yes, My Accent Is Real
Young Sheldon
gay
narrator
over $1 million
over $160 million

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2012
4 feet 11 inches
Ambitious
American
Amy Farrah Fowler
Bernadette Wolowitz
Bernie
Bernie Wolowitz
Blonde
Blue
Catholic
Cheesecake
Clowns
Colorful
Competitive
Cooking
Debbie Wolowitz
Failure
Feminine
Fictional Character
Fiercely protective
Gardening
Girls' nights
Halley Wolowitz
High-pitched
House
Howard Wolowitz
Initially strained
Intelligent
Later improved
Melissa Rauch
Microbiologist
Middle-class
Mike Rostenkowski
Mini Cooper
Mrs. Rostenkowski
Neil Michael Wolowitz
Older brother
Pasadena, California
Penny Hofstadter
PhD in Microbiology
Pharmaceutical Researcher
Playing board games
Polish-American
Preppy
Red
Sarcastic
Season 3
Shopping
Shoulder-length

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1944
20th Century Fox studios
31 times
5 Golden Globes
7 Golden Globes
8 Golden Globes
Best Actor – Motion Picture Drama
Best Actor – Television Series Drama
Best Actress – Motion Picture Drama
Best Actress – Television Series Drama
Best Animated Feature Film
Best Director – Motion Picture
Best Foreign Language Film
Best Miniseries or Television Film
Best Motion Picture – Drama
Best Original Score – Motion Picture
Best Original Song – Motion Picture
Best Screenplay – Motion Picture
Best Supporting Actor – Motion Picture
Best Supporting Actress – Motion Picture
Best Television Series – Drama
Beverly Hills, California
Carol Burnett
Carol Burnett Award
Cecil B. DeMille
Cecil B. DeMille Award
Golden Globe Awards Voting Body
HFPA diversity issues
Hollywood Foreign Press Association
La La Land
Meryl Streep
NBC
Pia Zadora winning in 1982
The X-Files
a Golden Globe statue
a dinner
an indicator of Academy Award success
around 90
award
excellence in film and television
in 2022
in 2023
in December
in January
informal atmosphere
lifetime achievement in entertainment
lifetime achievement in television
more diverse membership
separating drama and comedy/musical categories
various celebrities

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Amy Farrah Fowler
Arabic
Bazinga
Bernadette Rostenkowski
Caltech
Caltech Engineering Award
Debbie Wolowitz
Farsi
Footprints in the Sand
Fruit Loops
Halley Wolowitz
Hebrew
Howie
I'm an astronaut
India
International Space Station
Japan
Jet Propulsion Laboratory
Klingon
Leonard Hofstadter
MIT
Mandarin
Mars
NASA Exceptional Achievement Medal
Neil Michael Wolowitz
North Pole
Pasadena
Penny
Raj Koothrappali
Rocket Man
Russia
Russian
Segway
Sheldon Cooper
Simon Helberg
Space Cowboy
Star Trek
Star Wars
That's my spot
The Big Bang Theory
Wolowitz
X-Men
aerospace engineer
beard
belt buckles
colorful shirts
cosplay
fictional character
heights
his mother

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
1999
2007-2019
2012
2013
2014
2015
2016
2017
279
5 feet 8 inches
Actor
April 30, 1981
Architect
Astrophysicist
Author
Bachelor of Business Administration
Black
Bobby in Huck & Holden
British
Brown
Cinnamon
Comedian
December 22, 2011
Dog Lover
Engineer
Gupta in Trolls
Howard Wolowitz
Indian
London, England
Master of Fine Arts
Memoir
Neha Kapur
New Delhi, India
Raj Koothrappali
Rekha Nayyar
Rishi in The Scribbler
Romantic
Sam in Consumed
Sanjay in Ice Age: Continental Drift
Screen Actors Guild Award
Selective Mutism
Shy
Sudhir Nayyar
Temple University
The Big Bang Theory
University of Portland
Vijay in The Tiger Hunter
Writer
Yes, My Accent Is Real

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
124 acres
1891
39 Nobel Prizes
4 Turing Awards
6 Fields Medals
71 National Medals of Science
Amos G. Throop
Bachelor of Science degrees
Beavers
Beckman Auditorium
Cahill Center for Astronomy and Astrophysics
California Institute of Technology
Caltech Seismological Laboratory
Caltech Y
David Baltimore
Department of Energy
Ditch Day
Division of Biology and Biological Engineering
Division of Chemistry and Chemical Engineering
Division of Engineering and Applied Science
Division of Geological and Planetary Sciences
Division of Humanities and Social Sciences
Division of Physics, Mathematics and Astronomy
Doctor of Philosophy degrees
Frances Arnold
Gordon Moore
Jet Propulsion Laboratory
Jet Propulsion Laboratory for NASA
Kavli Nanoscience Institute
Kip Thorne
LIGO Laboratory
Linde + Robinson Laboratory
Linus Pauling
MIT
Master of Science degrees
Millikan Library
Millikan Pumpkin Drop
Murray Gell-Mann
NASA
NCAA Division III
National Science Foundation
Pasadena, California
Richard Feynman
Robert A. Millikan
Sherman Fairchild Library
Southern California Intercollegiate Athletic Conference
The truth shall make you free
Theodore von Kármán
Thomas F. Rosenbaum
Throop University

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
American actor
Arthur Pynchon
Barry
Barry Lowenstein
Burn Notice
CSI: Crime Scene Investigation
Clerk
Curb Your Enthusiasm
December 4, 1970
Everybody Loves Raymond
Gary
Gene
Jeff
Kevin
Law & Order
Lloyd
Malcolm in the Middle
Modern Family
New York City
Norman
Psych
Ron
Sweet Home Alabama
The 5th Wave
The Big Bang Theory
The Big Year
The Comic Center of Pasadena
The Dictator
The Disaster Artist
The Drew Carey Show
The Good Fight
The Good Wife
The Great New Wonderful
The Invention of Lying
The King of Queens
The Last Shot
The Mindy Project
The Nanny Diaries
The Office
The Sum of All Fears
Two and a Half Men
Ugly Betty
United States
Vince
Walter
Weeds
Yes, Dear
comedian
comic book store owner

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
173
2311 North Los Robles Avenue
3QKZ078
Alfred Hofstadter
Apartment 4A
Batman
Battlestar Galactica
Beverly Hofstadter
Bose-Einstein condensate
California
Caltech
Chinese food
Doctor Who
Dungeons & Dragons
Firefly
Green Lantern
Halo
Howard Wolowitz
Indian food
Johnny Galecki
Michael Hofstadter
Myst
Nature
Newcomb Cleveland Prize
Pasadena
Penny
Physical Review Letters
Princeton University
Raj Koothrappali
Risk
Science
Settlers of Catan
Sheldon Cooper
Star Trek
Star Wars
Stevenson Award
Superman
Thai food
The Big Bang Theory
The Cheesecake Factory
The Flash
Toyota Prius
World of Warcraft
X-Men
board games
comic books
condensed matter physics
experimental physicist
experimental physics
fictional character

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
A Nightmare on Elm Street
American
American actor
April 30, 1975
Backfield in Motion
Bean
Billy Quinn
Blues Brothers 2000
Book of Love
Borel
Bounce
Bree, Belgium
Buster
Curb Your Enthusiasm
Danny
David Healy
Entourage
Floyd
Glen Lantz
Hancock
In Time
Ira
Jason
Jeremy
Leonard Hofstadter
Mark the Cameraman
Max Neurick
Mighty Mack
Morgan's Ferry
Murder Ordained
My Boys
National Lampoon's Christmas Vacation
Peter Brown
Prancer
Roseanne
Russell 'Rusty' Griswold
Seth
Simon
Slutty
Stingo Wheelie
Suicide Kings
The Big Bang Theory
The Cleaner
The Conners
The Good Wife
The Little Engine That Could
The Loop
The Master of Disguise
The Norm Show
The Opposite of Sex

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
1997
279
ABC
Al Higgins
Bill Prady
Bob Hearts Abishola
Bookie
Brief flash
Burbank, California
CBS
Character-driven jokes
Chuck Lorre
Chuck Lorre's thoughts
Comedy
Cybill
Dharma & Greg
Dramedy
Eccentric personalities
Eddie Gorodetsky
Extensive
FX
Family dynamics
Friendship
Generally positive
Gina Yashere
Grace Under Fire
Growth arcs
High ratings
Lee Aronsohn
Live audience
Local stations
Mike & Molly
Mom
Multi-camera
Netflix
People's Choice Awards
Primetime Emmy Awards
Production company logo
Production information
Relatable flaws
Romance
Roseanne
Single-camera
Sitcom
Sitcom production
Situational comedy
Social issues
Steven Molaro
TBS

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2011
@CriticsChoice
Aisha Tyler
Best Actor in a Comedy Series
Best Actor in a Drama Series
Best Actress in a Comedy Series
Best Actress in a Drama Series
Best Animated Series
Best Comedy Series
Best Drama Series
Best Limited Series
Best Movie Made for Television
Best Reality Competition Series
Best Reality Series
Best Structured Reality Series
Best Talk Show
Best Unstructured Reality Series
Broadcast Television Journalists Association
Cat Deeley
Critics' Choice Association
Critics' Choice Awards
Critics' Choice Movie Awards
Critics' Choice Movie Awards in 2016
Golden Globe Awards
Jim Parsons
Jon Hamm
Julianna Margulies
June
June 20, 2011
Los Angeles
Mad Men
May
Michael J. Fox
Modern Family
Olivia Munn
Rob Huebel
T.J. Miller
The CW
Tina Fey
award
circular film reel
criticschoice.com
excellence in television programming
glass
predicting Emmy winners
television critics
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
American
Caltech
John Ross Bowie
Leonard Hofstadter
Mikey Kripke
Pasadena
PhD in physics
Sheldon Cooper
Sheldon's quirks
Shelly
Susan Kripke
The Big Bang Theory
at conferences
basketball
basketball with colleagues
car
casual academic
coffee
competitive
computer for research
confident
dog
experimental particle physics
experimental physicist
experimental physics
faculty lounge
faculty meetings
fictional character
glasses
graduate students
grants
holidays
house
married
near Sheldon Cooper's office
other Caltech physicists
other faculty members
particle accelerators
physics
physics conferences
physics courses
pronounces R as W
provocative
rhotacism
sarcastic
scientific journals
scientific papers
sports
sports on TV
tall with dark hair

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2011
2012
Al Higgins
American
American television producer
Bethpage, New York
Bill Prady
Bob Hearts Abishola
Book of vanity cards
Charles Michael Levine
Chuck Lorre Productions
Composer
Creating sitcoms
Cybill
Dharma & Greg
Director
Disjointed
Eddie Gorodetsky
English
Episodes of his shows
Golden Globe Awards
Grace Under Fire
Guitar
Highest-paid television producers
Hundreds of millions of dollars
Jim Parsons
Laugh track
Lee Aronsohn
Los Angeles
Messages in end credits
Mike & Molly
Modern sitcoms
Mom
Multi-camera setup
Multiple Emmy Awards
Music for his shows
Musician
My Two Dads
October 18, 1952
People's Choice Awards
Roseanne
Screenwriter
Star on Hollywood Walk of Fame
Television Academy Hall of Fame
Television Critics Association Awards
Television producer
The Big Bang Theory
The Kominsky Method
The Simpsons
Theme songs

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1960
1990s
American television writer
Caroline in the City
Chuck Lorre
Dharma & Greg
Dottie Dartland
Dream On
Gilmore Girls
IBM
It's Like, You Know...
Jim Henson Company
Los Angeles
New York City
Outstanding Comedy Series
Primetime Emmy Award
Producers Guild of America Award
Rebecca Rand
The Big Bang Theory
The Muppets
The Muppets' Wizard of Oz
Two and a Half Men
University at Buffalo
Writers Guild
Writers Guild of America
Writers Guild of America Award
animated projects
awards for writing
casting of The Big Bang Theory
character-driven comedy
characters for The Big Bang Theory
charity events
classic sitcoms
collaborations with Chuck Lorre
comic books
computer programmer
computer science
creative freedom
humor
industry events
media outlets
multiple TV series
over 100 episodes
science
science education
science fiction
science-based shows
script development
sitcom writing
talk shows

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1971
American actor
Arrested Development
Baskets
Brooklyn Nine-Nine
Curb Your Enthusiasm
It's Always Sunny in Philadelphia
Jimmy DiMeo
Kripke on The Big Bang Theory
Law & Order
Malcolm in the Middle
Modern Family
New York City
Reno 911!
Speechless
The Bernie Mac Show
The Big C
The Conners
The Drew Carey Show
The Goldbergs
The Good Fight
The Good Wife
The King of Queens
The Kominsky Method
The Middle
The Mindy Project
The New Adventures of Old Christine
The Office
The Unicorn
University of Virginia
drama

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
8 Simple Rules
Alley Cats Strike
Alyson
American
Anne
Authors Anonymous
Billie Jenkins
Bridget Hennessy
Camarillo, California
Can't Be Heaven
Cassie Bowden
Charmed
Debating Robert Lee
Don't Forget Your Toothbrush
Elinor
First Daughter
Gretchen Palmer
Growing Up Brady
Hannah Rinaldi
Hillary
Hop
Hot Girl
Justine
Karby
Karina
Killer Movie
Lacey
Little Girl
Lucky 13
Lucy
Mandy
Maralee
Maureen McCormick
My So-Called Life
Northern Lights
November 30, 1985
Paulette
Peggy
Penny
Picture Perfect
Quints
Role Models
Sam O'Hare
Sarah Baker
Sasha
Sophie
The Big Bang Theory
The Boy Next Door
The Ellen Show
The Flight Attendant

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Akkad
Akkadians
Alexander the Great
Amorites
Assyria
Assyrians
Babylon
Babylonia
Code of Hammurabi
Epic of Gilgamesh
Euphrates River
Fertile Crescent
Greek culture
Middle East
Nineveh
Persians
Roman culture
Sumer
Tigris River
Ur
Uruk
advanced metallurgy
after Persian conquest
agriculture
astronomical records
barley
barter system
base-60 number system
bronze
cattle
circle into 360 degrees
city walls
clay tablets
commoners
copper
cuneiform writing
dates
first cities
frequent floods
goats
gold
goods and ideas
historical region
invasions
irrigation systems
jewelry
kings
land between rivers
later civilizations
legal codes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
13 years
323 BC
356 BC
Alexander IV
Alexandria
Alexandria Eschate
Alexandria in Egypt
Anatolia
Antigonus
Aristotle
Asia
Babylon
Bactria
Battle of Gaugamela
Battle of Issus
Battle of the Granicus
Battle of the Hydaspes
Bucephala
Bucephalus
Craterus
Darius III
Egypt
Greece
Hellenistic period
Hephaestion
Heracles
India
Judaea
King Porus
Lysimachus
Macedon
Mesopotamia
Olympias
Oracle of Siwa
Parmenion
Parysatis
Pella
Persia
Persian Empire
Philip II of Macedon
Philip III
Phoenicia
Ptolemy
Roman Empire
Roxana
Seleucus
Siege of Gaza
Siege of Tyre
Sogdia
Stateira

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Akkad
Assyria
Atatürk Dam
Babylon
Balikh River
Basra
Bible
Bunn's short-tailed bandicoot rat
Deir ez-Zor
Dura-Europos
Eridu
Euphrates barbel
Euphrates softshell turtle
Fallujah
Göbekli Tepe
Haditha Dam
Iraq
Karasu River
Khabur River
Mari
Mesopotamia
Mount Ararat
Murat River
Nasiriyah
Nineveh
Persian Gulf
Quran
Raqqa
Saddam River
Shatt al-Arab
Sumer
Syria
Tabqa Dam
Tell Brak
Tell Leilan
Third River
Tigris River
Turkey
Ur
Uruk
Western Asia
agriculture
approximately 2,800 kilometers
approximately 500,000 square kilometers
between Turkey and downstream countries
climate change
cradle of civilization
damming
date palm groves
eastern Turkey

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Adad
Akkadian culture
Akkadian language
Akkadian texts
Amorite language
Amurru in Akkadian
Arameans
Babylon
Babylonian society
Bible
Bronze Age
Canaan
Code of Hammurabi
Dagan
Egyptian texts
First Dynasty of Babylon
Hammurabi
Hittite invasions
Ishtar
Israelites
Levant
Mari
Martu in Sumerian
Mesopotamia
Og
Qatna
Sihon
Sumerian culture
Sumerian texts
Syrian Desert
Third Dynasty of Ur
Ur III dynasty
West Semitic language family
Yamhad
agriculture
ancient Semitic-speaking people
animal husbandry
at Ebla
at Mari
at Ugarit
bronze tools
chariots
cuneiform writing
dates
divine kingship
elders
fortified cities
goats
grains
inhabitants of Canaan

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
6th Century BCE
About 23 meters
Ancient Wonder
Approximately 75 feet
Arched Openings
Architectural Marvel
Aromatic Herbs
Artificial Mountain
Babylon
Cascading Waterfalls
Chain Pump
Climbing Plants
Cultivated Beds
Decorative Statues
Display royal power
Elevated Walkways
Euphrates River
Exotic Flora
Flowering Shrubs
Flowing Water
Fountains
Fruit Trees
Gardener Quarters
Hanging Vines
Herb Gardens
Imported Flora
Irrigation Channels
King Nebuchadnezzar II
Lead Sheets
Lily Ponds
Local Vegetation
Manicured Lawns
Marble Columns
Medicinal Plants
Mud Bricks
Multiple Levels
Orchards
Ornamental Grasses
Palm Groves
Ponds
Queen Amytis
Ramps
Rare Species
Reflecting Pools
Remind Queen Amytis of her homeland
Roof Gardens
Rose Gardens
Royal Chambers
Shade Trees
Shaded Pavilions

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1927
1941
1951
60 Minutes
All in the Family
Amos 'n' Andy
Arthur Judson
Blue Bloods
Bonanza
CBS All Access
CBS Entertainment
CBS Evening News
CBS Media Ventures
CBS News
CBS Radio Network
CBS Sports
CBS Studios
CBS Television Network
CSI: Crime Scene Investigation
Cheers
Columbia Broadcasting System
Cybill
Dallas
Designing Women
Everybody Loves Raymond
Falcon Crest
Gunsmoke
Hawaii Five-0
How I Met Your Mother
I Love Lucy
Knots Landing
M*A*S*H
Magnum P.I.
Murder, She Wrote
Murphy Brown
NCIS
New York City
Newhart
Paramount Global
Paramount+
Seinfeld
Showtime
Simon & Schuster
Survivor
Taxi
The Amazing Race
The Andy Griffith Show
The Beverly Hillbillies
The Big Bang Theory
The Bob Newhart Show

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
7th century
Achaemenid Empire
Al-Biruni
Arab conquest
Avesta
Avicenna
Battle of Thermopylae
Bustan
Canada
Cyrus the Great
Darius I
Divan of Hafez
Europe
Ferdowsi
Greeks
Gulistan
Hafez
Iran
Isfahan
Islam
Islamic Golden Age
Islamic art
Middle Eastern culture
Naqsh-e Jahan Square
Nowruz
Old Persian cuneiform
Omar Khayyam
Pasargadae
Persepolis
Persia
Persian
Persian alphabet
Persian architecture
Persian carpets
Persian classical music
Persian dance
Persian literature
Qajar dynasty
Rumi
Saadi
Safavid dynasty
Sasanian Empire
Shahnameh
Shia Islam
Silk Road
Solar Hijri calendar
Susa
United States
Xerxes I
Zarathustra

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
50 names
Babylon
Babylonian deity
Damkina
Ea
Enuma Elish
Esagila
Jupiter
Mesopotamia
Nabu
Sarpanit
agriculture
air
arrow
bow
bull
chief deity
constellation
cosmos
creation myth
divination
earth
ether
fertility
fire
flood
goat-fish
healing
heavens
imhullu
justice
kingship
knowledge
light
lightning
magic
marru
moon
mušḫuššu
net
order
patron god
peace
planet Jupiter
protection
rain
scribes
shovel
snake-dragon
spade

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1178 BCE
1258 BCE
1274 BCE
1915
Anatolia
Ancient Egypt
Arinna
Assyria
Assyrians
Battle of Kadesh
Bedřich Hrozný
Bronze Age
Egypt
Great King
Hattusa
Hattusili III
Hittite
Hittite laws
Indo-European
Iron Age
Lion Gate
Mursili II
Neo-Hittite states
Sea Peoples
Suppiluliuma I
Syria
Teshub
Treaty of Kadesh
agriculture
ancient civilization
animal sacrifice
archaeologists in 19th century
bows
chariots
circa 1178 BCE
circa 1600 BCE
clay tablets
code of laws
commoners
compensation
copper
cuneiform script
external invasions
fines
fortified cities
hierarchical
infantry
internal strife
iron
metals

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1988
1992
1994
1996
1998
2000
2003
2006
2007
2010
2013
2015
2017
2021
Album of the Year
All in Good Time
Andy Creeggan
Barenaked Ladies Are Me
Barenaked Ladies Are Men
Barenaked Ladies are Kris
Big Bang Theory
Big Bang Theory Theme
Born on a Pirate Ship
Brian Wilson
Call and Answer
Canadian band
Detour de Force
Easy
Ed Robertson
Everything to Everyone
Fake Nudes
Falling for the First Time
Gonna Walk
Gordon
Grinning Streak
Group of the Year
If I Had $1000000
It's All Been Done
Jim Creeggan
Juno Awards
Kevin Hearn
Lookin' Up
Maroon
Maybe You Should Drive
Odds Are
One Week
Pinch Me
Rock Spectacle
Scarborough, Ontario
Silverball

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1901
2.25 meters
282 laws
Akkadian language
Hammurabi
Hammurabi's reign
Iran
Jacques de Morgan
Louvre Museum
Paris
Susa
adoption
ancient Babylon
assault
awilum
based on social status
boatmen
builders' liability
circa 1754 BC
civil law
commercial law
contracts
criminal law
cuneiform script
debts
diorite stele
divorce
establish justice
eye for an eye principle
false accusations
family law
farmers
herders
if a builder's house collapses
if a man borrows money
if a man destroys another's eye
if a man divorces his wife
if a man rents a field
if a man steals temple property
if a man's ox gores someone
if a son strikes his father
if a surgeon causes death
inheritance
legal code
lex talionis
liability
marriage
murder
mushkenum
physicians' fees

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
562 BC
586 BC
597 BC
605 BC
Adad
Amel-Marduk
Amytis of Media
Anu
Ashur
Babylon's walls
Babylonian Captivity
Babylonian king
Battle of Carchemish
Bel
Book of Daniel
Book of Ezekiel
Book of Jeremiah
Dagan
Daniel
Dumuzid
Ea
Egyptians
Enlil
First Temple in Jerusalem
Gula
Hanging Gardens of Babylon
Inanna
Ishtar
Ishtar Gate
Jerusalem
Jewish population
Kingdom of Judah
Marduk
Nabopolassar
Nabu
Nanshe
Nergal
Ninhursag
Ninlil
Ninsun
Ninurta
Nisaba
Nusku
Processional Way in Babylon
Shamash
Sin
Solomon's Temple
Tiamat
Utu
after madness

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Akkadian language
Aramaic language
Ashur
Ashurbanipal
Assur
Babylon
Bronze Age
Egypt
Elam
Esarhaddon
Iron Age
Ishtar
Israel
Judah
Marduk
Mesopotamia
Nabu
Neo-Assyrian Empire
Nimrud
Nineveh
Sargon II
Semitic people
Sennacherib
Shamshi-Adad I
Tiglath-Pileser III
Urartu
agriculture
ancient civilization
aqueducts
barley
cattle
cavalry
chariots
complex bureaucracy
cruelty to enemies
cuneiform script
dates
deportation of populations
ethnic group
extensive road system
fortified cities
goats
imperial administration
irrigation
ivory carvings
lamassu statues
massive palaces
metalwork
military prowess
professional army

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
27
39
66
Abraham's covenant
Aramaic
Book of Job
Book of Revelation
Christianity
David and Goliath
Exodus from Egypt
Genesis
God
Greek
Hebrew
Holy Spirit
Jesus Christ
Jonah and the whale
Judaism
New Testament
Noah's ark
Old Testament
Revelation
Sermon on the Mount
Ten Commandments
Tower of Babel
Western civilization
ancient literature
apocalyptic literature
approximately 1500 years
art
birth of Jesus
collection of books
covenant
creation
crucifixion of Jesus
epistle
eternal life
ethics
faith
fall of man
gospel
history
hope
justice
kingdom of God
law
literature
love
mercy
music

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
180 cubits
2019
4th century BCE
6th century BCE
7th century BCE
91 meters
Akitu festival
Alexander the Great
Alexander's death
Babylon
Babylon ruins
Babylonian Chronicles
Babylonian treasury
Enuma Elish
Esagila complex
Euphrates
Hammurabi
Herodotus
Iraq
Marduk
Mesopotamian
Nebuchadnezzar II
Neo-Babylonian
New Year celebrations
Robert Koldewey
Strabo
Sumerian ziggurats
Tower of Babel
World Heritage Site
ancient art
approximately 91 meters
astronomical observations
biblical texts
blue
center of worship
clay tablets
cuneiform tablets
early 20th century
foundation stones
glazed bricks
later religious architecture
link between heaven and earth
military campaign
modern reconstructions
mud bricks
other constructions
planned reconstruction
priests
prisoners of war
ramps

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
479 BCE
5th century BCE
Ancient Greek
Calliope
Clio
Erato
Euterpe
Father of History epithet
Greco-Persian Wars
Herodotus
Melpomene
Plutarch
Polymnia
Renaissance historiography
Roman historians
Terpsichore
Thalia
Thucydides
Urania
account of Battle of Marathon
account of Battle of Plataea
account of Battle of Salamis
account of Battle of Thermopylae
ancient Greek literature
ancient civilizations
anecdotes
being first major historical work
comprehensive scope
credulity
critical evaluation of sources
cultural insights
customs of various peoples
description of Babylon
description of Egypt
description of Persia
description of Scythia
detailed descriptions of cultures
digressions
entertaining narrative style
ethnography
explain causes of Greco-Persian Wars
eyewitness accounts
foundation of Western historiography
genealogies
geographical descriptions
geography
historical work
history
inclusion of myths
inquiry

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Afro-Asiatic
Akkadian Empire
Akkadian literature
Amarna letters
Arabic
Aramaic
Ashurbanipal
Assyria
Assyrian
Assyriology
Atra-Hasis
Babylon
Babylonian
Code of Hammurabi
Cyrus the Great
Descent of Ishtar
Enuma Elish
Epic of Gilgamesh
Erra and Ishum
Etana myth
Hammurabi
Hebrew
Late Babylonian
Ludlul bēl nēmeqi
Mesopotamia
Mesopotamian mythology
Middle Babylonian
Myth of Adapa
Nabonidus
Nebuchadnezzar II
Neo-Assyrian
Neo-Babylonian
Nergal and Ereshkigal
Nineveh
Old Akkadian
Old Babylonian
Persian Empire
Sargon of Akkad
Semitic
Semitic language
Sumerian
The Poor Man of Nippur
administration
ancient Near East
ancient languages
circa 2500 BCE to 100 CE
clay tablets
complex verb system
cuneiform
cuneiform studies

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
125 square kilometers
4th millennium BCE
754 meters above sea level
Al-Aqsa Mosque
Al-Quds University
Arabic
Arabs
Armenian Quarter
Armenians
Beitar Jerusalem FC
Ben Gurion Airport
Christian Quarter
Christianity
Church of the Holy Sepulchre
City of David
Crusader capture in 1099
Dome of the Rock
East Jerusalem
Easter
Hadassah Medical Center
Hanukkah
Hapoel Jerusalem BC
Hebrew
Hebrew Bible
Hebrew University of Jerusalem
Herod the Great
Independence Park
Islam
Israel
Israel Museum
Jebus
Jerusalem Day
Jerusalem Light Rail
Jerusalem Municipality
Jesus Christ
Jewish Quarter
Jews
Judaism
King David
Knesset
Mahane Yehuda Market
Mediterranean
Moshe Lion
Muslim Quarter
New Testament
Old City
Prophet Muhammad
Quran
Ramadan
Sacher Park

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
14 meters
1899
1930
1930s
278
30 meters
575 BCE
6th century BCE
Adad
Akkadian mythology
Babylon
Babylon site
Babylonian
Berlin
Germany
Iraq
Ishtar
Ishtar Temple complex
Marduk
Mesopotamian
Mushhushshu
Near East Museum
Nebuchadnezzar II
Nebuchadnezzar II reign
Nebuchadnezzar inscriptions
Neo-Babylonian Empire
New Year festival
Pergamon Museum
Processional Way
Robert Koldewey
UNESCO listed
Walls of Babylon
World Heritage Site
archaeological artifact
arched entrance
aurochs
baked bricks
bitumen
blue
bulls
ceremonial purposes
cuneiform
dedicatory inscriptions
display power
divine protection
dragons
entrance to inner city
fired clay
gate
glazed bricks

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19th century
20th century
5th century BCE
Akitu festival
Alexander the Great
Assyriologists
Babylon
Babylon religious complex
Babylonian creation myth
Ea
Enuma Elish
Esagila Chronicle
Etemenanki ziggurat
Euphrates River
Hellenistic period
Herodotus' Histories
Marduk
Marduk's cult statue
Nabu
Nebuchadnezzar II
Nebuchadnezzar II inscriptions
New Year celebrations
Robert Koldewey
Sumerian temple design
Xerxes I
ancient maps
archives
cuneiform texts
cylinder seals
daily offerings
divine weapons
economic center
for Marduk's statue
for Zarpanitu
for daily ceremonies
for offerings
for priests
for rituals
for storage
for workshops
glazed brick decorations
high priest
incantations
kings
large complex
later Mesopotamian temples
modern Iraq
monumental gateways
mudbrick walls
other Babylonian gods

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
539 BCE
587 BCE
605 BCE
605–562 BCE
612 BCE
626 BCE
87 years
Achaemenid Empire
Akkadian
Babylon
Babylonian Captivity
Chaldean Empire
Cyrus the Great
Esagila
Hanging Gardens of Babylon
Iron Age
Marduk
Mesopotamia
Nabonidus
Nabopolassar
Nebuchadnezzar II
Neo-Assyrian Empire
ancient empire
cuneiform
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1901
Babylon as the dominant city
Babylonian king
Esagila temple
Larsa
Mari
Rim-Sin I of Larsa
Shamash
Shamshi-Adad I of Assyria
Sin-Muballit
Zimri-Lim of Mari
a black diorite stele
a shrewd diplomat
agricultural issues
an eye for an eye
appeals to the king
around 1810 BC
contract disputes
crimes
cuneiform script
debt servitude
doctors and builders
family law
for his laws
from 1792 BC to 1750 BC
goods and services
his father as king
in his code
in legal proceedings
inheritance
irrigation systems
justice in his kingdom
laborers
lex talionis
malpractice
marriage and divorce
proclamations and edicts
property rights
social class
southern Mesopotamia
temples and infrastructure
the Akkadian language
the Babylonian Empire
the Code of Hammurabi
the Euphrates River
the First Babylonian Dynasty
the arts and culture
the city of Isin
the city-states of Sumer and Akkad
the gods

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1890
Allianz Africa
Allianz Americas
Allianz Argentina
Allianz Asia Pacific
Allianz Assistance
Allianz Australia
Allianz Austria
Allianz Belgium
Allianz Benelux
Allianz Brazil
Allianz Bulgaria
Allianz Canada
Allianz Capital Partners
Allianz Care
Allianz Central and Eastern Europe
Allianz China
Allianz Czech Republic
Allianz Denmark
Allianz Finland
Allianz France
Allianz Global Assistance
Allianz Global Corporate & Specialty
Allianz Global Corporate & Specialty SE
Allianz Global Investors
Allianz Greece
Allianz Hungary
Allianz India
Allianz Investment Management
Allianz Ireland
Allianz Italy
Allianz Japan
Allianz Life
Allianz Luxembourg
Allianz Mexico
Allianz Middle East
Allianz Netherlands
Allianz Norway
Allianz Partners
Allianz Poland
Allianz Portugal
Allianz Real Estate
Allianz Risk Transfer
Allianz Romania
Allianz Russia
Allianz SE Reinsurance
Allianz Spain
Allianz Sweden
Allianz Switzerland
Allianz Technology

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1970
1972
A400M Atlas
Aerospace
Airbus A220
Airbus A220-100
Airbus A220-300
Airbus A300
Airbus A310
Airbus A318
Airbus A319
Airbus A319neo
Airbus A320
Airbus A320neo
Airbus A321
Airbus A321neo
Airbus A330
Airbus A330neo
Airbus A340
Airbus A350
Airbus A350-1000
Airbus A350-900
Airbus A380
Airbus A380-800
Airbus Atlantic
Airbus Beluga
Airbus C295
Airbus Commercial Aircraft
Airbus Defence and Space
Airbus H125
Airbus H135
Airbus H145
Airbus H160
Airbus H175
Airbus Helicopters
Airbus Operations
Airbus Protect
Airbus SE
Airbus UpNext
Airbus VSR700
Airbus Zephyr
Aircraft manufacturer
Ariane 5
Ariane 6
ArianeGroup
Boeing
Bombardier
Commercial aircraft
Defense
Embraer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2011
Alternative Investment Fund Managers Directive
Benchmarks Regulation
Committee of European Securities Regulators
Credit Rating Agencies Regulation
ESMA
EU Regulation No 1095/2010
EU budget
EU securities legislation
European Banking Authority
European Central Bank
European Insurance and Occupational Pensions Authority
European System of Financial Supervision
European Union agency
European Union member states
France
International Organization of Securities Commissions
Markets in Financial Instruments Directive
Paris
Prospectus Regulation
Q&As on regulations
Securities Financing Transactions Regulation
Short Selling Regulation
Transparency Directive
Verena Ross
advice to EU institutions
consistent application of laws
consumer protection
credit rating agencies
crisis management
cross-border disputes
emerging risks
enhance investor protection
executive decisions
fees from supervised entities
financial innovation
financial instruments
financial stability
fines
guidelines
harmonized regulation
heads of national authorities
information exchange
market data
market developments
market integrity
national competent authorities
national regulatory practices
new financial products
orderly functioning of markets

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1879
2018
33.3 billion USD (2023)
39.7 billion USD (2023)
6.2 billion USD (2023)
65500 (2023)
8.2 billion USD (2023)
80.8 billion USD (2023)
AGA
APAC
Air Liquide
Air Products
Americas
Atmospheric gases
BOC
Carl von Linde
Chemical companies
EMEA
Electronics manufacturers
Energy companies
Engineering
Equipment for gas application
Equipment for gas processing
Equipment for gas production
Food and beverage companies
Frankfurt Stock Exchange
German multinational chemical company
Guildford, United Kingdom
Healthcare gases
Healthcare providers
Industrial gases
LIN
Linde AG
Linde Australia
Linde Canada
Linde China
Linde Engineering
Linde Gas
Linde Healthcare
Linde India
Linde Japan
Linde Korea
Linde plc
Manufacturing companies
Matheson Tri-Gas
Messer Group
Munich, Germany
NYSE
Praxair
Praxair Distribution

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+49
.de
2,962 meters
357,022 square kilometers
Adidas
Albert Einstein
Albrecht Dürer
Austria
BASF
BMW
Belgium
Berlin
Bosch
Brandenburg Gate
Caspar David Friedrich
Central European Time
Cold War division
Czech Republic
Danube
Das Lied der Deutschen
Denmark
Elbe
Euro
Europe
European Union
Fall of the Berlin Wall
Federal Chancellor
Federal President
France
Friedrich Nietzsche
Friedrich Schiller
G20
G7
Georg Wilhelm Friedrich Hegel
German
German Unity Day
Holy Roman Empire
Immanuel Kant
January 18, 1871
Johann Sebastian Bach
Johann Wolfgang von Goethe
Ludwig van Beethoven
Luxembourg
Max Planck
Mercedes-Benz
NATO
Netherlands
Neuschwanstein Castle
OECD
October 3

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1993
360T
9:00 AM to 5:30 PM CET
Asia
BaFin
CEST
CET
Clearstream
Clearstream Banking
DAX index
DB1
Deutsche Börse AG and Deutsche Terminbörse
Deutsche Terminbörse
ETFs
English
Eurex
Eurex Clearing
Euro
European Securities and Markets Authority
Frankfurt Stock Exchange
Frankfurt am Main
German
Germany
Luxembourg
MDAX index
Martin Jetter
Qontigo
SDAX index
Stoxx
Switzerland
TecDAX index
Theodor Weimer
United Kingdom
United States
Xetra trading platform
auction trading
banks
bonds
capital markets
certificates
clearing services
continuous trading
custody services
derivatives
electronic trading
financial services
market data services
over 3 billion euros annually
over 30 billion euros
over 7000 people

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
15 million euros
1870
1873
1999
2010
2017
2018
2024
7.2 billion dollars
A-
A3
Aktiengesellschaft
Alexander Wynaendts
Asia
Asset Management
BBB+
BaFin
Bankers Trust
Christian Sewing
Corporate Bank
DAX
DBK
DE0005140008
DWS Group
Deutsche Bank Securities Inc.
Euro Stoxx 50
Europe
European Central Bank
Fitch Ratings
Frankfurt
Frankfurt Stock Exchange
German regulators
Germany
Investment Bank
Latin America
Libor scandal
London
Moody's
North America
Postbank
Private Bank
Russian mirror trading scandal
S&P Global
US Department of Justice
asset management
corporate banking
corporations
deposits
derivatives
financial services

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1999
AURIX
Aktiengesellschaft
CoolMOS
Cypress Semiconductor
Dresden
Frankfurt Stock Exchange
Germany
IATF 16949
IFX
ISO 14001
ISO 9001
Infineon Technologies AG
Infineon Technologies Asia Pacific Pte Ltd
Infineon Technologies Austria AG
Infineon Technologies North America Corp
International Rectifier
IoT devices
Jochen Hanebeck
Kulim
Malacca
ModusToolbox
Neubiberg
OptiMOS
PSoC
REAL3
RF components
SECORA
Siemens
TRENCHSTOP
Traveo
Villach
Wolfspeed
XMC
automotive
automotive electronics
collaborates with automotive OEMs
communications
company
computing
consumer
consumer electronics
embedded security
ends in September
focuses on connectivity
focuses on energy efficiency
focuses on security
gallium nitride
industrial
industrial power control

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000 points
30
9:00 AM to 5:30 PM CET
Adidas
Allianz
BASF
BMW
Bayer
Continental
DAX
DE0008469008
Daimler Truck
Deutsche Bank
Deutsche Börse
Deutsche Telekom
E.ON
Euro
Frankfurt Stock Exchange
Fresenius
Fresenius Medical Care
German economy
Germany
Henkel
Infineon
July 1, 1988
Linde
MTU Aero Engines
Mercedes-Benz Group
Munich Re
Porsche
Porsche Automobil Holding
Puma
Qiagen
RWE
SAP
Sartorius
Siemens
Siemens Energy
Symrise
Volkswagen
Vonovia
Zalando
automotive
chemicals
consumer goods
energy
every 15 seconds
financial services
free-float market capitalization
healthcare

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+49 69 2110
1585
1997
60313
9:00 AM to 5:30 PM CET
Adidas
Airbus
Allianz
Alte Oper
BASF
BMW
BaFin
Börse Frankfurt
Börsenplatz 4
Clearstream
DAX
Daimler Truck
Deutsche Bank
Deutsche Börse
ETFs
Euro
European Securities and Markets Authority
Federation of European Securities Exchanges
Frankfurt
Frankfurt Stock Exchange floor
General Standard
German
Germany
Hauptwache
LinkedIn
MDAX
Open Market
Prime Standard
SAP
SDAX
Scale
Siemens
TARGET2
TecDAX
Twitter
Volkswagen
World Federation of Exchanges
Xetra
YouTube
boerse-frankfurt.de
bonds
bull and bear statues
certificates
destroyed in World War II
expanded to securities in 19th century

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1995
Aktiengesellschaft
Bonn
DTE
Deutsche Bundespost TELEKOM
Deutsche Telekom Stiftung
Europe
FC Bayern Munich
Frankfurt Stock Exchange
FreeMove alliance
GSMA
German government
German national football team
Germany
Hrvatski Telekom
IPTV
IT services
KfW Bankengruppe
Life is for sharing
Magenta
Magenta Telekom
Slovak Telekom
T-Mobile
T-Mobile US
T-Mobile USA
T-Systems
Timotheus Höttges
Ulrich Lehner
United States
VoiceStream Wireless
We won't stop
Xetra
active in Germany
cloud computing
committed to climate neutrality
covers most of Germany
data services
education
expanding in Germany
extensive in Europe
fixed-line telephony
focuses on 5G and IoT
internet services
largest telecommunications provider in Europe
magenta
merged with T-Mobile US in 2020
millions of broadband customers
millions of mobile customers
mobile telephony
net zero by 2040

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1912
Bad Homburg, Germany
Eduard Fresenius
FRE
Frankfurt Stock Exchange
Fresenius Biotech
Fresenius Helios
Fresenius Helios Belgium
Fresenius Helios France
Fresenius Helios Italy
Fresenius Helios Kliniken
Fresenius Helios Netherlands
Fresenius Helios Portugal
Fresenius Helios Spain
Fresenius Helios Switzerland
Fresenius Helios UK
Fresenius HemoCare
Fresenius Kabi
Fresenius Kabi Africa
Fresenius Kabi Asia
Fresenius Kabi Australia
Fresenius Kabi Canada
Fresenius Kabi Europe
Fresenius Kabi Latin America
Fresenius Kabi Middle East
Fresenius Kabi New Zealand
Fresenius Kabi USA
Fresenius Medical Care
Fresenius Medical Care Africa
Fresenius Medical Care Asia-Pacific
Fresenius Medical Care Australia
Fresenius Medical Care Canada
Fresenius Medical Care Europe
Fresenius Medical Care Latin America
Fresenius Medical Care Middle East
Fresenius Medical Care New Zealand
Fresenius Medical Care North America
Fresenius Netcare
Fresenius ProServe
Fresenius Vamed
Fresenius Vamed Africa
Fresenius Vamed Americas
Fresenius Vamed Asia
Fresenius Vamed Australia
Fresenius Vamed Engineering
Fresenius Vamed Europe
Fresenius Vamed Japan
Fresenius Vamed Middle East
Fresenius Vamed New Zealand
Fresenius Xenios

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000 points
40
9:00 AM to 5:30 PM CET
Adidas
Airbus
Allianz
BASF
BMW
Bayer
Beiersdorf
Commerzbank
Continental
Covestro
DAX
DAX indices
DE0008469008
Daimler Truck
Delivery Hero
Deutsche Bank
Deutsche Börse
Deutsche Post
Deutsche Telekom
Deutsche Wohnen
Deutscher Aktienindex
E.ON
Euro
Euro Stoxx 50
Evonik
Frankfurt Stock Exchange
Fresenius
Fresenius Medical Care
Germany
HelloFresh
Henkel
Infineon
July 1, 1988
Linde
MDAX
MTU Aero Engines
Mercedes-Benz Group
Puma
Qiagen
RWE
SAP
SDAX
Sartorius
Siemens
Siemens Energy
TecDAX
Volkswagen

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1926
Automotive
Automotive company
Automotive components
Benz & Cie.
BharatBenz
Buses
Commercial vehicles
Daimler AG
Daimler Truck AG
Daimler-Benz
Daimler-Motoren-Gesellschaft
DaimlerChrysler
EQ
Financial services
Frankfurt Stock Exchange
Freightliner
Fuso
Gottlieb Daimler
Karl Benz
Luxury vehicles
MBG
Mercedes-AMG
Mercedes-Benz
Mercedes-Benz AG
Mercedes-Benz Argentina
Mercedes-Benz Australia
Mercedes-Benz Bank
Mercedes-Benz Brazil
Mercedes-Benz Canada
Mercedes-Benz Chile
Mercedes-Benz China
Mercedes-Benz Colombia
Mercedes-Benz Ecuador
Mercedes-Benz Financial Services
Mercedes-Benz France
Mercedes-Benz India
Mercedes-Benz Indonesia
Mercedes-Benz Italy
Mercedes-Benz Japan
Mercedes-Benz Korea
Mercedes-Benz Malaysia
Mercedes-Benz Manufacturing Hungary
Mercedes-Benz Mexico
Mercedes-Benz Middle East
Mercedes-Benz Mobility AG
Mercedes-Benz Peru
Mercedes-Benz Research and Development
Mercedes-Benz Russia
Mercedes-Benz South Africa

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1949
AC Milan
ASICS
Adolf Dassler
All Blacks rugby team
Allison Stokke
Argentina national football team
Arsenal
Bayern Munich
Belgium national football team
British and Irish Lions
CCM Hockey
Chelsea
Converse
Damian Lillard
David Beckham
FIFA World Cup
Fila
Five Ten
Gazelle sneakers
Germany
Germany national football team
Herzogenaurach
James Harden
Japan national football team
Juventus
Kylian Mbappé
Lionel Messi
Lululemon
MLB
Manchester United
Mexico national football team
NBA
NFL
NHL
Neo
New Balance
Nike
Olympic Games
Originals
Paula Radcliffe
Performance
Predator football boots
Puma
Real Madrid
Reebok
Rockport
Skechers
Spain national football team
Stan Smith sneakers

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1863
2002
2006
2016-2024
2018
2022
2023-present
Adempas
Afrin
Aleve
Aliqopa
Alka-Seltzer
Aspirin
Aventis CropScience
BAYN
Bayer Animal Health
Bayer Consumer Health
Bayer CropScience
Bayer Cross
Bayer Pharmaceuticals
Berocca
Bill Anderson
Biotechnology
Cardiology
Chemicals
Claritin
Coppertone
Cross within a circle
Deltapine
Dr. Scholl's
Eylea
FiberMax
Finacea
Flonase
Frankfurt Stock Exchange
Friedrich Bayer
Germany
Gynecology
Hematology
Heroin
Jaydess
Johann Friedrich Weskott
Kerendia
Kogenate
Kyleena
Leverkusen
LibertyLink
Midol
MiraLAX
Mirena

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2000
2045
Allianz
BlackRock
Customer Solutions
Czech Republic
E.ON AG
E.ON Business Services
E.ON Climate & Renewables
E.ON Connecting Energies
E.ON Czech Republic
E.ON Digital Technology
E.ON Drive
E.ON Energie
E.ON Energieeffizienz
E.ON Energy Infrastructure
E.ON Energy Projects
E.ON Energy Research Center
E.ON Energy Solutions
E.ON Global Commodities
E.ON Ruhrgas
E.ON SmartHome
E.ON Solar
E.ON Stiftung
E.ON Sverige
E.ON UK
EOAN
Energy Networks
Essen, Germany
Frankfurt Stock Exchange
Germany
Hungary
Leonhard Birnbaum
Netherlands
Norges Bank
PreussenElektra
Romania
Slovakia
Sweden
United Kingdom
billions of euros
customer centricity
customer solutions
decarbonization
digitalization
electricity generation
energy company
energy industry
energy networks
energy trading

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
323 BC
336 BC
356 BC
Alexander IV
Alexandria
Aristotle
Asia Minor
Babylon
Battle of Gaugamela
Battle of Issus
Battle of the Granicus
Battle of the Hydaspes
Bucephalus
Central Asia
Cleitus the Black
Craterus
Darius III
Egypt
Greece
Hellenistic culture
Hellenistic period
Hephaestion
India
Indian campaign
King
King Porus
Macedon
Mesopotamia
Military Commander
Olympias
Oracle of Siwa
Parmenion
Parysatis
Pella
Persian Empire
Persian campaign
Persian customs
Philip II of Macedon
Philip III Arrhidaeus
Philotas
Ptolemy
Roman leaders
Roxana
Seleucus
Siege of Tyre
Stateira
ancient art
at the Hyphasis River
by Aristotle
disease

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1865
BAS
Badische Anilin- und Soda-Fabrik
DAX stock index
Frankfurt Stock Exchange
Germany
Kurt Bock
Ludwigshafen
Ludwigshafen site
Martin Brudermüller
adhesives
agricultural solutions
agrochemicals
ammonia
animal nutrition products
automotive coatings
biocides
catalysts
chemical company
chemicals
coatings
construction chemicals
construction polymers
corrosion inhibitors
cosmetic ingredients
crop protection products
detergent ingredients
dispersions
engineering plastics
flavors
food ingredients
fragrances
fuel additives
leather chemicals
lubricant additives
methanol
mining chemicals
more than 80 countries
nitrogen fertilizers
oil and gas
oilfield chemicals
over 111000 worldwide
over 200 worldwide
over 78 billion euros in 2022
paints
paper chemicals
performance products
personal care ingredients
pharmaceutical excipients
pharmaceutical ingredients

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1916
1928
24 Hours of Le Mans
Adrian van Hooydonk
Andy Warhol
BMW
BMW 3 Series
BMW 5 Series
BMW 7 Series
BMW Art Cars
BMW Group Research and Innovation Center
BMW K series
BMW M
BMW Motorsport
BMW R 1200 GS
BMW R series
BMW S 1000 RR
BMW S series
BMW X5
BMW Z4
BMW i
BMW i3
BMW i4
BMW i8
BMW iX
Bavarian flag colors
Bayerische Flugzeugwerke
Bayerische Motoren Werke AG
China
DTM
Dixi
Double-VANOS
EfficientDynamics
Formula One
Frankfurt Stock Exchange
Freude am Fahren
Germany
Gustav Otto
Hofmeister kink
Intel
Jeff Koons
Karl Rapp
Mexico
Mini
Mobileye
Munich
Rapp Motorenwerke
Rolls-Royce Motor Cars
Roy Lichtenstein
South Africa

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000 points
1996
50
Aurelius Group
Bechtle
Carl Zeiss Meditec
DAX
DAX indices
DE0008467416
December 30, 1987
Deutsche Börse
Deutsche Börse website
Deutsche Wohnen
Euro
Evonik Industries
Fielmann
Frankfurt Stock Exchange
Fraport
Fuchs Petrolub
GEA Group
German financial authorities
Germany
Gerresheimer
Hannover Rück
HeidelbergCement
Hugo Boss
K+S
LEG Immobilien
Lanxess
MDAXI
Metro
MorphoSys
Nemetschek
Prime Standard
SDAX
TecDAX
against DAX
available
available from launch
based on rankings
benchmarking
diverse
every second
financial news
free-float market capitalization
high
high trading volume
institutional and retail
investment products
low free float

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19th century
1st century CE
24th century BCE
Afroasiatic
Akkadian Empire
Amarna letters
Aramaic
Assur
Assyrian
Assyriology
Babylon
Babylonian
Behistun Inscription
Chicago Assyrian Dictionary
Code of Hammurabi
East Semitic
Edward Hincks
Enuma Elish
Epic of Gilgamesh
George Smith
Henry Rawlinson
Julius Oppert
Late Babylonian
Mesopotamia
Nineveh
Nippur
Old Akkadian
Semitic
Semitic language
Standard Babylonian
Sumerian
Sumerian loanwords
Uruk
administration
ancient Near East
ancient language
ancient libraries
archaeological excavations
astronomical tablets
circa 2500 BCE to 100 CE
city of Akkad
clay tablets
cuneiform
cuneiform script
diplomacy
dual number
economic records
electronic corpora
emphatic consonants
extinct language

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Akkadian as a written language
Akkadian deities
Akkadian society
Amurru in Akkadian texts
Cyprus
Dagan
First Dynasty of Babylon
Hammurabi
Isin-Larsa period kingdoms
Kingdom of Upper Mesopotamia
Martu in Sumerian texts
Mesopotamia
Mesopotamian history
Old Babylonian Empire
Shamshi-Adad I
Sumerian culture
Sumerian religious practices
agriculture
ancient Egyptian texts
ancient Semitic-speaking people
and nomads
animal husbandry
archaeologists and historians
barley and dates
bronze tools
chariots in warfare
cuneiform script
fortified cities
invasions by the Hittites
lapis lazuli
later Semitic cultures
legal codes
local populations
pottery and jewelry
sheep and goats
southern Mesopotamia
tents and mud-brick houses
the Amarna letters
the Amorite language
the Assyrians
the Bible
the Bronze Age
the Code of Hammurabi
the Egyptians
the Indus Valley
the Kassites
the Levant region
the Mediterranean Sea
the Sumerians
the city of Babylon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1916
1923
1928
Alpina
Araquari
BMW
BMW 3/15
BMW Financial Services
BMW M
BMW Motorrad
BMW R32
BMW i
Bangkok
Bavarian flag
Bayerische Flugzeugwerke AG
Bayerische Motoren Werke AG
CEO
Cairo
Chairman of the Supervisory Board
Chennai
Colombo
Designworks
Dhaka
Dingolfing
Faisalabad
Frankfurt Stock Exchange
Freude am Fahren
Germany
Goodwood
Gustav Otto
Hanoi
Ho Chi Minh City
Islamabad
Jakarta
Kaliningrad
Karachi
Karl Rapp
Kathmandu
Kulim
Lahore
Leipzig
Male
Manila
Mini
Munich
Norbert Reithofer
Oliver Zipse
Oxford
Rawalpindi
Rayong

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19.699 billion euros
1924
1949
21.915 billion euros
254 million euros
268 million euros
5.744 billion euros
59,533
AC Milan
ADS
ASICS
Adi Dassler
Adidas
Adidas is all in
Adolf Dassler
Amanda Rajkumar
Arsenal
Arthur Hoeld
Bayern Munich
Bjørn Gulden
Brian Grevy
CCM Hockey
Chelsea
DE000A1EWWW0
FIFA World Cup
Frankfurt Stock Exchange
Gebrüder Dassler Schuhfabrik
Gil Steyaert
Harm Ohlmeyer
Herzogenaurach, Germany
Impossible is Nothing
Juventus
Major League Soccer
Manchester United
Martin Shankland
NBA
NFL
New Balance
Nike, Inc.
OTC Markets Group
Olympic Games
Puma SE
Real Madrid
Reebok
Rockport
Roland Auschel
TaylorMade
Thomas Rabe
UEFA Champions League
UFC

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1890
AGF in 1998
ALV
Allianz Arena in Munich
Allianz Climate Solutions
Allianz Foundation
Allianz Global Investors
Allianz Life
Allianz Parque in São Paulo
Allianz Partners
Allianz Trade
Allianz Worldwide Care
BlackRock
Carl Thieme
DE0008404005
Dresdner Bank in 2001
English
Euler Hermes
Facebook
Fireman's Fund in 1991
Frankfurt Stock Exchange
German
Germany
LinkedIn
Munich
Oliver Bäte
PIMCO
PIMCO in 2000
RAS in 2005
Societas Europaea
The Power On Your Side
Twitter
Wilhelm Finck
YouTube
annuities
asset management
business insurance
car insurance
engages in community development
exchange-traded funds
health insurance
home insurance
insurance
liability insurance
life and health insurance
life insurance
more than 70 countries
multinational financial services company
mutual funds
over 1 trillion euros

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Television Critics Association Awards
Television production
Television production company
The Big Bang Theory
The Kominsky Method
Two and a Half Men
United States of Al
Vanity cards archive
Warner Bros. Television
Witty dialogue
Workplace humor
Yes
Young Sheldon
chucklorre.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
homeschool teacher
in 2020
in Batman: The Dark Knight Returns
in National Lampoon's Christmas Vacation
in The Little Engine That Could
in a local theater production
military police officer
of Polish and Irish descent
one sister named Allison
over $1 million per episode
playing guitar

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
worked with many famous actors

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
raised Catholic
waiter

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
religious ceremonies
ruins
seven
shrine
slaves
spiral
symbol of Babylonian power
taller than Great Pyramid
tallest structure in Babylon
visible today
ziggurat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Two and a Half Men
Writer on Roseanne
Writers Guild of America Awards
Young Sheldon
www.chucklorre.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
the worship of Marduk
to establish facts
to expand his territory
trade and agriculture
trade and commerce
widows and orphans

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Ruddock House
San Pasqual Apartments
Sherman Fairchild Library
Southern California Intercollegiate Athletic Conference
The truth shall make you free
Theodore von Kármán
Thomas F. Rosenbaum
Throop University
WASC Senior College and University Commission
William Shockley
approximately 2200
approximately 900
eight houses
orange and white
private research university
science and engineering

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Spending time with friends
Spiders
Supportive
Sweet-natured
The Big Bang Theory
The Cheesecake Factory
The Creepy Candy Coating Corollary
University of California
Unnamed brother
Waitress
Watching movies
Wavy
Wine
Zangen Pharmaceuticals

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Sweet
Temporary
The Big Bang Theory
The Countdown Reflection
The Creepy Candy Coating Corollary
University of California
Viruses
Volkswagen Beetle
Wealthy
Wine
With Howard
With Howard Wolowitz
Yellow
Younger Brother
Zangen

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
science fiction
socially awkward
speed of light
video games

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
keyboard
magic
master's degree
mullet
mustache
peanuts
playing keyboard
ponytail
scooter
singing
space travel
theremin
tight pants
turtleneck sweaters

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
glazing
historical texts
honor gods
impress visitors
lapis lazuli blue
lions
monument
mythical dragons
northern Babylon
over 100
relief
religious processions
royal authority
towers
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
internal conflicts
metals
nomadic pastoralists
palaces
polytheism
pottery
sheep
temples
textiles
timber
tribal chiefs
with Mesopotamian city-states

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
electricity generation
highest in spring
lowest in late summer
marshlands
over-extraction
pollution
rainfall
river
snowmelt

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Young Sheldon
Ziggy Chapman in Big Little Lies
actor
child actor
playing Sheldon Cooper in Young Sheldon
theater critic

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
rhotacism
sarcastic
sarcastic humor
secured research funding
socializes at work
string theory
tall
theoretical physics
uses childish insults
using nicknames for colleagues
wears glasses
worked at prestigious institution

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
lifetime achievements in television
usually in January

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The Tender Bar
The Unicorn
University of Virginia
Walk Hard: The Dewey Cox Story
actor
comedian
daughter
human
musician
one child
writer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Eurofighter Typhoon
Eurostar satellites
France
Galileo satellites
Helicopters
MetOp satellites
Military aircraft
NHIndustries NH90
Navblue
OneWeb satellites
Pleiades satellites
Premium Aerotec
Satellites
Sentinel satellites
Skynet satellites
Skywise
Space systems
Spot satellites
Stelia Aerospace
TanDEM-X
TerraSAR-X
Testia
Toulouse

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Zoroastrianism
astronomy
chador
chelou kebab
cuneiform
ethnic group
football
ghormeh sabzi
kebab
mathematics
medicine
miniature painting
over 50 million
place of worship
rice dishes
setar
spices
tar
tea
textiles
wrestling

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The TV Set
Tommy
Vanilla Sky
himself

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The CW
The Dukes of Hazzard
The Ed Sullivan Show
The Good Wife
The Honeymooners
The Jack Benny Program
The Late Show with Stephen Colbert
The Mary Tyler Moore Show
The Price Is Right
The Twilight Zone
The Young and the Restless
Tiffany Network
Two and a Half Men
United Independent Broadcasters
William S. Paley
blue
broadcasting
broadcasting company
eye
field-sequential system
radio
television

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
with Todd Spiewak

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Two and a Half Men
Vanity cards
Various bands
Writer
Writing for animated series
Young Sheldon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
laser cooling
particle physics
quantum mechanics
science fiction
semiconductor interface
video games

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
of all time
over 40
over 5 billion
over 700 languages
philosophy
poetry
prophecy
redemption
religious text
resurrection
resurrection of Jesus
sacred scripture
salvation
wisdom literature

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Social Behavior
Socially Awkward
Supportive
The Big Bang Theory
The Lunar Excitation
The Stockholm Syndrome
Trustworthy
Witty

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Staircases
Stone
Stone Walkways
Sunken Gardens
Terraced Gardens
Terraced Platforms
Underground Reservoirs
Variety of Plants
Vegetable Plots
Viewing Balconies
Vines
Vineyards
Water Channels
Wildflower Meadows

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
in 1992
multiple
on Quicksand: No Escape
producer
tennis

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
after recovery
city of Babylon
for seven years
god Marduk
his wife Amytis
lycanthropy
massive ziggurat
of a great statue

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
provincial system
relief sculptures
royal libraries
sheep
siege engines
siege warfare
social hierarchy
textiles
trade networks
tribute from conquered lands
wheat
with Anatolia
with Egypt
with Levant

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Saladin
Shaare Zedek Medical Center
Siege of Jerusalem in 70 CE
Six-Day War in 1967
Supreme Court of Israel
Temple Mount
Tower of David
UN Resolution 181
UN Resolution 478
West Jerusalem
Western Wall
Yad Vashem
city
disputed territory
education
government
high-tech
over 900000
tourism

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
advances in molecular biology
approximately 300 professorial faculty
around 1,200 graduate students
around 900 undergraduate students
consistently ranked among top universities worldwide
development of quantum mechanics
discovery of gravitational waves
eight undergraduate houses
graduate student apartments
less than 5%
orange and white
over $3 billion
over $300 million annually
pranks on rival MIT
private research university
space exploration missions
university
urban

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
principle of retribution
prologue, laws, epilogue
property rights
protect the weak
river ordeal
slavery
social classes
standardize laws
theft
trade
trial by ordeal
wages
wardum

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
October 3, 1990
Poland
Protestant Reformation
Rhine
SAP
Siemens
Switzerland
Thomas Mann
United Nations
Volkswagen
Werner Heisenberg
Wolfgang Amadeus Mozart
World War I
World War II
Zugspitze
automotive
black eagle
chemicals
country
electronics
federal parliamentary republic
machinery
over 4 trillion USD
over 48,000 USD
over 83 million
right
social market economy

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
star
stars
storm
storm god
sun
temples
thunder
triangle
underworld
universe
victory
war
water
weapon
wind
wisdom
writing
ziggurats

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
pilgrims
political center
processions
religious center
royal donations
temple
temple estates
temple officials
temple whose top is lofty
treasury

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
later Greek historians
mixture of fact and legend
myths and legends
named after the Muses
nine books
oral traditions
preserve memory of past events
prose work
record great deeds
travel
vivid storytelling
Ἱστορίαι

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
diplomacy
extensive legal terminology
extinct language
gendered nouns
historical linguistics
language
law
literature
loanwords from Sumerian
loanwords to other languages
noun cases
prefix conjugation
religion
root-based morphology
science
suffix conjugation
use of determinatives
use of logograms
verb-subject-object word order
verbal aspects

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
lunar calendar
many gods
mathematics
mud bricks
nobles
palaces
plow
polytheism
pottery
priestly class
sailboat
sculptures
seals
sheep
silver as currency
slaves
social hierarchies
stars and planets
temples
wheat
wheel
with Egypt
with Indus Valley
ziggurats

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The Kominsky Method
The Muppets
The Nanny
The New Adventures of Old Christine
Two of a Kind
United States of Al
Veronica's Closet
Visual Effects Society Award
Wings
Writers Guild of America Award
television producer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Syria
Wars of the Diadochi
Zeus-Ammon
art
creating a vast empire
cultural fusion
films
historical texts
human
king
later conquerors
military leader
military tactics
parts of India
spreading Greek culture
strategic genius
undefeated in battle

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
modern-day Turkey
monarchy
nobles
palaces
polytheistic
relief carvings
sculpture
silver
slaves
southern Anatolia
spears
stalemate
storm god
sun goddess
swords
temples
timber
trade
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The Last Ride
The Man from Toronto
The Penthouse
The Single Moms Club
The Story of Us
The Wedding Ringer
To Be Fat like Me
Vanessa
Vicky
Virtuosity
Wanda
Wasted
Why Him?
Young Angela
Young Meg
actress
person
producer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
teasing
university
university cafeteria
university email
university events
with colleagues

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Single of the Year
Steven Page
Stunt
Testing 1,2,3
The Big Bang Theory
The Old Apartment
Too Little Too Late
Tyler Stewart
alternative rock
comedy rock
multiple
participated in charity events
pop rock
supported children's charities
supported environmental causes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Superstar sneakers
TaylorMade
UEFA Champions League
Ultraboost running shoes
Under Armour
Vans
Y-3
Yeezy collaboration
accessories
adidas Consortium
adidas EQT
adidas NMD
adidas Parley
adidas ZX
adidas by Stella McCartney
apparel
company
footwear
many athletes
many football clubs
sportswear
three stripes logo
trefoil logo

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
foreign exchange
governments
institutional investors
investment banking
loans
mis-selling mortgage-backed securities
money laundering controls failure
multinational investment bank
net-zero emissions target
over 1.3 trillion euros
over 25 billion euros
over 4 billion euros
over 84000
private banking
private individuals
retail banking
securities trading
to facilitate German foreign trade
wealth management

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
television industry
television pilots
television producer
to pursue writing
two
writers' panels
young writers

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Season 3 Episode 23
Sheldon Cooper
Socially Awkward
Star Wars
Sweaters
Thai Food
The Big Bang Theory
The Doctor
Watching Sci-Fi
Wine

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
industrial
largest and most liquid German companies
over 1 trillion euros
price index
quarterly
stock market index
technology
total return index

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
leader in automotive semiconductors
microcontrollers
operations in Americas
operations in Asia
operations in Europe
over 14 billion euros
over 50000
power semiconductors
promotes energy efficiency
radar sensors
reduces carbon emissions
renewable energy systems
security chips
semiconductors
sensors
silicon carbide
spin-off
supports green technologies
top power semiconductor supplier
works with research institutions

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
the city of Mari
the god Amurru
their military prowess
their seafaring skills
timber and metals
trade with neighboring regions
tribal chieftains
tribal clans
woolen garments
ziggurats

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Process gases
Refining companies
Sanjiv Lamba (CEO)
Specialty gases
Spectra Gases
Taiyo Nippon Sanso
Wolfgang Reitzle (Chairman)
www.linde.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Mercedes-Benz Spain
Mercedes-Benz Thailand
Mercedes-Benz UK
Mercedes-Benz USA
Mercedes-Benz Uruguay
Mercedes-Benz Vietnam
Mercedes-Maybach
Mobility services
Multinational corporation
Public company
Setra
Smart
Stuttgart, Germany
Thomas Built Buses
Vans
Western Star
Wilhelm Maybach

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
peer reviews
potential breaches
promote stable financial markets
recommendations
risk indicators
risk reports
securities markets
stress tests
supervisory activities
supervisory convergence
systemic risks
technical standards
temporary bans
trade repositories
transparency
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Simon & Schuster
Star Trek: The Original Series
Survivor
The Amazing Race
The Beverly Hillbillies
The Big Bang Theory
The CW
The Early Show
The Ed Sullivan Show
The Good Wife
The Late Show with Stephen Colbert
The Mentalist
The Talk
The Twilight Zone
The Young and the Restless
Two and a Half Men
United Independent Broadcasters
Viacom
Walter Cronkite
William S. Paley
broadcasting
broadcasting company

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Allianz Travel
Allianz Turkey
Allianz UK
Allianz UK Life
Allianz USA
Allianz Worldwide Care
Allianz Worldwide Partners
Euler Hermes
Germany
Munich
PIMCO
asset management sector
insurance sector
multinational financial services company

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
mullet
nerdy
peanuts
playing keyboard
resourceful
robotics
science fiction
scooter
singing
some Mandarin
tight pants
turtlenecks
video games

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
fever
films
intermarriage with Persians
later conquerors
literature
loyalty in troops
medicine
military tactics
multiple cities named Alexandria
multiple times
philosophy
poisoning
rivals
science
son of Zeus
spread of Greek culture
strategic genius
to Babylon
uncertain
undefeated in battle
unknown

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The Smurfs 2
The Starling
The Stepford Wives
The TV Set
The To Do List
The Women
Two and a Half Men
Ugly Betty
Weeds
Yes, Dear
comic book store owner
friend of the main characters
kind-hearted
lonely
socially awkward

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
market capitalization
mid-cap index
mid-sized German firms
moderate
none
performance index
publicly accessible
published by Deutsche Börse
quarterly
real-time
regular
same as Xetra
stock market index
subject of research
track mid-cap stock performance
varied
volatile
well-known in Europe
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
founded as a currency exchange
high daily turnover
info@deutsche-boerse.com
introduced electronic trading in 1997
largest in Germany
merged into Deutsche Börse in 1993
over 2 trillion euros
over 300
public gallery available
rebuilt after World War II
still available
stock exchange
stocks
transparency standards
warrants

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
settlement services
stock exchange
stocks
trading services
warrants
www.deutsche-boerse.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
pharmaceutical intermediates
plastic additives
plastics
polyethylene
polypropylene
polyurethanes
printing inks
refinery catalysts
rubber chemicals
seed treatments
textile chemicals
vitamins
water treatment chemicals

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
energy transition
merger of VEBA and VIAG
natural gas distribution
over 1 million kilometers
over 10 gigawatts
over 100 billion euros
over 20 billion euros
over 50 million
over 70000
regular dividend payments
renewable energy

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The Ultimate Driving Machine
Toyota
TwinPower Turbo
United States
Valvetronic
aircraft engines
automobile manufacturer
automotive
blue and white roundel
carbon neutrality by 2050
developing self-driving technology
engines
focus on driver-oriented interiors
iDrive infotainment system
kidney grille
luxury vehicles
motorcycles
over 100 billion euros
over 100000
use of recycled materials
xDrive all-wheel drive

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
over 100 billion euros
over 200000
pays regular dividends
promotes STEM education
received German Sustainability Award
recognized for digital innovation
reduces carbon emissions
science
supports digital inclusion
telecommunications
telecommunications company
with Google Cloud
with Microsoft
with Siemens

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
guttural sounds
historical linguistics
language
language of empires
legal documents
lingua franca
literature
medical texts
multilingual texts
mythological texts
native Semitic roots
noun cases
other Semitic languages
prefix and suffix conjugations
religion
science
three grammatical genders
verb-subject-object word order
vowel length distinction

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Vonovia
Zalando
automotive
chemicals
consumer goods
financial services
free-float market capitalization
healthcare
industrial goods
over 1 trillion euros
performance index
quarterly
stock market index
technology
utilities

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Monsanto
Neo-Synephrine
Nexavar
Nubeqa
Oncology
One A Day
Over 100,000
Over 40 billion euros
Pharmaceutical company
Pharmaceuticals
Phillips' Colon Health
Polycarbonate
Polyurethane
Polyurethanes
Schering
Skyla
Stivarga
Synthetic dyes
Synthetic rubber
Verquvo
Vitrakvi
Werner Baumann
Xarelto

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Regensburg
Rolls-Royce Motor Cars
Rosslyn
San Luis Potosí
Shenyang
Spartanburg
The Ultimate Driving Machine
Thimphu
aircraft engines
automotive
automotive manufacturer
blue and white
engines
financial services
luxury vehicles
motorcycle manufacturing
motorcycles
over 100 billion euros
over 100000

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
German multinational company
dialysis products and services
healthcare
more than 100 countries
over 300,000 people worldwide
over 40 billion euros annually

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Under Armour
Xetra
accessories
adidas-group.com
adidas.com
apparel
athletic shoes
body care products
casual wear
footwear
mountain logo
perfumes
public company
sports apparel
sports equipment
sportswear
sportswear manufacturer
three bars logo
three stripes
trefoil logo

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
over 100 billion euros
over 100 million
over 150 billion euros
over 150000
pension funds
promotes diversity and inclusion
property and casualty insurance
regular dividend payments
sponsor of Allianz Arena
sponsor of Allianz Park
sponsor of Allianz Stadium
sponsor of FC Bayern Munich
sponsor of Formula E
sponsor of Olympic Games
supports environmental sustainability
travel insurance
www.allianz.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[simple] max-subjects reached (21); stopping.
[simple] finished in 213.2s → outputs in runs/AllParallel/topic/deepseek/baseline/det/The_Big_Bang_Theory/20251029_221654
[simple] queue.json        : runs/AllParallel/topic/deepseek/baseline/det/The_Big_Bang_Theory/20251029_221654/queue.json
[simple] facts.json        : runs/AllParallel/topic/deepseek/baseline/det/The_Big_Bang_Theory/20251029_221654/facts.json
[simple] facts.jsonl       : runs/AllParallel/topic/deepseek/baseline/det/The_Big_Bang_Theory/20251029_221654/facts.jsonl
[simple] lowconf.json      : runs/AllParallel/topic/deepseek/baseline/det/The_Big_Bang_Theory/20251029_221654/facts_lowconf.json
[simple] lowconf.jsonl     : runs/AllParallel/topic/deepseek/baseline/det/The_Big_Bang_Theory/20251029_221654/facts_lowconf.jsonl
[simple] ner log           : runs/AllParallel/topic/deepseek/baseline/det/The_Big_Bang_Theory/20251029_221654/ner_decisions.jsonl
[simple] errors.log        : runs/AllParallel/topic/deepseek/baseline/det/The_Big_Bang_Theory/20251029_221654/errors.log
[simple] batch_state       : runs/AllParallel/topic/deepseek/baseline/det/The_Big_Bang_Theory/20251029_221654/batch_state.json
[simple] batches dir       : runs/AllParallel/topic/deepseek/baseline/det/The_Big_Bang_Theory/20251029_221654/batches
[bench] OK: runs/AllParallel/topic/deepseek/baseline/det/The_Big_Bang_Theory/20251029_221654
[simple] output_dir: runs/AllParallel/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_221654
[simple] seeded: ancient city of Babylon
[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: ancient city of Babylon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[simple] max-subjects reached (21); stopping.
[simple] finished in 215.2s → outputs in runs/AllParallel/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_221654
[simple] queue.json        : runs/AllParallel/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_221654/queue.json
[simple] facts.json        : runs/AllParallel/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_221654/facts.json
[simple] facts.jsonl       : runs/AllParallel/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_221654/facts.jsonl
[simple] lowconf.json      : runs/AllParallel/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_221654/facts_lowconf.json
[simple] lowconf.jsonl     : runs/AllParallel/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_221654/facts_lowconf.jsonl
[simple] ner log           : runs/AllParallel/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_221654/ner_decisions.jsonl
[simple] errors.log        : runs/AllParallel/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_221654/errors.log
[simple] batch_state       : runs/AllParallel/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_221654/batch_state.json
[simple] batches dir       : runs/AllParallel/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_221654/batches
[bench] OK: runs/AllParallel/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_221654
[simple] output_dir: runs/AllParallel/topic/deepseek/baseline/wild/The_Big_Bang_Theory/20251029_221654
[simple] seeded: The Big Bang Theory
[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: The Big Bang Theory

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

