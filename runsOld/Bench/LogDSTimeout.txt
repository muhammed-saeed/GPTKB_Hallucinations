[bench] START
[bench] root_out=runs/AllParallelTest
[bench] crawler=crawler_batch_concurrency_topic.py
[bench] total_planned=12
  plan[0] domain=topic model=deepseek seed=ancient city of Babylon strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231007
  plan[1] domain=topic model=deepseek seed=The Big Bang Theory strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/The_Big_Bang_Theory/20251029_231007
  plan[2] domain=topic model=deepseek seed=DAX 40 Index strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231007
  plan[3] domain=topic model=deepseek seed=ancient city of Babylon strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231007
  plan[4] domain=topic model=deepseek seed=The Big Bang Theory strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/The_Big_Bang_Theory/20251029_231007
  plan[5] domain=topic model=deepseek seed=DAX 40 Index strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231007
  plan[6] domain=topic model=deepseek seed=ancient city of Babylon strategy=icl profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231007
  plan[7] domain=topic model=deepseek seed=The Big Bang Theory strategy=icl profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/icl/wild/The_Big_Bang_Theory/20251029_231007
  plan[8] domain=topic model=deepseek seed=DAX 40 Index strategy=icl profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231007
  plan[9] domain=topic model=deepseek seed=ancient city of Babylon strategy=dont_know profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231007
  plan[10] domain=topic model=deepseek seed=The Big Bang Theory strategy=dont_know profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/dont_know/wild/The_Big_Bang_Theory/20251029_231007
  plan[11] domain=topic model=deepseek seed=DAX 40 Index strategy=dont_know profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231007
[bench] executing with max_procs=6

[RUN 1/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231007 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 2/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/The_Big_Bang_Theory/20251029_231007 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 3/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231007 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 4/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231007 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 5/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/The_Big_Bang_Theory/20251029_231007 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 6/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231007 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 7/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231007 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 8/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/The_Big_Bang_Theory/20251029_231007 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 9/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231007 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 10/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231007 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 11/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/The_Big_Bang_Theory/20251029_231007 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 12/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231007 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231007
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231007
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231007
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/wild/The_Big_Bang_Theory/20251029_231007
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/calibrate/wild/The_Big_Bang_Theory/20251029_231007
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231007
[crawler] seeded: ancient city of Babylon
[crawler] seeded: DAX 40 Index
[crawler] seeded: The Big Bang Theory
[crawler] seeded: The Big Bang Theory
[crawler] seeded: DAX 40 Index
[crawler] seeded: ancient city of Babylon
[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: The Big Bang Theory

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: DAX 40 Index

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: ancient city of Babylon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 40 Index

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: ancient city of Babylon

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: The Big Bang Theory

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2021
40 major German companies
40 since September 2021
Allianz
Composite DAX
DAX 30 Index
Deutsche Börse
Deutscher Aktienindex
German Stock Index
Germany
July 1 1988
June 30 1988
SAP
Siemens
Volkswagen
free float market capitalization
futures, options, exchange-traded funds
performance of largest German listed companies
performance total return index
stock market index
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Composite DAX

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Allianz

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Börse

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutscher Aktienindex

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Germany

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 30 Index

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Siemens

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Volkswagen

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: SAP

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
18-22
279
Amy Farrah Fowler
Apartment 4B
Bernadette Rostenkowski
Bill Prady
CBS
California Institute of Technology
Chuck Lorre
Chuck Lorre Productions
Critics' Choice Television Award
Debbie Wolowitz
English
Golden Globe Award
Howard Wolowitz
Jet Propulsion Laboratory
Jim Parsons
Kevin Sussman
Leonard Hofstadter
Los Angeles, California
May 16, 2019
Pasadena, California
Penny
Praised for pop culture references
Primetime Emmy Award
Raj Koothrappali
September 24, 2007
Sheldon Cooper
SheldonCooper
Stuart Bloom
Thursdays
United States
Warner Bros. Television
Warner Bros. Television Distribution
Young Sheldon
aerospace engineer
aspiring actress
astrophysicist
cannot talk to women
comic book store owner
comic books
experimental physicist
fictional character
friends and scientist roommates
geek culture
high
highly intelligent
magic tricks
microbiologist

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
09:00 to 17:30 CET
10%
1000
15 seconds
1987-12-30
1988-07-01
2021-09-20
40
Adidas AG
Airbus SE
Allianz SE
Approximately €1.2 trillion
Automatic
BASF SE
BMW AG
BaFin
Bayer AG
Blue-chip Index
DAX
DAX 30
DAX Futures
DAX Indices
DAX Options
DE0008469008
Deutsche Bank AG
Deutsche Börse
Deutsche Börse Market Data
Deutsche Lufthansa AG
Deutsche Post AG
Deutsche Telekom AG
Euro
Euro Stoxx 50
Financial Services
Frankfurt Stock Exchange
Free-float Market Capitalization Weighted
Fresenius SE & Co. KGaA
German
Germany
High
ISO 1073
MDAX
March, June, September, December
Mercedes-Benz Group AG
Multiple
Performance Index
Quarterly
S&P 500
SAP SE
SDAX
Siemens AG

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Achaemenid Empire
Akkadian
Akkadian Empire
Alexander the Great
Assyrian Empire
Babili
Babylonian religion
Babylonians
Bronze Age
Code of Hammurabi
Cuneiform
Cyrus the Great
Early Dynastic period
Egyptians
Enuma Anu Enlil series
Euphrates
First Dynasty of Babylon
Hammurabi
Hanging Gardens of Babylon
Hittites
Iraq
Iron Age
Ishtar Gate
Ishtar Gate remains displayed in Berlin
Kassite dynasty
Kassites
Marduk
Merchant
Mesopotamia
Nebuchadnezzar II
Neo-Babylonian Empire
Old Babylonian Empire
Old Testament
Persia
Robert Koldewey
Sassanian conquest
Seleucid Empire
True
Utu-hengal
agriculture
ancient city
arid
c. 331–323 BCE
capital city
capture of Jerusalem
city walls
mudbrick
not just Sumerian Akkadian also EuropeanRevived
positional number system base 60
remained inhabited into Islamic era

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
10 square kilometers
1st millennium CE
200000 people
2019
539 BCE
689 BCE
Akitu
Akkadian
Akkadian phrase Bab-ilim
Akkadians
Alexander the Great
Amorite dynasty
Aramaic
Arameans
Assyrian Empire
Assyrians
Babylonian Captivity of Jews
Babylonian calendar
Babylonian mathematics
Battle of Opis
Bible
Borsippa
British Museum
Bronze Age
Code of Hammurabi
Egypt
Egyptian pharaohs
Elam
Enuma Elish
Epic of Gilgamesh
Esagila
Esarhaddon
Etemenanki
Euphrates
Gate of the Gods
Hammurabi
Hanging Gardens
Hittites
Iraq
Ishtar
Ishtar Gate
Levant
Marduk
Mesopotamia
Mitanni
Nabonidus
Nebuchadnezzar II
Neo-Babylonian Empire
Pergamon Museum
Persian period

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000 points
2008 financial crisis
9:00 AM to 5:30 PM CEST
Allianz
DAX
DAX 100 before DAX's inception
December 31, 1987
Deutsche Bank
Deutsche Börse AG
ETFs and index funds
European benchmark indices
Euros
Frankfurt Stock Exchange
German Stock Index
German and European equity investments
German retail investors
SAP
Siemens
Volkswagen
Xetra
automotive, financial, technology, healthcare, etc.
every 15 seconds
excluding strategic shareholdings in market cap
market capitalization
performance index (free float market capitalization-weighted)
quarterly by Deutsche Börse
reinvests dividends automatically
see Deutsche Börse official communication
stock index
to 1988
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1992
Auction
Clearstream
CoupaTechnicities for IDeaxce
DAX index
DB1
Deutsche Börse AG
ETF Commod Based Dutch Book
Eurex derivatives exchange
European SSE
FWB Frankfurt
Financial Q Data Dwh servTARBU
Frankfurt Stock Exchange
Frankfurt, Germany
Historical Market Indicators
MDAX index
MonitorFlow Media Relations US
Parkett at Eschersheimer Landstr.
QBED
SDAX index
Spot Market Volume Broker
Structured and Hybridsecloser
TecDAX index
TradeGate Exchange
Twister Terminal Inform Exe
XactTradeTrader Station PDQ
Xetra electronic trading platform
bonds
commissionOnBoughtGood
continuous trading
derivatives
equities
exchange operating company
financial services
futures
merger attempt from LSEG
options
stocks

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
neurobiologist
pharmaceutical sales representative
physics
sitcom
socially awkward
theoretical physicist
videogames

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
3-second intervals updates
30 December 2020
40 firms
846967
Advanced Segments and General Standard companies
CDAX
December 2020
Deutsche Börse AG
Deutsche Börse Group indices family
ESMA endorsed data reports
EU Benchmarks Regulation
Frankfurt venue trading hours
HDAX
LHA free float shares assumption
annual primary and quarterly secondary reviews
automotive
billions of Euros annually
consumer goods
corporate action events like capital increases
diversification across major segments
equity market index
exchange traded funds
exchange trading of underlying shares
fast entry and fast exit framework
financial services
free download of constituent lists
free float market capitalization
futures contracts
global institutional investors
healthcare
large and medium market capitalization firms
market capitalization weighted
minimum 15% for certain index segments
mutual fund and pension fund benchmarking
neutralized index performance
normalized index points
options contracts
quarterly fact sheets
real time calculation
scheduled trading meetings documentation
technology

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Stock Market Index
TecDAX
Volkswagen AG
https://www.dax-indices.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1,000
15,236 points
1988
2021
30
40
5:30 PM CET
970 points
9:00 AM CET
Adidas AG
Allianz SE
BASF SE
BMW AG
BaFin
DAX
DAXtotal
Daimler Truck Holding AG
December 31, 1987
Deutsche Aktienindex
Deutsche Bank AG
Deutsche Börse
Deutsche Börse AG
Deutsche Post AG
E.ON SE
ETF
EURO STOXX
Euro
Frank Mella
Frankfurt Stock Exchange
German economy
Germany
MDAX
March 8, 2021
Mercedes-Benz Group AG
SAP SE
SDAX
Siemens AG
Volkswagen AG
Xetra
^GDAXI
automotive
benchmark
blue chip stock market index
chemicals
commonly used
dividend payments
finance
free float
free float market capitalization weighted
futures

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bernadette Rostenkowski

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Amy Farrah Fowler

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: CBS

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: California Institute of Technology

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Chuck Lorre

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Chuck Lorre Productions

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Critics' Choice Television Award

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Debbie Wolowitz

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bill Prady

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Golden Globe Award

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Howard Wolowitz

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Jet Propulsion Laboratory

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Jim Parsons

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Los Angeles, California

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Leonard Hofstadter

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Penny

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Primetime Emmy Award

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Raj Koothrappali

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Pasadena, California

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Kevin Sussman

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
13.8 billion years
1927
2007
2019
2019 series finale wave
21st century nostalgia surge
Albert Einstein
Alexander Friedmann
Apartment 4A
Arno Penzias
BAZINGA!, catchphrase
Big Bang nucleosynthesis
Bill Prady
CBS
Caltech
Chuck Lorre
Cosmic Background Explorer satellite
Edwin Hubble
Emmy Awards
English
FLRW metric
Fred Hoyle
George Gamow
Georges Lemaître
Howard Wolowitz
Hubble's law observations
Jim Parsons
Johnny Galecki
Kaley Cuoco
Kunal Nayyar
Lambda CDM model
Leonard Hofstadter
Pasadena, California
Penny
Planck epoch
Planck satellite mission
Raj Koothrappali
Robert Dicke
Robert Wilson
Sheldon Cooper
Simon Helberg
Stephen Hawking
TV show
Warner Bros. Television
Young Sheldon
cosmic inflation
cosmic microwave background radiation
cosmic web of galaxy clusters
cosmological model

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Adidas AG

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Airbus SE

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Allianz SE

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: BASF SE

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: BMW AG

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: BaFin

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Bayer AG

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: DAX

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: DAX 30

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: DAX Futures

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: DAX Indices

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: DAX Options

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Deutsche Bank AG

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Deutsche Börse

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Deutsche Lufthansa AG

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Deutsche Börse Market Data

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Deutsche Post AG

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Deutsche Telekom AG

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Frankfurt Stock Exchange

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Euro Stoxx 50

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
stock market index family

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Persians
Processional Way
Pythagorean theorem precursor
Robert Koldewey
Seleucid Empire
Sennacherib
Sippar
Sumerian King List
Sumerian culture
World Heritage Site
after Persian conquest
agriculture
ancient city
animals
astronomy
awilu
barley
base-60 numeral system
canals
citadel
city walls
clay tablets
cuneiform
dates
eight gates
glazed brick reliefs
goddess Ishtar
judges
lex talionis
limestone
moat
monarchy
mudbrick
mushhushshu
mushhushshu dragon
provinces
recording planetary movements
reed boats
royal palace
sexagesimal fractions
square roots
sun-dried bricks
textiles
towers

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
true
ziggurat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1937
1938
1974
2003
2015
2022
4 years or 50000 miles
Adolf Hitler supported its creation
Advanced Driver-Assistance Systems
Audi
AutoMuseum Volkswagen
Bentley
Brazil
British Army
Bugatti
China
DSG
Dakar Rally
Das WeltAuto
Electronic Stability Control
FAW-Volkswagen
Ferdinand Porsche
Germany
Kombi
Lamborghini
MEB
Mexico
Oliver Blume
Porsche
SAIC Volkswagen
SEAT
Skoda
TDI
TSI
United States
VOW3
VW Bus
Volkswagen Beetle
Volkswagen Commercial Vehicles
Volkswagen Driving Experience
Volkswagen Golf
Volkswagen Group
Volkswagen ID.3
Volkswagen ID.4
Volkswagen Jetta
Volkswagen Karmann Ghia
Volkswagen Motorsport
Volkswagen Passat
Volkswagen Passenger Cars
Volkswagen Polo

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Akkadian

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Achaemenid Empire

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Akkadian Empire

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Alexander the Great

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Babili

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Assyrian Empire

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Code of Hammurabi

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Cyrus the Great

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Cuneiform

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Enuma Anu Enlil series

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Euphrates

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: First Dynasty of Babylon

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Hanging Gardens of Babylon

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Hittites

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Iraq

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Hammurabi

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Ishtar Gate

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Ishtar Gate remains displayed in Berlin

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Kassites

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Kassite dynasty

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Al Wolowitz
Amy Farrah Fowler
Beverly Hofstadter
Howard Wolowitz
Pasadena, California
Raj Koothrappali
Sheldon Cooper
The Big Bang Theory
a New York accent
a vacuum cleaner
after selling nail salon
despite heavy rain
fictional character
grandchildren
her bathrobe
her grandson and friends
her son
matzo ball soup
online gaming
singing group
vacuum cleaner
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1871 under Wilhelm I
Adidas
Albert Einstein
Angela Merkel from 2005 to 2021
Austria
BMW
Baltic Sea
Bavaria
Belgium
Berlin
Chancellor
Cologne Cathedral as landmark
Czech Republic
Das Lied der Deutschen
Denmark
Euro
Europe
European Union
France
France leading to EU partnership
G7
German
German Unity Day on October 3rd
Helmut Kohl
Holy Roman Empire
Johann Wolfgang von Goethe
Johannes Gutenberg
Konrad Adenauer
Ludwig van Beethoven
Luxembourg
Marshall Plan helped rebuild after war
Martin Behaim made important globes
Max Planck
Mercedes-Benz
NATO
Netherlands
Neuschwanstein Castle in Bavaria
North Sea
Oktoberfest
Poland
President
Schleswig-Holstein
Switzerland
Teutonic roots and Holy Roman heritage
Volkswagen
World War I involvement
World War II participation
Zugspitze
automotive engineering
black red and gold tricolor

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
10 members
1890
AA from S&P
ALV
AXA
Aktiengesellschaft
Allianz Arena
Allianz Bonus
Allianz Cultural Foundation
Allianz Direct
Allianz Football cUP
Allianz Foundation
Allianz Global Corporate & Specialty
Allianz Global Investors
Allianz Investment Management
Allianz Parque
Allianz Risk Barometer
Allianz SE
Allianz Stadium
Allianz Technology
Allianz app
Allianz cares initiative
Allianz customer portal
Americas
Asia-Pacific
BaFin
BlackRock
Bringing confidence to life
Carl von Thieme
China
DAX stock index
Euler Hermes
Europe
FC Bayern Munich
Fireman's Fund Insurance Company
Frankfurt Stock Exchange
Generali
German
Middle East
Munich, Germany
Nazi era business activities
Oliver Bäte
Olympic Games
PIMCO
RIAS
UN Principles for Sustainable Insurance
Wilhelm von Finck
World Bank
Zurich Insurance Group
artificial intelligence in claims processing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1997
Bob Hearts Abishola
Burbank, California
CBS
Character-driven comedy
Chuck Lorre
Chuck Lorre Productions, Inc.
Cybill
Dharma & Greg
Grace Under Fire
High ratings
High-budget television productions
Mike & Molly
Mom
Multi-camera sitcoms
Netflix
Sitcom television series
Television production
Television production company
The Big Bang Theory
The Bookie
The Kominsky Method
Two and a Half Men
United States of Al
Warner Bros. Television
Young Sheldon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Bernie
Howard Wolowitz
Melissa Rauch
The Big Bang Theory
Young Sheldon
children births marry Howard
cohabitation Penny
education qualification
fictional character
financial comparison Howard
first interactions Howard
first meeting Penny
kind of work her father does
maternal notable characteristic
microbiologist
multiple references children
relationship with Howard stages
religion
various employments biochemistry field
vocal trait described

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1271110000000
1870
24248000000
3840000000
85000
Aktiengesellschaft
Alexander Wynaendts
Banking
Christian Sewing
DAX
DWS Group
Euro Stoxx 50
Financial services
Frankfurt
Frankfurt Stock Exchange
Germany
NYSE
blue
db.com
public limited company

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
101369
1863
507 billion euros
Aktiengesellschaft
Animal Health
BAYN
Bayer Cross logo
Bill Anderson
Consumer Health
Crop Science
DE000BAY0017
Essure
Eylea
Felix Hoffmann
Friedrich Bayer
Germany
Leverkusen
Monsanto
Pharmaceuticals
Werner Baumann
Xarelto
acquired Monsanto in 2018
agrochemicals
aspirin
biotechnology
company
pharmaceutical company
pharmaceuticals

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Bonds
Derivatives
Deutsche Börse Group
ETFs
Eurex Data
Financial market data service
Frankfurt Stock Exchange
Market Data Feed
Stocks
Xetra trading platform
Yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
114.4 billion euros
1995
216240
Bonn, Germany
Bundesnetzagentur (Federal Network Agency)
DTE.F
Deutsche Bundespost
Euro
FWB (Frankfurt Stock Exchange)
Frankfurt
German government
Germany
MagentaMobil
T-Mobile
T-Mobile US
T-Systems
Telekom Deutschland GmbH
corporation
fixed-line telephone service
largest telecommunications provider in Europe
mobile phone service
over 100 billion euros
telecommunications
telekom.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
gauge of German economic health
options
performance index
quarterly
top_twelve
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1996
2004
2007
2008 to 2019
Actor
Alan Froman on Jessie
All Good Things
All Things Comedy
American Dad!
Autism Speaks
Bad Teacher
CBS
Charlie Wilson's War
Comedian
Crazy, Stupid, Love
December 4, 1970
Don on Spin City
ER
Groundlings
Imagen Awards
Jim on Remember WENN
Kevin Steven Sussman
Mad About You
Mystic River
New York City
Person
Rolling Kansas
Scream Bloody Murder
Sex and the City
Shutter Island
Stephanie Cameron
Stony Brook University
Stuart Bloom
The Big Bang Theory
The King of Queens
The Mentalist
Two Guys and a Girl
Ugly Betty
comic book store owner
role in The Big Bang Theory

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000.0
1988-07-01
40
DAX index family
Deutsche Börse
Deutscher Aktienindex
Euro
Frankfurt Stock Exchange
GDAXI
German stock index
Germany
Germany's largest publicly traded companies’ performance
MDAX
SDAX
benchmark for German equity market
blue-chip companies
by Qontigo
during Frankfurt Stock Exchange business days
financial index
for ETF constructions
free-float market capitalization weighted
market capitalization and trading volume
over 18,000 in 2021
quarterly
real-time
stock market index
through global stockbrokers
under EU financial market regulations

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
140 billion euros
4.05 billion euros
4.8 billion euros annually
57.14 billion euros
6.47 billion euros
ABB
Africa
Aktiengesellschaft
Asia
Audi
Automation systems
BMW
Bangalore
Berlin
Billions of euros
Building technologies
CEO
CFO
Carbon neutrality by 2030
Company
Conglomerate
Dade Behring
Digital Industries
Digital industries
Digital twin technology
Digitalization
Diverse global workforce
Dresser-Rand
EV charging infrastructure
Electric tram
Electronics
Emerson's industrial software business
Energy
Erlangen
Europe
First European electric street lighting
First electric elevator
First pointer telegraph
For German Navy
Formula E racing
Fortune Global 500 company
Frankfurt Stock Exchange
Gas turbine plant in Berlin
Gas turbines
General Electric
German Electrical Engineering Society
Germany
Green hydrogen solutions
Healthcare
High voltage direct current transmission

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
cosmology
critical density
dark ages
electroweak epoch
expansion of the universe
expansion redshift
extremely high
formation of galaxies
general relativity
horizon problem
inflationary epoch
nerd culture
nucleosynthesis
observational cosmology
observations of distant galaxies
particle physics
planets
primordial abundance of elements
primordial singularity
quantum fluctuations
quantum mechanics
quark gluon plasma
recombination era
romantic comedy after Season 3
sitcom
stars
static universe model
steady state theory
true
universe evolution
verifiable through indirect observations

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1
100 Best Companies to Work For
1972
1973
1980
2002
2022
2023
Aktiengesellschaft
April
Ariba
B2B
Christian Klein
Claus Wellenreuther
Coca-Cola
Concur Technologies
Dietmar Hopp
Fortune Global 500
Frankfurt Stock Exchange
Gartner Magic Quadrant Leader
German Innovation Award
Germany
Google
Hans-Werner Hector
Hasso Plattner
IBM
Imperial Chemical Industries
Internet of Things
Klaus Tschira
Mercedes-Benz
Microsoft
Microsoft Dynamics
Nestlé
Oracle
Procter & Gamble
Qualtrics
SAP
SAP ABAP programming language
SAP Ambassadors for Good
SAP America
SAP Asia
SAP Business One
SAP Business Suite
SAP Business Technology Platform
SAP CRM
SAP Community
SAP EMEA
SAP ERP
SAP HANA
SAP Innovation Center Network

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1.52 millimeters
1793
19.05 millimeters
1909 to 1958
1943
1943 copper penny
1982
2.5 grams
95% copper
97.5% zinc
Abraham Lincoln
English idiom
Flowing Hair
IN GOD WE TRUST
Lincoln Memorial
Union Shield
United States
United States Mint
Victor David Brenner
World War II
billions annually
c
copper
copper-colored
currency unit
discussed in Congress
frequently debated
frugality
making change
minting year
more than one cent
non-magnetic
one cent
one-cent coin
over $100000
penny
penny drives
penny for your thoughts
pure copper
rare due to low value
retail transactions
rounding cash transactions
steel
teaching money concepts
two wheat stalks
wheat penny
yes
yes for us coins
zinc
zinc mining

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1952-10-18
1985
2000
6263 Hollywood Boulevard
American
American television comedy
Bethpage, New York
Bob Hearts Abishola
CBS
Charles
Charles Michael Levine
Chuck Lorre Productions
Cybill
Cybill Shepherd projects 1990s
Dharma & Greg
Disjointed
Grace Under Fire
Hollywood Walk of Fame
Humanities (award nominated)
Incremental filler
Lorre
Mike & Molly
Mom
Roseanne
Roseanne (1989 TV series)
Television
The Big Bang Theory
The Hollywood Reporter
The Kominsky Method
Two and a Half Men
United States
Young Sheldon
character name conflict case 2000s
composer
creating sitcoms
discretionary entries placeholder
film director
multiple Emmy Awards
rock guitarist
screenwriter
silent donations
television comedy block
television producer
vanity cards

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2012
Aerospace Engineer
American
Aquaman
Bernadette Rostenkowski
Caltech
Debbie Wolowitz
Dr. Eric Gablehauser
Fictional Character
Footprints on the Moon
Frodo
Halley Wolowitz
Italian
Jewish
Leonard Hofstadter
Leslie Winkle
MIT
Mars Rover
Master's in Engineering
May 16, 2019
NASA
Neil Michael Wolowitz
Penny
Physics Bowl team
Raj Koothrappali
September 24, 2007
Sheldon Cooper
Shmoodle MVP
Simon Helberg
Space Station Toilet Repair
Star Wars
Star Wars: A New Hope
The Big Bang Theory
after marriage
birds
blue
brown
dodges gym
engineering skills
expelled for urine simulation
immature behavior
introduces self with bachelor degree
it's a long story
keyboard
married with kids
mother
on dating
rival Wil Wheaton
short
to International Space Station

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Alexander the Great

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Akitu

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Assyrian Empire

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Babylonian Captivity of Jews

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Battle of Opis

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Borsippa

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bible

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: British Museum

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Code of Hammurabi

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Egypt

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Elam

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Enuma Elish

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Epic of Gilgamesh

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Esarhaddon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Etemenanki

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Esagila

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hammurabi

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Euphrates

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Iraq

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hanging Gardens

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1960
Bachelor's in broadcast journalism
Caroline in the City
Chuck Lorre
Dharma and Greg
Dream On
Edward Ettlbauer in early television writing
Emmy Award
Fraiser
Gilmore Girls with Amy Sherman-Palladino
Hollywood
KCTF Awards for pilot scripts 1988
Los Angeles
Maximus Leadworth far as children's drama
May 1960 in Pennsylvania
Megas XLR
Philadelphia
Star Trek: The Next Generation
Television Hall of Fame honor
Temple University predecessors involvement in media
The Big Bang Theory
The Gilmore Girls
The WB television network
University at Buffalo
avocado-centric preferences shown in interviews
clever cultural references in sitcoms
comedic dialogue additions without main credits
comedy writer for defunct comedy stores
creating long-running sitcoms
equips networks relaunches comedy programs intermittently
popular writes behind comedies decades change
radio company co-owner
resident elder series construction leader status
stand-up comedian
television producer
television writer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
After 1st Century BC
Amytis of Media
Ancient Greek Writings
Ancient Wonder
Babylon
Berossus
Euphrates
Grand
Iraq
King Nebuchadnezzar II
Legend
Neo-Babylonian Empire
Royal Pleasure Garden
Sparse
Strabo
Terraced Platforms
Yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Volkswagen Tiguan
Volkswagen Type 2
We Connect
Wolfsburg
World Rally Championship
automotive manufacturer
billions of dollars
carbon neutrality by 2050
cars, SUVs, vans, and electric vehicles
circled V and W
diesel emission scandal
direct injection engines
every 5-7 years
extensive in various climates
featured in movies and music
football clubs like VfL Wolfsburg
generally high in reliability
global network of parts suppliers
investing in solid-state batteries
investment in renewable energy
majority electric sales by 2030
manual
mentioned in various books
modular transverse toolkit
multiple for various issues
multiple in Europe and Asia
numerous worldwide
one of world's largest carmakers
over 100 worldwide
over 150 countries
over 250 billion euros
over 650000 worldwide
over 8 million vehicles annually
partnered with Argo AI
people's car
post-war production helped rebuild Germany
supports education and environment
symbol of German economic recovery
worldwide

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1973-03-24
2007–2019
2011
2017
2018
2022
4
A Man of No Importance
Actor
American
Bachelor of Arts
Best Actor in a Comedy Series
Crane
Critics' Choice Television Award
Drama Desk Award
Garden State
Golden Globe Award
Hidden Figures
Home
Houston
Master of Fine Arts
Michael
Oh
Paul Stafford
Person
Primetime Emmy Award
Saturday Night Live
Sesame Street
Sheldon Cooper
Special
TV Guide Award
Texas
That's Wonderful Productions
The Big Bang Theory
The Big Year
The Boys in the Band
The Good Doctor: Making Of
The Normal Heart
The Simpsons
Theater
Tim
Todd Spiewak
University of Houston
University of San Diego
Young Sheldon
Young Sheldon narrator
diagnosed with tachycardia
director
geek chic
genius physicist

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1988
1993
360T
Beirut Stock Exchange
Berlin Stock Exchange
Bitcoin
Börse Stuttgart
Clearing
Clearstream
Custody
DAX
DAX family
DB1
Derivatives Trading
ESG Indices
EUREX
Equities Trading
Euro Stoxx 50
European Union
Federation of European Securities Exchanges
Frankfurt
Frankfurt Stock Exchange
Germany
GoingPublic
IPO allocation
London Stock Exchange Group
Market Data
Patricia Híz
STOXX
Settlement
T7 trading system
The Cube
Theodor Weimer
UK regulator concerns
Xetra
bonds and equities
brokers work via Deutsche Börse
change towards electronical system only
market data dissemination
stock exchange

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
0.1 index point
08:00 to 22:00 CET
100 index points
1991
5
5 euros per index point
Black–Scholes Model
Call Option
Cash Settled
DAX Futures
DAX Index
DAX Volatility Index
Daily
Derivatives Market
Equity Derivatives
Eurex
Eurex Clearing
Eurex Exchange
Euro
European Option
European Regulations
Exchange Fees Apply
Expiration Date
Finance Industry
Financial Derivative
Germany
Hedging
High
High Risk
Implied Volatility
Institutional Investors
Leverage
Limit Order
Limited
Margin Requirements
Market Order
Monthly
Physical Delivery Not Applicable
Portfolio Diversification
Put Option
Retail Traders
Speculation
Standardized Contracts
Stock Index Option
Strike Price
Third Friday of Month

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Agriculture
Ancient civilization
Assyria
Babylonia
Boundary stones (kudurrus)
Cuneiform tablets
Dating by regnal years
Dur-Kurigalzu
Egypt
Elamites
Ethnic group
Gandash
Hittites
Kassite Dynasty of Babylon
Kassite architecture
Kassite language
Marduk
Mesopotamian deities
Molded bricks
Monarchy
Southern Mesopotamia
Zagros Mountains
c. 1155 BCE
c. 1531–1155 BCE

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1890
AA-
ALV
Allianz Arena
Allianz Global Investors
Asset management
BaFin
Blue
Carl von Thieme
Casualty insurance
DAX index
Euro
Euro Stoxx 50
Financial services
Frankfurt Stock Exchange
Health insurance
Insurance
Insurance company
Largest insurer in Europe
Life insurance
Multinational financial services company
Multiple
Munich, Germany
Over 150,000
Over 2 trillion euros
Over 70
PIMCO
Property insurance
Public limited company
Securing your future
Societas Europaea
Sports events
Two-tier board
Wilhelm Finck
allianz.com
false
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
$81520
137122
1874
1884
1886
1890
1917
1922
1936
2016 World Scientific Congress
6020
863
All-America City
Altadena
Arcadia
ArtNight Pasadena
Beavers
California
California Institute of Technology
Castle Green
City of Roses
Colorado Boulevard
Gamble House
Greater Los Angeles
Indiana Colony
Jet Propulsion Laboratory
Los Angeles
Los Angeles County
Ludwigshafen
M. W. Stowell
Make Music Pasadena
Margaret McCuiston
Mediterranean
Metro A Line
Mount Wilson Observatory
NASA
Norton Simon Museum
Pacific Ocean
Pasadena City College
Pasadena City Hall
Pasadena Museum of California Art
Pasadena Symphony and POPS
Pasadena, Maryland
Rose Bowl game
Rose Parade
San Gabriel Mountains
San Marino
Sierra Madre
Super Bowl 1967
The Big Bang Theory

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
1998
Blue chip index
By market cap and sector representation
By size and liquidity
Compared with S&P 500
Deutsche Börse Group
Dow Jones Euro Stoxx 50
Dynamic to reflect changes in market
EUREX
Euro
Euro Stoxx 50
Eurozone countries
Eurozone currency member
Eurozone equity 50
Eurozone equity market
Eurozone equity performance
Every 15 seconds
Exchange-traded funds (ETFs)
Free-float market capitalization weighted
High trading volume
Index futures
Index options
March 2009 during financial crisis
News media for economic reports
Quarterly
Reflect performance of leading Eurozone stocks
STOXX
STOXX Europe 600
STOXX Ltd
SX5E
Stock market index
Stoxx 50
Stoxx Europe 50
The Wall Street Journal
Year 2000
Yes
financial institutions for product creation

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
14 meters
1899
1930
30 meters
575 BCE
6th century BCE
Auroch
Babylon
Babylonian gods
Berlin
Ceremonial entrance
City Gate
Crenellations
Dragon of Marduk
Early 20th century
Euphrates River
Fired brick
Germany
Glazed brick
Goddess Ishtar
Iraq
Ishtar
Lapis lazuli blue
Lion
Masterpiece of ancient art
Mesopotamia
Mushussu
Nebuchadnezzar II
Neo-Babylonian
Pergamon Museum
Processional way entrance
Robert Koldewey
Yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
10
1585
343 in Prime Standard segment
50°06'56"N
6000 in Deutsche Börse Group
8°40'28"E
BaFin
Brokers
Börse Frankfurt
Börsenplatz 4, Frankfurt
CET
DAX
Deutsche Börse Group
Eurex Clearing
Euro
Euro Stoxx 50
FWB
Foreign Shares
Frankfurt
Frankfurter Wertpapierbörse
General Standard
German
Germany
MDAX
Prime Standard
SDAX
STOXX Ltd
Scale
Stock exchange
TecDAX
Theodor Weimer
World Federation of Exchanges
Xetra
https://www.boerse-frankfurt.de/
iTraxx
not specified

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2002
2008 financial crisis
Administrative Council
Basel Committee on Banking Supervision
Bonn
Bundesanstalt für Finanzdienstleistungsaufsicht
Deutsche Bundesbank
EU passporting
European Banking Authority
European Insurance and Occupational Pensions Authority
European Securities and Markets Authority
Federal Banking Supervisory Office
Federal Financial Supervisory Authority
Federal Insurance Supervisory Office
Federal Ministry of Finance
Federal Securities Supervisory Office
Frankfurt am Main
German
German Banking Act
German Securities Trading Act
Germany
Insurance Supervision Act
International Association of Insurance Supervisors
Wirecard scandal
annual report to parliament
approximately 2800
bafin.de
banks
conduct of business supervision
deposit guarantee schemes
financial penalties
government agency
independent federal institution
insider trading prevention
insurance companies
major EU financial supervisor
over 1600 banks
over 6000 financial services institutions
over 700 insurance companies
protection of investors
prudential supervision
securities trading
stability of financial system
supervised institutions

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1949
Adidas Group
Adidas Originals
Adidas Predator
Adidas Stan Smith
Adidas Superstar
Adolf Dassler
Apparel
Asia
Athletes
Bjørn Gulden
English
Europe
FC Bayern Munich
FIFA World Cup
FWB: ADS
Footwear
Gazelle
German
German multinational corporation
Herzogenaurach, Germany
Impossible is Nothing
Jerseys
Kylian Mbappé
Lionel Messi
Nike, Inc.
North America
OTCQX: ADDYY
Olympics
Performance sportswear
Puma SE
Real Madrid CF
Reebok
Split from Puma
Sports equipment
Sports shoes
Sports teams
Sportswear
TaylorMade Golf Company
Three stripes
UEFA Euro
Worldwide
~61,000
€118 million (2022)
€22.511 billion (2022)
€5.492 billion (2022)

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
connected by Rhine-Main-Danube Canal
contributions from European neighbors
country
federal parliamentary republic
over 83 million people
printing press by Johannes Gutenberg
speed limits on major highways
temperate seasonal climate

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
asset management
automotive insurance
aviation insurance
businesses
carbon neutrality by 2050
catastrophe modeling
climate risk management
corporate insurance
cyber insurance
derivatives
disaster relief
diversified portfolio
emerging economies
for Holocaust survivors
health insurance
high from agencies like S&P
in March
in insurance industry awards
in more than 70 countries
in the 20th century
individuals
institutional investors
insurance
insurance premiums
life insurance
major sports events
mergers and acquisitions
millions of customers worldwide
multinational financial services company
over 1 trillion euros
over 150 billion euros annually
over 150,000
over 2 trillion euros
over 80 billion euros
pension plans
property and casualty insurance
provided insurance during both World Wars
reinsurance
solvency capital
stabilizing financial markets
sustainable investing
telematics-based insurance
with other financial firms
with other insurers historically

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
-kash-
12th century BCE
400
Akkadian
Assyria
Assyrian Empire
Babylon
Babylonia
Babylonian dynasty
Babylonian pantheon
Battle with Elam
Burnaburiash
Dur-Kurigalzu
Egyptian New Kingdom
Elamites
Gandash
Kadashman-Enlil
Kassite
Kurigalzu
Nazi-Maruttash
Old Babylonian Empire
Zagros Mountains
c. 1155 BCE
c. 16th century BCE
cuneiform tablets
land grants to officials

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
.GDAXI
1000
1988-07-01
30
846900
Adidas AG
Allianz SE
BASF SE
BMW AG
Bayer AG
Continental AG
Covestro AG
DAX
Daimler Truck Holding AG
Deutsche Bank AG
Deutsche Börse
Deutsche Börse indices
Deutsche Post AG
Deutsche Telekom AG
Deutscher Aktienindex
E.ON SE
Euro
Frankfurt
Frankfurt Stock Exchange
Fresenius SE & Co. KGaA
German Stock Index
German economy
Germany
HelloFresh SE
Henkel AG & Co. KGaA
Infineon Technologies AG
MTU Aero Engines AG
Merck KGaA
Münchener Rückversicherungs-Gesellschaft AG
Porsche Automobil Holding SE
Qiagen N.V.
RWE AG
SAP SE
Siemens AG
Symrise AG
VDAX
Volkswagen AG
Vonovia SE
Zalando SE
automotive
chemicals
finance
largest German companies
performance index
quarterly

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Alexander Friedmann

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Albert Einstein

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Arno Penzias

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Bill Prady

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: CBS

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Caltech

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Chuck Lorre

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Cosmic Background Explorer satellite

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Edwin Hubble

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Emmy Awards

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: George Gamow

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Georges Lemaître

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Howard Wolowitz

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Fred Hoyle

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Jim Parsons

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Johnny Galecki

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Kaley Cuoco

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Kunal Nayyar

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Leonard Hofstadter

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Pasadena, California

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1865
1973
2006
2009
Agricultural Solutions
BAS
BASF China
BASF Corporation
BASF India
BASF Performance Products
Bayer
Bayer CropScience
Chemicals
Ciba Holding AG
DAX component
Dow Chemical Company
DuPont
Engelhard Corporation
Euro Stoxx 50 component
Evonik Industries
Frankfurt Stock Exchange
Industrial Solutions
Kurt Bock
Ludwigshafen, Germany
Mannheim, Germany
Martin Brudermüller
Materials
Sika AG
Surface Technologies
We create chemistry
ammonia
basf.com
catalysts
chemical company
chemicals
largest chemical producer in the world
over 100000
over 2 billion EUR annually
over 380
over 40 billion EUR
over 78 billion EUR
over 80 countries
pesticides
polymers
public company
synthetic dyes
vitamins

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
0.5 index points
08:00 to 22:00 CET
12.5 EUR
1990
25 EUR per index point
Available
BaFin
Cash Settlement
Commission and Fees
DAX Index
Derivatives Market
Deutsche Börse
EUR
Electronic Trading Platform
Eurex
Eurex Clearing
Eurex T7
European Union
Expiration Date
FDAX
Financial Instrument
Futures Contract
GDP
German Economy
German Stock Market
Globally Accessible
Hedging
High
Included in Futures Price
Index Futures
Index Points
Inflation
Institutional Investors
International Traders
Market Capitalization
Mean Reversion
Mitigated by Clearing
Moderate to High
No Daily Price Limit
Portfolio Diversification
Quarterly
Required
Retail Investors
Short to Long Term
Speculation
Subject to Local Laws
Third Friday of expiration month
Top 10 Index Futures
Tracked Since 1990
Trend Following

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1,577,289 (approx. 2015)
1936
Arroyo Seco
Asteroid Redirect Mission
Bruce Murray
California Institute of Technology
Carl Sagan
Cassini-Huygens
Dawn spacecraft until ended in 2018
December 3, 1958
Deep Space 1
Don Cameron
Europa Clipper mission development
Explorer 1
Galileo
Genesis (spacecraft)
Goal to explore asteroid
HEAO Program
Hubble Space Telescope
JPLa
Jack Parsons
James Webb Space Telescope (MIRI instrument)
Juno (spacecraft)
Juno Microwave Radiometer
Kepler space telescope
Laurie Leshin (as of 2022)
Lee DuBridge
MER Athena science team
MSL ChemCam
Mariner program
Mars 2020 (Perseverance rover)
Mars Exploration Rover (Spirit and Opportunity)
Mars Pathfinder
Mars Science Laboratory (Curiosity rover)
Michael M. Watkins
NASA
NASA Deep Space Network
New Horizons mission (Deep Space Network)
Operation of JPL's terrestrial research missions
Parker Solar Probe instruments/cameras
Pasadena, California
Private A rocket engine
Rocket Research Project
Soil Moisture Active Passive satellite
Sojourner rover
Space Foundation Space Achievement Award
Spitzer Space Telescope
Stardust (spacecraft)
Theodore von Kármán
U.S. Army

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
100,000+
1916-03-07
2.4 million vehicles per year
31
31 December
5 billion euro annually
Audi
BMW
BMW 3 Series
BMW M
BMW Motorrad
BMW i
BMW i3
Bayerische Motoren Werke Aktiengesellschaft
Bosch and other auto-parts suppliers
China
DAX 40 index
DriveNow (including SHARE NOW)
Frankfurt Stock Exchange
G-series codes
German company
Global Compact LEAD recognition
Hoffman Motors Corp
MINI
Mercedes-Benz
Munich, Germany
NYSE via ADR
Premium automobile maker
Rapp Motorenwerke
Rolls-Royce
Rover Group in 1994
Rover in 2000
Stefan Quandt family
Susanne Klatten family
United States
Xetra
around 10%
automobile manufacturer
automotive industry
autonomous driving technology
circular blue and white pattern
electric vehicles
over 100 billion euro
over 120,000
over 2 million vehicles
sustainability

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
SAP Purpose Network
SAP R/1
SAP R/2
SAP R/3
SAP S/4HANA
SAP SCM
SAP SRM
SAP Social Sabbatical
SAP University Alliances
SAPPHIRE NOW
Sam Yen
SuccessFactors
Sybase
TechEd conferences
Walldorf, Germany
Weinheim, Germany
Women in Technology programs
annual pulse surveys
artificial intelligence
business analytics
client-server architecture
cloud computing
enterprise resource planning software
enterprise software
flexible working arrangements
global
healthcare
in over 180 countries
innovation center in Potsdam, Germany
integrated business software in Germany
large enterprises
machine learning
manufacturing
over 100,000
over 400,000 customers
over €120 billion
over €27 billion
real-time data processing
retail
robotic process automation
sap.com
software company
sports sponsorship like SAP Arena
technology
thousands
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1926
1953
1997
Airbus
Airbus A320 family
Airbus A330
Airbus A340
Airbus A350
Airbus A380
Austrian Airlines
Berlin
Boeing
Boeing 747
Brussels Airlines
Carsten Spohr
Cologne, Germany
DLH
Düsseldorf
Europe
Eurowings
Frankfurt Airport
Frankfurt Stock Exchange
Germany
Hamburg
LH
LHA
LUFTHANSA
Lufthansa Cargo
Lufthansa Technik
Miles & More
Munich Airport
Star Alliance
Swiss International Air Lines
airline
aviation
blue
cargo
commercial passenger
crane
global
none
over 200
over 250 aircraft
public limited company
scheduled flights
top 10 airlines worldwide
transport
white fuselage with dark blue tail
yellow
yellow crane on dark blue circle

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1600 BCE to 600 BCE
2nd millennium BCE
70
Akkadian
Ancient Near Eastern studies
Anu
Assyriologists
Babylonian astronomical text series
British Museum
David Pingree
Enlil
Enuma Elish
Hellenistic astrology
Hermann Hunger
History of astrology
History of astronomy
Library of Ashurbanipal
Louvre Museum
Mesopotamia
Mul.Apin
Nineveh
Sumerian astronomical traditions
When the gods Anu and Enlil
astrological divination
astrological prediction
celestial omens
cuneiform tablets
incomplete
later Babylonian astrology
lunar eclipses
lunar phenomena
meteorological omens
omens for kings
omens for nations
planetary movements
planetary omens
solar eclipses
solar phenomena
weather signs

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
4th to 3rd century BCE
520 BCE
Akkadians
Assurbanipal
Babylon
Babylonians
Enlil
Esagil temple
Marduk
Mesopotamia
Nabu's festival
Neo-Babylonian dynasty
Nippur
Persians
Sumerians
Ur
Uruk
ancient Mesopotamian festival
ancient texts
at kiur
divine kingship
in Babylonian Akitu
in modern times
multiple days
myth of Enuma Elish
oracle readings
parade of statues
processions
renewal of natural world
sacred marriage rite
sowing season
spring equinox month
start of the year
state religion
theogony and cosmogony
thousands of years
took tribute during Akkadian period

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Babylon
Babylonia
Esagila foundation word
Marduk
Nabopolassar
Tower of Babel story
about 89 meters
foundation tablets
seven levels
seven terraces
square base
statue moved by processions
temple tower
three stair
up to 91 meters
ziggurat
É.TEMEN.AN.KI

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
ICE trains for Deutsche Bahn
Indo-European telegraph line
Industrial automation
Infrastructure
Ingenuity for Life
Internet of Things in manufacturing
Locomotive factory in Munich
Long-distance telegraphy
Lost assets post-World War II
Medical imaging equipment
Mentor Graphics
Mentor Graphics for 4.5 billion dollars
Mobility
Mumbai
Munich
NASA
North America
October 1, 1847
Over 190 countries
Over 600000
Philips
Power generation equipment
Power plants worldwide
Power transformers
Princeton
Public company
Ralf P. Thomas
Roland Busch
SIE
Shanghai
Siemens
Siemens Digital Industries Software
Siemens Energy
Siemens Energy services
Siemens Financial Services
Siemens Foundation
Siemens Gamesa
Siemens Healthineers
Siemens Mobility
Siemens Scholarship Program
Siemensstadt in Berlin
Smart Infrastructure
South America
Stratasys
Sustainability
Thousands globally
Trains
Transatlantic cable
True
Turbines

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
134000
1970
1972
A220
A300
A320neo family
A330neo
A350 XWB
A400M Atlas
AIR
Airbus A320 family
Airbus A330
Airbus A350
Airbus A380
Airbus Atlantic
Airbus Commercial Aircraft
Airbus Defence and Space
Airbus Defense and Space
Airbus Helicopters
Ariane 5
Aérospatiale
Boeing
Bristol, UK
Broughton, Wales
CASA
Deutsche Airbus
Eurofighter Typhoon
Euronext
France
France (11%)
Frankfurt Stock Exchange
Germany
Germany (11%)
Guillaume Faury
H125
H135
H145
Hamburg, Germany
Leiden, Netherlands
Mobile, Alabama, USA
Montreal, Canada
NABLAS
NH90
René Obermann
Spain
Spain (4%)
Toulouse, France
We Make It Fly
ZEROe
aerospace

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1781
1932 Summer Olympics
1984 Summer Olympics
2028 Summer Olympics
Academy Awards
Alpha global city
Angeleno city
Aquarium of the Pacific
Asian
Athens, Greece
Berlin, Germany
Beverly Hills
Black
Bob Hope Airport
Buddhism
Burbank
California
Christianity
City of Angels
Disneyland
Dodger Stadium
Dolby Theatre
Downtown Los Angeles
English
Exposition Park
Getty Center
Glendale
Griffith Observatory
Griffith Park
Hispanic and Latino
Hollywood
Hollywood Bowl
Hollywood Sign
Inglewood
Interstate 10
Interstate 5
Judaism
LA
Los Angeles City Council
Los Angeles Clippers
Los Angeles County
Los Angeles County Metropolitan Transportation Authority
Los Angeles County Museum of Art
Los Angeles Dodgers
Los Angeles International Airport
Los Angeles Kings
Los Angeles Lakers
Los Angeles Marathon
Los Angeles Memorial Coliseum
Los Angeles River

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
100% of demonstrated need
124 acres
17
1891
1920
1933 Long Beach earthquake
24
3-year live-on-campus
34°08'15"N 118°07'30"W
39 Nobel Prizes
3:1
41 National Medal of Science winners
6 in QS World University Rankings
9 in National Universities
All freshmen
Amos G. Throop
Annual flu shot
Approximately 80% of undergraduate students
Approximately 90% of undergraduates
Beaver
Broad Institute
California
Caltech
City of Pasadena
Ditch Day pranks
Division of Biology and Biological Engineering
Division of Chemistry and Chemical Engineering
Division of Engineering and Applied Science
Division of Geological and Planetary Sciences
Division of Humanities and Social Sciences
Division of Physics, Mathematics and Astronomy
Doctoral programs
Early action
Edward O. Thorp
Engineering & Science magazine
Extremely selective
Frank Capra
Gordon Moore
Gravitational wave detection
Institute Archives
Jean-Lou Chameau
Jet Propulsion Laboratory
Keck Observatory
Kip Thorne
LIGO Hanford Observatory
LIGO Livingston Observatory
Linus Pauling
MV Pacific
Main campus in Pasadena
Mediterranean Revival

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
¢

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
10 meters
14 meters
1899–1914
1930
575 BCE
Adad
Babylon
Babylon UNESCO site
Babylon ruins, Iraq
Babylonian
Babylonian architecture
Berlin
German Oriental Society
Germany
Ishtar
Ishtar Gate exhibition hall
Ishtar Gate of Babylon
Marduk
Mushussu
Mushussu-dragons
Nebuchadnezzar II
Neo-Babylonian Empire
Pergamon Museum
Pergamonmuseum collections
Processional Way
Robert Koldewey
Staatliche Museen zu Berlin
animals in tiles
blue
blue glazed bricks
blue glazes
bulls
ceremonial entrance
city gate for Babylon
classical history book
dragons
gate reconstruction
historical artifact
lions
neo-Babylonian artifact masterpiece
no (stylized)
north wall of Babylon
processed clay
public exhibitions
true
via New Year's procession
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
to fix space telescope
waste management system for ISS

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Achaemenid Empire
Akkadians
Anshan
Assyrian Empire
Babylonia
Bible
Chogha Zanbil
Deciphered linear writing
Elamite cuneiform
Elamite language
Haft Tepe
Humban
Hutelutush-Inshushinak
Indus Valley Civilization
Inshushinak
Lagamal
Linear Elamite
Mesopotamia
Mesopotamian culture
Middle Elamite period
Neo-Elamite period
Old Elamite period
Persians
Shilhak-Inshushinak
Shutruk-Nahhunte II
Statue of Queen Napir-Asu
Sumerians
Susa
agriculture
ancient civilization
around 3200 BC
around 539 BC
at Chogha Zanbil
by Henry Rawlinson
contributed to Persian culture
copper
cylinder seals
language isolate
metalworking
monarchy
polytheism
sack of Ur
southwestern Iran
tin
trade

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2011
Acceptance speeches
Actors
Annual
Annually based on industry
Award presenters
Based on merit
Best Actor in a Comedy Series
Best Actor in a Drama Series
Best Actress in a Comedy Series
Best Actress in a Drama Series
Best Animated Series
Best Comedy Series
Best Drama Series
Best Limited Series
Best Movie Made for Television
Best Talk Show
Beverly Hills
Boston Globe
Breaking Bad
Broadcast Television Journalists Association
By the critics' group
Corporate sponsorship
Critics Choice Association
Critics discussions
Critics perspective
Critics reviews
Critics' Choice Awards
Critics' Choice Movie Awards
Critics-based
Directors
Emmy Awards predictions
For television actors
Gala ceremony
Game of Thrones
High-profile red carpet events
Honor television excellence
Individual Critics Awards
Industry professionals
Integration with movie awards
June 20, 2011
Keep previous winners
Major critical acclaim
May
Multiple categories
No
Nominations announcement
Online streaming
Open to television programs
Press releases

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
supports PETA
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19th century
1st century CE
Abstract cuneiform
Administrative records
Akkadian
Ancient Near East
Archaeological excavations
Assyrians
Assyriology
Babylonians
Base-60
Campaign accounts
Clay tablets
Cuneiform signs
Cylinder seals
Early alphabets
Early record-keeping
Elamite
Epic of Gilgamesh
Fertile Crescent
Fired clay
First writing system
Henry Rawlinson
Hittite
Left to right
Legal documents
Literature
Logographic
Mathematical concepts
Mesopotamia
Mid-19th century
Nippur
Over 3000 years
Persians
Pictographic
Reed stylus
Religious texts
Rise of Aramaic
Royal inscriptions
Scribal schools
Sumerian
Sumerian (isolate)
Sumerians
Syllabic
Syllables
Taxation
Trade
Uruk
Wedge-shaped
Words

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Agriculture
Anatolia
Ancient Civilization
Arinna
Assyrians
Battle of Kadesh
Bible
Bogazkoy Archive
Bronze
Bronze Age
Chariotry
Charles Texier
Cuneiform Script[ves]
Early Hittite Kingdom
Egypt
Hattusa
Hattusa Ruins
Hattusili III
Hepat
Hittite Language
Hittite Laws
Hittite Rock Carvings
Indo-European
Iron Smelting
Iron Working
Labarna
Metalworking
Mittani
Monarchy
Mursili II
Mycenaeans
Mythological Texts
Neo-Hittites
New Hittite Kingdom
Northern Syria
Parts of Mesopotamia
Peace Treaty
Rediscovered in the 20th Century
Sea Peoples
Suppiluliuma I
Tarhunna
Teshub
Turkey
Winged Sun Disk
c. 1178 BCE
c. 1400 BCE
c. 1600 BCE

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
After Hellenistic period
Akitu festival
Alexander the Great
Ancient Mesopotamian
Antediluvian temples
Babylon
Babylonian art
Babylonian religious center
Celestial bodies
Divine assembly
Early Mesopotamian builders
East-west orientation
Ekur in Nippur
Enuma Elish
Enuma Elish creation myth
Etemenanki ziggurat
Herodotus
House principal Babylonian god
In brick
In the city center
Marduk
Marduk statue
Massive courtyard
Meeting place of gods
Mesopotamian temple architecture
Nebuchadnezzar II
Neo-Babylonian Empire
New Year festival
Pilgrims
Political legitimization
Regular offerings
Ritual texts
Royal inscriptions
Scribes
Second millennium BCE
Site of royal coronations
Temenos wall
Temple
Temple donations
Temple priests
Xerxes I

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
"AllahuAkbar"
+964
.iq
1932
43000000
438317
Arabic
Arabs
Asia
Assyria
Babylonia
Baghdad
Basra
Black
BritishEmpire
CheekhaDar
Country
Desert
Erbil
Euphrates
FederalParliamentaryRepublic
GMT+3
Green
GulfWar
IQ
Iran
IranIraqWar
IraqWar
IraqiDinar
Islam
Jordan
Kurdish
Kurds
Kuwait
Mawtini
Mesopotamia
MiddleEast
Mosul
Muslim
Oil
PersianGulf
President
PrimeMinister
Red
Right
SaddamHussein
SaudiArabia
SovereignState
SquareKilometers
Sumer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1927
1962 to 1981
1968
1971
1973
1974
1998
1999
2000
2001
2003
2006
2007
2015
2019
60 Minutes
ABC
AccuWeather
America's Most Watched Network
American Map Company
CBS All Access
CBS Building
CBS Entertainment
CBS Laboratories
CBS Mornings
CBS News
CBS Radio
CBS Reality
CBS Special Presentation theme
CBS Sports Network
CBS Studio Center
CBS Studios
CBS Studios International
CBS Television Distribution
CBS.com
Columbia Broadcasting System
Columbia Graphophone Company
Columbia Records
Creative Playthings
Eyelogo
Friday
George Cheeks
Holt, Rinehart and Winston
January 18, 1927
July 1, 1941
King World Productions
Monday
NBC
NCAA basketball tournaments
NCIS

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1943
1944
1952
2008 due to writers strike
2019
Academy Awards
Amy Poehler
Award
Awards ceremony
Best Actor - Motion Picture Drama
Best Actress - Motion Picture Drama
Best Animated Feature Film
Best Director - Motion Picture
Best Foreign Language Film
Best Motion Picture - Drama
Best Original Score - Motion Picture
Best Original Song - Motion Picture
Best Screenplay - Motion Picture
Best Supporting Actor - Motion Picture
Best Supporting Actress - Motion Picture
Best Television Series - Drama
Beverly Hilton Hotel
Carol Burnett Award
Cecil B. DeMille Award
English
Golden Globe
Golden Globe Awards
Golden Globe Awards ceremony
HFPA members vote
Hollywood Foreign Press Association
Jack Nicholson announcing Best Picture
January
Los Angeles, California
Meryl Streep speech in 2017
NBC
Oprah Winfrey Cecil B. DeMille speech
Organization
Oscar awards season
Pia Zadora winning award
R.S. Owens & Company
Ricky Gervais
Seth Meyers
Tina Fey
active
annually in December
calendar year
celebrities and industry professionals
covering Hollywood for foreign markets
dinner and awards show
donates to film-related charities

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1754 BC
1901
2.25 meters
282 laws
Akkadian language
Babylon
Gustave Jéquier
Hammurabi
Hammurabi receiving laws from Shamash
Louvre Museum
Susa
an eye for an eye
awilu
based on social status
builder
by social class of victim
compensation for victims
consequences and restitution
contracts
contracts and dissolution
criminal law
cuneiform
death penalty
diorite stele
establish justice
family law
farmer
fines
flood control
for medical malpractice
for medical services
from excessive terms
from negligence
inheritance
irrigation
legal code
lex talionis
manumission conditions
mushkenu
of boat builders
of house builders
on loans
physician
property rights
protector of the weak
rights and responsibilities
same penalty as crime accused of
settlements
three classes
torts

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
100 CE
Afro-Asiatic
Akkadian Empire
Amarna Period Egypt
Ancient Near East
Ancient language
Aramaic
Assyria
Assyrian
Assyriology
Atra-Hasis
Babylon
Babylonian
Behistun Inscription
Case system (nominative, accusative, genitive)
Code of Hammurabi
Cuneiform script
Diplomatic correspondence
Durative (iparras)
East Semitic
Eblaite
Emphatic consonants
Enuma Elish
Epic of Gilgamesh
Extinct language
Influenced Hittite language
Late Babylonian
Law codes
Library of Ashurbanipal
Literature
Mesopotamia
Middle Assyrian
Middle Babylonian
Neo-Assyrian
Neo-Babylonian
Old Akkadian
Oldest written Semitic languages
Perfect (iptaras)
Preterite (iprus)
Religious texts
Sargon of Akkad
Science and mathematics
Semitic language
Sumeria
Sumerian
Three vowel system (a, i, u)
Triconsonantal root system
Two grammatical genders (masculine, feminine)
Used Sumerian logograms
Used phonetic complements

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
530 BCE
559 BCE
600 BCE
Achaemenid Dynasty
Achaemenid Empire
Conquest of Babylon
Cyrus Cylinder
Cyrus II
First Persian Empire
King of Anshan
King of Kings
Middle East
Pasargadae
Persia
Persian people
Shahanshah
alliance with Babylonian elites
construction of Pasargadae palaces
established Pasargadae as capital
founder of Persian Imperial Army
grandson of Astyages
human
individual mentioned in the Bible
king
overcame the Lydian King Croesus
overthrew Median Empire circa 550 BCE
respected local religions of conquered regions
tolerance toward conquered peoples
used cavalry and innovative siege tactics

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Vanadzor
approximately 23
biotechnology
city
diverse population
films like La La Land
health resort
high
mayor-council government
over 20
valley

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Anu
Bollywood songs
Caltech
Christmas with friends
Cinnamon
Claire
Comic-Con
Diwali
Doctor Who
Dr. V.M. Koothrappali
Emily
Halo with friends
Holi
Howard Wolowitz
Hubble telescope
India frequently
Indian
Indian English
Indian food often
Indian music
Kunal Nayyar
Lata Mangeshkar
Leonard Hofstadter
Lucy
Mars rover project
Mrs. Koothrappali
NASA
New Delhi
Pasadena
Penny
PhD in astrophysics
Planetarium presenter
Prius
Priya Koothrappali
Sheldon Cooper
Star Trek
Star Wars
TV interviews
Thanksgiving dinner
The Big Bang Theory
UFOs
aliens
art galleries
as fictional characters
astrophysicist
astrophysics
at cinema
at events
bicycle
black holes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
stock market index
technology
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1849 by Henry Rawlinson
200 hectares
Babylon
Babylon in religious terms
Babylonia
Birs
Birs Nimrud
Claudius Rich
Ezida
Homera
Iron Age
Isaiah
Middle Ages
Nabu
Nabu temple
Neo-Babylonian Empire
Neo-Babylonian period
New Year's festival procession to Babylon
Robert Koldewey in 1902
Tablets from Nabonidus's reign
Tower of Babel
True House
YasInsideIUCNindicateMonitoring Status Heritage RiskSince15,20DamagesDocumentOccasionallyViolateNonContiguousControlsInfRaTrack2027
about 18 km southwest
about 30 meters
about 52 meters
acropolis
ancient Mesopotamian city
at least the 3rd millennium BCE
baked brick quarry
by Hammurabi or earlier
decline after Alexander
demonstrate Parthian era use
early 2nd millennium BCE widespread
important religious and scribal center
modern Iraq
short
true
ziggurat remains

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1949
1974 to distinguish from daytime awards
ATAS Board of Governors
Academy of Television Arts & Sciences
Daytime Emmy Award
Emmy Awards family
Emmys.com awards database and history
Hollywood Athletic Club in Los Angeles
Immy television camera tube
International Emmy Award
Louis McManus
News & Documentary Emmy Award
Pantomime Quiz in 1949
Primetime Emmy Awards ceremony
Sheila Nevins with multiple documentary awards
Sports Emmy Award
abbreviated as 'Emmy' on trophies
about 15.5 inches
about 4.5 pounds
acting
advertising revenue and show renewal
as TV formats evolve
award
chairman of the Board of Governors
copper, nickel, silver, and gold
directing
excellence in American primetime television programming
feature heavily on local broadcasting
for over 70 years
limited series
main ceremony usually themed entertainment event
major broadcast and cable networks
mid-July annually
mid-September annually
miniseries
most prestigious award in American television
national broadcast and cable television
often Microsoft Theater in Los Angeles
often celebrities and comedians
on-screen performers, writers, directors, and producers
outstanding comedy series
outstanding drama series
outstanding limited series
outstanding reality competition program
outstanding variety talk series
paperless electronic voting highly encouraged now
primarily for evening television originally
primetime broadcasting hours
ratings and critical acclaim
select streaming platform content

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
15th longest in the world
2800
356
35°N
500000
Atatürk Dam
Babylon
Baghdad
Balikh River
Bible
Bronze Age
Eastern Turkey
Fallujah
Fertile Crescent
Furat
Haditha Dam
Iraq
Islamic texts
Karasu River
Khabur River
Mesopotamia
Mesopotamian plain
Middle East
Mount Ararat
Murat River
Murat and Karasu
Persian Gulf
Qurna in Iraq
Ramadi
Shatt al-Arab
Sumerian
Syria
Tabqa Dam
Tigris-Euphrates river system
True
Turkey
Ur region
Western Asia
agricultural settlements
agriculture
ancient civilizations
arid
dam construction
drinking
drought
fertile land creation
fishing
historic trade route
hydroelectric power
international agreements

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
323 BC
33
336 BC–323 BC
356 BC
Alexander IV
Alexander Romance
Alexandria (Arachosia)
Alexandria (Bucephala)
Alexandria (Egypt)
Ancient Greek
Argead dynasty
Aristotle
Arrian
Ascended to throne at age 20
Babylon
Battle of Gaugamela
Battle of Granicus
Battle of Issus
Battle of the Hydaspes
Bucephalus
Childhood taught by Leonidas
Companion cavalry
Conquest of the Persian Empire
Darius III
Egypt
Hephaestion
Illness
India
King of Asia
King of Macedon
King of Persia
Largest empire of the ancient world
Macedonian Empire
Military Strategy
Never lost a major battle
Olympias
Originally Babylon, then transferred
Over 20 cities named Alexandria
Parysatis II
Pella
Pella, Macedonia
Persia
Persian and Greek customs encouraged
Person
Pharaoh of Egypt
Philip II of Macedon
Philip III Arrhidaeus
Porus
Punjab region of India
Roxana

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
539 BC
Achaemenid Empire
Achaemenid rule over Babylon
Achaemenid satrapy in Babylonia
Babylon
Babylonian cities
Babylonian provinces
Babylonian texts
Book of Daniel
Capture of Babylon
Capture of Sippar
Cyrus Cylinder
Cyrus allowed return from exile
Cyrus the Great
Greek historians
Herodotus
Iraq
Medes
Mesopotamia
Nabonidus
Nabonidus Chronicle
Nabonidus's absence
Neo-Babylonian Empire
Opis
Persian conquests in Media and Lydia
Persian–Babylonian War
September 539 BC
Tigris River
ancient warfare
as a conqueror
battle
cavalry
chronicles
crossing Tigris River
decisive Achaemenid victory
defeat at Opis
defeated by Persians
defense of Opis
fall of Babylon
for ancient military tactics
independent Babylonian state
infantry
internal strife
of the Near East
other allies
to enter Babylon
to expand Persian Empire
trade routes
true
unknown

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2025 BC
609 BC
612 BC
Akkadian
Anatolia
Anatolian kingdoms
Ancient Mesopotamian religion
Ancient Near East
Arameans
Ashur
Assur
Assyria
Assyriology
Babylonian Empire
Battle of Carchemish
Battle of Lachish
Battle of Nineveh
Book of Jonah
Bronze Age
Elam
Herodotus
Hittite Empire
Kingdom of Israel
Levant
Medes
Mesopotamia
Middle Assyrian Period
Mitanni
Neo-Babylonian Empire
Nineveh
Numrud
Old Assyrian Period
Palace of Sennacherib
Sennacherib
Syro-Ephraimite War
Tiglath-Pileser III
Tigris River valley
Urartu
agriculture
ancient empire
astronomy records
city-state of Assur
clay tablets
cuneiform
espionage
influence on Persian Empire
internal rebellion
metals
military innovation
monarchy

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
32 years old
323 BC
324 BC
330 BC
336 BC
356 BC
Alexander IV of Macedon
Alexandria Arachosia
Alexandria Egypt
Alexandria Eschate
Alexandria in Egypt
Ancient Greek and Latin literature
Aristotle
Babylon
Battle of Gaugamela
Battle of Issus
Battle of the Hydaspes
Bucephalus
Cleopatra of Macedon
Companion cavalry
Conquest of Achaemenid Empire
Cut the Gordian Knot
Darius III
Egypt
Great Tomb of Alexander
Greek culture
Greek philosophy
Greek polytheism
Hegemon of the Hellenic League
Hellenistic period
Hephaestion
Indian Campaign
Indus River
King
King Porus
King of Macedonia
Led his troops personally
Macedon
Married
Memphis Egypt
Military Commander
Olympias
Pella
Persian Empire
Persian royal dress
Person
Phalanx formation
Pharaoh of Egypt
Philip Arrhidaeus
Philip II of Macedon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12th century BC
Akitu festival
Akkadian
Apsu
Ashurbanipal's Library in Nineveh
Assur
Assyria after fall of Babylon
Assyrian empire literature museum artifacts
Assyriology
Babylon
Babylon-Assyrian areas
Babylonian
Babylonian religion
British Museum
Ea, Babylon first gods pair K
Esagila Temple
Genesis creation story
Marduk
Marduk among gods
Mesopotamian literature
Qingu
Sîn-lēqi-unninni or other scribes
Tell Harmal archeological site
Tiamat
When on High
academica historians
ancient Mesopotamia
ancient Sumerian myths
battle scenarios
celestial cycles
clay
cuneiform script
destruction
early world creation accounts
epic poem
gods
gods like Tiamat, Marduk
heaven and earth from Tiamat's body
heaven/earth/sky/sea
heroic narrative structure
humanity
incomplete tablets
its opening words Inūma eliš
multiple modern languages
multiple tablets
myth
over 1000 lines of text
poetic rhythms
primer principal beings
sea or primeval waters

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Affected by snowmelt
After conflux with Tigris
Akkadians
Alongshore tribal territories
Ancient Mesopotamian texts
Ancient name for its distributaries
Arid to semi-arid regions
Asia
Babylon
Babylonians
Centuries-old stone bridges
Combined with Tigris River
Copper Age sites along banks
Covers vast alluvial plains in Iraq
Crucial for armies crossing
Dammed by multiple hydroelectric plants
Defines part of Syria-Iraq border
Deposits fertile silt in floodplains
Dry valleys feed water during rains
Due to upstream dam constructions
Early irrigation systems
Eastern Turkey
Epic of Gilgamesh
Eridu
Euphrates
First built by Sumerians
Fresh water
From Old Persian 'Ufratu'
Historic trade route
Iraq
Join with Tigris at Qurnah
Karakocan district
Karakocan mountains
Khabur River
Largest dam on the Euphrates
Murat River
Murat and Karasu rivers
NASA satellies in modern times
Natural resources near banks
One part of Fertile Crescent
Over 2800 km
Part of Silk Road networks
Part of vast wetland ecosystem
Persian Gulf
Purattu in Akkadian
River of gods in Sumerian mythology
Shatt al-Arab
Situated in southern Iraq
Subject of transboundary water disputes
Sumerians

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1.65 meters
1975-04-30
1987-present
Actor
American
Blossom
Bree, Belgium
David Healy
English
High school graduate
Leonard Hofstadter
National Lampoon's Christmas Vacation
Roseanne
Rusty Griswold 
Television actor
The Big Bang Theory

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1750 BC
1792 BC
18th century BC
282 laws
Akkadian
Akkadians
Amorite
Assyriology
Babylon
Babylon expansion
Babylonia
Babylonian Chronicles
Babylonian Empire
Babylonians
Bronze Age
Code of Hammurabi
Esagila
Hammurabi stele
Larsa
Louvre Museum
Marduk
Mari
Mari letters
Old Babylonian Period
Rim-Sin I
Samsu-iluna
Shamshi-Adad I
Sin-Muballit
Sumerians
Susa
Zimri-Lim
against Elam
ancient lawgiver
centralized administration
codified laws
cuneiform
diorite stele
earlier Mesopotamian laws
earliest written legal code
epilogue
eye for an eye principle
historical figure
human
influenced later legal systems
innocent until proven guilty
king
king of Babylon
king of Sumer and Akkad
king of the four quarters
lawgiver

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
20-25 meters
2nd century BCE
Alexander the Great's historians
Amytis of Media
Archimedes screw
Babylon
Berossus
Diodorus Siculus
Euphrates River
Euphrates riverbank
Greek historians
Josephus
King Nebuchadnezzar II
Mesopotamian engineering
Neo-Babylonian Empire
Sennacherib
Seven Wonders of the Ancient World
Strabo
Temple of Bel
above ground level
advanced for its time
ancient art
approximately 400 feet
approximately 75 feet
around 600 BCE
artificial mountain
asphalt layers
beautify city
chain pumps
date palms
deep enough for trees
earthquakes
exact appearance unknown
exaggerated possibly
exotic plants
green from vegetation
imported species
in botanical gardens
in films
in literature
inspired by
later garden designs
lead sheets
location unknown
marble steps
microclimate creation
might be in Nineveh
mud brick
multiple ascending levels
multiple excavations

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
$1000 science prize in 5th grade
2311 North Los Robles Avenue, Pasadena
300+ times
Alfred Hofstadter
American
Beverly Hofstadter
Caltech
Denise
Doctor Who
Dressed as Frodo
Johnny Galecki
Las Vegas marriage annulled by Penny
Leslie Winkle
Michael Hofstadter
Missy Hofstadter
New Jersey
Nobel Prize in Physics poster
North Sea particle accelerator experiment
Penny
Penny first broke up with him
Penny in formal wedding
Ph.D. in Physics
Princeton for dangerous experiment
Senior Experimental Physicist at Caltech
Sheldon Cooper
Starship Enterprise sensor range prediction fan
Stupid Old Earth episode, with Penny
The Big Bang Theory
Volkswagen Bus
We have a deal
Westy
about 5'5
allergic to peanuts
board games
built solid oxygen with Jeremy
by Sheldon mocking Pennys valentine message
camera obscura at age 6
cautious of mosquitoes
comic book collecting
did physics-vaudeville show as the Flash
discovered heaviest subatomic particle fictional record
enemy with Wil Wheaton
experimental physicist
experimental physics
failed at The Cheesecake Factory briefly
failed initial marriage proposal attempt
fantasized snowy romantic date with Penny
fictional character
friends with Howard Wolowitz
friends with Raj Koothrappali

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1 Timothy
1st century CE
27
2nd millennium BCE
39
40 authors
4th century CE
66
Abraham's journey to Canaan
Adam and Eve
Aramaic
Babylonian captivity
Babylonian exile of Jews
Book of Daniel
Book of Proverbs
Book of Revelation
Christianity
Covenant with Abraham
Dead Sea Scrolls
Easter
Ecclesiastes
Elijah
Exodus from Egypt
Exodus story
Ezekiel
Garden of Eden
Genesis
Genesis 1
Good Samaritan
Gospels
Hebrew
Holy book
Jeremiah
Jerusalem
Jesus Christ
Johannes Gutenberg
Judaism
King David
King James Version
King Solomon
Koine Greek
Latin Vulgate
Mosaic Law
Moses
New Testament
Nicene Creed points
Noah's Ark
Old Testament
Pauline epistles
Protestant Reformation

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
15.5 inches
1949
1955
4 pounds 12 ounces
ABC
Academy Awards (film)
Academy of Television Arts & Sciences
CBS
Daytime Emmy Awards
Emmy statuette
Fox
Grammy Awards (music)
Immy
International Emmy Awards
January 25, 1949
Los Angeles, California
Louis McManus
Microsoft Theater
NBC
News & Documentary Emmy Awards
Primetime Emmy Awards
September
Sports Emmy Awards
Technology & Engineering Emmy Awards
The Game Awards
Tony Awards (theatre)
United States
Walter O'Keefe
annual
gold
primetime programming
television award
television industry
yearly

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
11
1792 BC - 1750 BC
Abi-Eshuh
Amorites
Babylon
Babylonian King List A
Babylonian dynasty
CityStatesPeriod
Code of Hammurabi
Code of Hammurabi §110-150
DurSamsuiluna on Isin bank river
EsagilaZiggurat of Marduk
First Dynasty of BabylonKing
Hammurabi
Hammurabi's conquests
Hittite sack of Babylon
Hittites
Kassite Dynasty of Babylon
Larsa under Rim-Sin
LongMiddleShortchronology debate
Marduk
Mesopotamia from Eshnuna to Ur
Mesopotamian dynasty
Old Akkadian precedented writing use
Old Babylonian
Old Babylonian language literary texts
Sea Land Dynasty attacks post1650bc
Sin-Muballit
Sumu-abum
Susa Iran
Venus Tablet reference
YearThirty after accession campaign
Zimri-Lim dispossession done
astronomical omen tablet series
atop stele received law from Shamash
city walls height extended
daughter of Samsuiluna givenmaritalAlliance
eye for an eye concept formalized
lawcollectionBabylonia
misharum cancellations regularized
stone stela

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1888-06-16
1906
1910
1922
1925-09-16
19th century
20th century
Albert Einstein
Alexander Alexandrovich Friedmann
Alexander Friedmann (father)
Applied Mathematics
Big Bang theory basis
Cosmology
Doctor of Science
Expanding cosmological models
Expanding universe
Friedmann equations
Friedmann universe models
Friedmann-Lemaître-Robertson-Walker metric
Human
Leningrad
Leningrad University
Ludmila Ignatievna (mother)
Mathematician
Modern Cosmology
Petrograd University
Physicist
Professor
Researcher
Russia
Russian
Saint Petersburg
Saint Petersburg State University
Saint Petersburg University
Theoretical Physics
Typhoid fever
University of Saint Petersburg
Vladimir Steklov
Über die Krümmung des Raumes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Ulysses (spacecraft)
Viking program
Voyager program
William Hayward 
about 6000
aerobotics
first successful United States satellite launch
https://en.wikipedia.org/wiki/Jet_Propulsion_Laboratory
https://www.jpl.nasa.gov/
launched Mars Reconnaissance Orbiter (MRO)
mobile on-surface exploration vehicles
over 100
research and development center
rocketry
solid-fuel rockets
surface-to-surface missile

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1981-04-30
Actor
American
British
Kunal
London, England
Nayyar
Person
Still alive
University of Portland

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
669 BC
681 BC
Akitu statue of Marduk
Ashurbanipal
Babylon
Babylon restored gods to asilyms
Ershigal
Harrran
Marduk
Naqi'a
Neo-Assyrian Empire
Nineveh
Sennacherib
Shamash
Shamash-shum-ukin
South West Palace in Nineveh
affirmed by inscriptions
as inheritance
as official lanyls
before Babylonia campaign
celebratory feasts
circa 713 BC
coasts
daily
during significant illness
enhanced royal ideology
from Phoenicia
from empire for royal project
his Successors
his father died in battle
his father was killed
human
insufficient god guidance
introducing divine guidance artifacts
izpXNoWGu0SofKlecLiVUnrPRoq1OrdbWoErPioysCaWIeoPIeCsawINReerPDTAnneeygoeskl
king
oPrtmynolIoExyMyadInGrteNeirwOtLulStOPANNSxKyksnDaFepayAwiyIluhBiXiAyPyhAmudGa
opening trans-Medite world!
palace in Nineveh
rebellious populations
rebuilding Babylon
sculptures and reliefs
spectacle worship
than his father
through princes
to enforce rule
to ensure control

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19th century
609 BCE
612 BCE
Akkadian
Anatolia
Ashur-uballit II
Ashurbanipal
Ashurnasirpal II
Assyrian dialect
Aššur
Babylonia
Babylonian rebels
Babylonians
Biblical texts
Egypt
Kalhu
Kingdom of Israel
Levant
Library of Ashurbanipal
Lost Tribes
Medes and Babylonians
Mesopotamia
Mesopotamian civilization
Middle Assyrian Laws
Middle Assyrian Period
Neo-Assyrian Empire
Nineveh
Old Assyrian Period
Sargon II
Sargon of Akkad
Sennacherib
Tiglath-Pileser III
Tiglath-Pileser III's annals
Tigris River
Urartu
a highly organized state
against Elamites
ancient Mesopotamian religion
ancient empire
aqueducts
barley
centered on Aššur god
chariots
chariots in warfare
circa 2025 BCE
copper
correspondence by letter
cuneiform writing
forced resettlement
heavy-handedly

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
UGS Corporation
Velaro high-speed trains
Washington D.C.
Werner von Siemens
Wind turbines
World's first electric railway
X-ray machines

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Previous awards ceremonies
Primetime Emmy Awards
Productions aired in calendar year
Professional critics
Professional organization
Recognize creative achievements
ReelzChannel
Requires organization teamwork
Results announcement
Specific categories only
Supports underrepresented
Television award
Television critics
Television industry
Television shows
The CW
The CW in 2023
The critics choose the best
Typically in June
United States
Variety magazine
Veep
Via social media
Voting by critics
Widespread
Winners and nominees
Yes
criticschoice.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
NFL games
National Amusements
New York City
New York Yankees
Paramount Global
Paramount+
Pop
Shari Redstone
Sunday
Survivor
TV Parental Guidelines
The Amazing Race
The Big Bang Theory
The Late Show with Stephen Colbert
The Masters golf tournament
The Price Is Right
The Young and the Restless
Thursday
Tiffany Network
Tuesday
United Independent Broadcasters
United States
Viacom
WCBS
Walter Cronkite
Wednesday
Westinghouse Electric Corporation
William S. Paley
Woman's Day
alternative to NBC
blue
broadcast television network
color television system
comedy series
dramas
electronic video recording system EVR
entertainment programs
more than 200
news
news programming
older adults
primarily viewers over 50
radio station group
soap operas
talk shows
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1990s-present
American
CBS
CBS network
Chuck Lorre
Dharma & Greg
English
Los Angeles
People's Choice Award
Rebecca Rand
Star Trek
The Big Bang Theory
The Big Bang Theory scripts
Writers Guild of America
astrophysics
comedy
ensemble comedy
human
multiple sitcom episodes
nerd culture representation
network television
none
producer
science
showrunner
sitcom writer
sitcoms
stand-up comedy
television
television executive
television producer
television writer
writer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
aerospace manufacturer
aircraft manufacturing
airlines
around 600 aircraft
civil aircraft
commonality across families
defense
governments
net-zero carbon emissions by 2050
over 8000 aircraft
private operators
twin-aisle
€52.1 billion

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Los Angeles Zoo
Malibu Beach
Mayor of Los Angeles
Mediterranean climate
Mexico City, Mexico
Mumbai, India
Museum of Contemporary Art
Olvera Street
Pacific Ocean
Pacific Rim trade
Port of Los Angeles
Santa Monica
Santa Monica Bay
Santa Monica Beach
Santa Monica Mountains
Spanish
Spanish settlers
Staples Center
U.S. Bank Tower
U.S. Route 101
United States
Universal Studios Hollywood
University of California, Los Angeles
University of Southern California
Venice
Venice Beach
Vincent Thomas Bridge
West Hollywood
Westwood
White
approximately 15 inches
approximately 305 feet
approximately 502 square miles
city
digital media
entertainment industry
extensive freeway network
fashion district
film industry
financial district
music industry
over 3.8 million people
populous place
seismically active region
skyscrapers
television industry
tricolor flag with city seal
video game development

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1915-06-24
1939
1950
1957
1974
2001-08-20
A for Andromeda
Arthur Eddington
BBC radio broadcast
Barbara Clark
Barbara Hoyle
Big Bang theory
Bingley Grammar School
Bournemouth
British
CNO cycle
Caltech
Cambridge
England
Fellow of the Royal Society
Frontiers of Astronomy
Geoffrey Burbidge
Geoffrey Hoyle
Gilstead
Hoyle-Narlikar theory
Institute of Astronomy
Institute of Theoretical Astronomy
Kalinga Prize
Karl Schwarzschild Medal
Margaret Burbidge
Plumian Professor of Astronomy
Royal Medal
The Nature of the Universe
United States
University of Cambridge
William A. Fowler
astronomer
astronomy
coined term 'Big Bang'
cosmologist
extraterrestrial life
human
nucleosynthesis theory
panspermia
science fiction
steady state cosmology
steady state theory
stellar nucleosynthesis

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2154 BCE
2218 BCE
2254 BCE
2270 BCE
2278 BCE
2279 BCE
22nd century BCE
2334 BCE
24th century BCE
Afroasiatic
Akkad
Akkadian Empire
Akkadian cuneiform
Akkadian language
Akkadian literature
Akkadian seals
Akkadians
Bronze Age
Early Dynastic Period (Sumer)
Elam
Enlil
Eridu
Gutian invasion
Ishtar
King of Akkad
King of Sumer and Akkad
King of the Four Quarters
Louvre Museum
Mari
Mediterranean Sea
Mesopotamia
Mesopotamian religion
Naram-Sin of Akkad
Nippur
Rimush
Sargon of Akkad
Sargonic dynasty
Semitic language
Shar-Kali-Sharri
Sumer
Sumerian King List
Sumerians
Susa
Third Dynasty of Ur
Tigris-Euphrates river system
Ur
Victory Stele of Naram-Sin
agriculture
ancient civilization
barley

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (10); stopping.
[crawler] finished in 247.4s → outputs in runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231007
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231007/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231007/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231007/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231007/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231007/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231007/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231007/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231007/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231007/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231007
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Michelson–Morley experiment
Murray Gell-Mann
NASA
NCAA Division III
Orange
Over $300 million
Over 1.9 million volumes
Over 3,000
Owens Valley Radio Observatory
Palomar Observatory
Pasadena
Pass-Fail first term
Prime contractor for NASA
Private research university
Quantum mechanics
Quarter system
Regular decision
Richard Feynman
SHINE program
Science and engineering
Seismological Laboratory
Sherman Fairchild Library
Six academic divisions
Southern California Earthquake Center
Southern California Intercollegiate Athletic Conference
Space exploration technologies
Spitzer Science Center
Summer Undergraduate Research Fellowships
Techers
The truth shall make you free
Thomas F. Rosenbaum
United States
University
White
approximately 1400
approximately 2300
approximately 900
below 4%
over $60,000 per year
over 300 professorial faculty

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Writing system
circa 3200 BCE

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1927
1951
200
60 Minutes
ABC
Advertising
America's Most Watched Network
Andy the Parrot
Broadcast Network
CBS Evening News
CBS Eye
CBS Media Ventures
CBS Mornings
CBS News
CBS News Radio
CBS Radio
CBS Sports
CBS Studios
CSI
Cable Affiliate Fees
Columbia Broadcasting System
Comedy
Drama
Emmy Awards
Face the Nation
Fox
I Love Lucy
MTV
Masters Tournament
Most Watched Network in America
NBC
NCAA March Madness
NCIS
NFL on CBS
NTSC
National Amusements
New York
New York City
News
Nickelodeon
PGA Tour
Paramount Global
Paramount+
SEC on CBS
Sports
Survivor
The Big Bang Theory
The Late Show with Stephen Colbert
The Talk
The Young and the Restless

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] output_dir: runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231007
[crawler] seeded: ancient city of Babylon
[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: ancient city of Babylon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1989-11-18
1993-12-23
2.725 Kelvin
2006 Nobel Prize in Physics
2268 kg
4 years
73 seconds
900 km
99 degrees
Big Bang theory
CMB anisotropies
CMB blackbody spectrum
COBE
COsmic Background Explorer
Delta rocket
Differential Microwave Radiometer (DMR)
Diffuse Infrared Background Experiment (DIRBE)
Far-Infrared Absolute Spectrophotometer (FIRAS)
George Smoot
John Mather
NASA
NASA Goddard Space Flight Center
Sun-synchronous orbit
Vandenberg Air Force Base
Wilkinson Microwave Anisotropy Probe
artificial satellite
foundation of modern cosmology
solar arrays
space telescope
study cosmic microwave background radiation
true
understanding of universe's origins

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Syria
Tigris
Turkey
White
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
chocolate
clowns
cocktails
colorful shirts
comic books
considered
dark matter
deeply
during movies
emotionally
exoplanets
family
fictional character
finding love
fine dining
for anxiety
for holidays
for research
for science segment
frequently
from father
his mother
hopeless
in America
in astrophysics
in dating
in later seasons
karaoke
married
movies
museums
near friends
new planet
of popular science
of thoughts
on TV science shows
on luxury items
on planets
on relationships
over time
parties
placed by parents
poetry
psychiatrist
public transport
restaurants with friends
schools
science articles
science fiction
scientific conferences

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
18th century BCE
282 laws
Against Elam
Against Larsa
Against Mari
Akkadian
Akkadian cuneiform
Amarna letters
Amorite ruler
Appears in Biblical scholarship debate
Assyrian laws
Babylon
Babylonian king
Centralized administration
City of Babylon
Code of Hammurabi
Cuneiform tablets
Defended Babylonian territories
Diorite stele
Divinely sanctioned kingship
Drowning
Esagila
Eye for an eye
First Babylonian Dynasty
Fixed interest rates
French archaeologists in 1901
Hammurabi receiving laws from Shamash
Hierarchical with awīlum muškēnum wardum classes
His officials
Hittite laws
Isin
Kassite period
King of Babylon
King of the Four Quarters
Lagash
Laws of Lipit-Ishtar
Laws of Ur-Nammu
Louvre Museum in Paris
Lunar based
Maintained canal systems
Marduk
Marriage and divorce
Mesopotamia
Mutilation
Named for significant events
Old Babylonian period
Oldest deciphered lengthy legal text
Organized army with infantry and chariots
Over 2 meters
Over 40 years

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
(GUD) AN.NA cuneiform form
Akkadian
Ancient Mesopotamia
Ancient Sumerian city of Uruk
Baal Cycle
Bull of Heaven
Cedar Forest
Descent to Underworld
Ea
Eanna
English
Enkidu
George Smith
Gilgamesh
Gilgamesh fails immortality test
Gilgamesh returns without immortality
Gilgamesh's death and ghost appearance
Hebrew Bible flood narrative
Kish
Lebanon mountains
Library of Ashurbanipal
Lugalbanda
Mashu mountains
Mesopotamian Noah figure
Mesopotamian flood story
Mesopotamian literary work
Nineveh
Ninsun
Old Babylonian fragments
Shamash
Shamhat
Standard Babylonian Version
Sumerian/Latin twins myths
Uruk
ale-wife
animal similes
boasting of king's accomplishments
brewing beer
bridges nature and civilization
central motif
circa 2100–1200 BCE
civilization versus nature
composed in verse
cuneiform on clay tablets
disease sent by gods
elegiac quality narratives
epic poem
found across Mesopotamia
friendship
giant guardian

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+20
.eg
1,010,408 square kilometers
108 people per square kilometer
1187 kilometers with Libya
1276 kilometers with Sudan
1953
2011 Egyptian revolution
208 kilometers with Gaza Strip
2629 meters
28 February 1922
Abdel Fattah el-Sisi
Abu Mena
Abu Simbel temples
African Union
Agriculture
Alexander the Great in 332 BCE
Alexandria
Ancient Egyptian
Ancient Egyptian medicine
Ancient Thebes
Arab League
Arabic
Aswan
Aswan High Dam
Battle of Kadesh
Belly dancing
Cairo
Cairo University in 1908
Camels
Camp David Accords
Cleopatra VII
Coptic Christianity
Cotton
EFG Hermes
Eastern Desert
Eastern European Time
Egypt national football team
Egyptian Arabic
Egyptian Pound
Egyptians
Eid al-Fitr
Ful medames
Galabiya
Gamal Abdel Nasser
Gaza Strip
Great Sphinx
Hieroglyphs historically
Historic Cairo
House of Representatives

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
donations from HFPA
entertainment-related charities
excellence in film and television
false
formal
from awards broadcast rights
gold-plated
golden globe on a pedestal
goldenglobes.com
group of foreign journalists
increased member diversity in 2020s
increased membership diversity
individuals and productions
international journalists
journalists from HFPA
lack of diversity in voters
limited
live television
millions of viewers
musical numbers sometimes
none
often
owned by HFPA and network
presenting and comedy
sequential categories
sometimes
true
true for nominee announcements
various annually
various celebrities
various sponsors
voting by HFPA members

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
-118.1445
138699
1886
2020
22.96 sq mi
263 m
34.1478
59.46 km²
626
863 ft
91101
91103
91104
91105
91106
91107
Altadena
Arcadia
Arroyo Seco
Brookside Park
California
California Institute of Technology
City
Council–manager government
East Pasadena
Hollywood Burbank Airport
Indiana Colony
Interstate 110
Interstate 210
Jet Propulsion Laboratory
Los Angeles
Los Angeles County
Metro A Line
Norton Simon Museum
Old Pasadena Historic District
Pacific Time Zone
Pasadena City College
Pasadena City Hall
Pasadena Police Department
Pasadena Public Library
Pasadena Transit
Rose Bowl Game
Rose Bowl Stadium
San Gabriel Mountains
San Marino
South Pasadena
Tournament of Roses Parade
United States
Victor Gordo
https://en.wikipedia.org/wiki/Pasadena,_California

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
wardu
witness testimony

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1995
200000
53113
Aktiengesellschaft
Bonn, Germany
DAX
DE0005552004
DHL
DPW.DE
Deutsche Post DHL Group
Deutsche Post Tower
Frankfurt Stock Exchange
German corporation
German government
Germany
KfW bank
Post
Reichspost
Tobias Meyer
https://www.deutschepost.de
logistics
logistics company
mail services
parcel delivery
partner GoGreen
postal parcels internationally
postal services
public company
regular
telecommunications
worldwide
€20.3 billion
€45 billion

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1753
1759
1823 to 1852
1940 warehouses
1945
1997
92000 square meters
94
Africa
Anatolia
Ancient Egypt and Sudan
Ancient Greece and Rome
Art Fund law
BM Research Publications
Bloomsbury Museum
British Museum Act 1753
British Museum Trustees
British sovereign
Conservation and Scientific Research
Department for Culture Media and Sport
Director
East Asian
Francis Henry
George Osborne
Grade I listed building
Great Russell Street
Greek Revival
Holborn
Lewis chessmen
London
London museums
Matthew Duane
Money and Medals
Museum
Parliament guidelines
Parthenon Marbles
PhD in relevant field
Prehistory and Europe
Rosetta Stone
Round Reading Room
Royal Game of Ur
Sir Hans Sloane
Sir Robert Smirke
Sutton Hoo helmet
Tottenham Court Road
UK government
UNESCO tentative
United Kingdom
Wardak Vase
addition of King Edward VII Galleries

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Amy Dr. Fowler
Amy Sheldor fiancé end timeline line
Asocial
Bernadette Rostenkowski-Wolowitz
Brown
Caltech
Date arranged by mutual friends
Fictional Character
Friendship beginning
Fuzz Aldrin
Harvard University
High pitched academic brilliant monotone
Howard Wolowitz
Howard calls Amy Smart
Huzzah
Intelligent
Leonard Hofstadter
Logical
Mayim Bialik
Neuroscience
Neuroscientist
Penny Hofstadter
Primates intelligence gender differences
Proximity magnetic fields effects
Queen Evil Banana Hand
Rajesh Koothrappali
Season 3
Sensitive inner feelings
Sheldon Cooper
Socially Awkward
The Big Bang Theory
The Lunar Excitation
The Recollection Dissipation
The Stockholm Syndrome
The Tangible Affection Proof
They choose first wedding anniversary
WhatsApp neurochemical auditory responses examination effects
WhatsApp usage neurochemistry
Yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
provinces
scribal schools
siege engines
siege warfare
stone reliefs
subjects
systematic genocide
warehouse tallies
weaponry
ziggurats

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+964
.iq
18 governorates
1932 from the British Mandate
1958
2008
Abbasid Caliphate based in Baghdad
Akkadian Empire
Arab League
Arabian Standard Time
Arabian oryx
Arabic
Arabs
Arba'een
Ashur
Assyrian Empire
Assyrians
Babylon
Babylonian Empire
Baghdad
Basra
British Mandate of Mesopotamia
Christianity
Code of Hammurabi
Council of Representatives
Epic of Gilgamesh
Erbil
Euphrates
Federal Supreme Court
Gulf War
Hammurabi
Hatra
Iran
Iran-Iraq War
Iraq War
Iraq babbler
Iraqi Armed Forces
Iraqi Independence Day
Iraqi dinar
Islam
Jarmo
Jordan
Karbala
Karbala for Shia Islam
Kirkuk
Kurdish
Kurds
Kuwait
Kuwait in 1990
Mesopotamia

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Verbal system with prefixes and suffixes
circa 2500 BCE

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
millions of years
multiple
river
southeast
transport
water extraction

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
42,360 people
538 BCE
597 BCE
Achaemenid Empire
Aramaic became common
Babylonian Empire
Babylonian Exile
Babylonian month names adopted
Book of Ezekiel
Book of Jeremiah
Book of Lamentations
Books of Chronicles
Books of Kings
By the Rivers of Babylon
Cyrus Cylinder decree
Cyrus the Great
Cyrus's Edict
Ezekiel’s chariot vision
Ezra
Hananiah’s prediction
Hebrew Bible
Isaiah 40–55
Jewish diaspora
Joshua the High Priest
Judea
King Jehoiachin
Kingdom of Judah
Nebuchadnezzar II
Nehemiah
Neo-Babylonian Empire
Ninth of Av
Nippur region
Passover continued
Psalm 137
Second Temple
Seventeenth of Tammuz
Tel Abib
Tenth of Tevet
Zedekiah
Zerubbabel
along Chebar River
approximately 70 years
by Al-Yahudu tablets
by Babylonian chronicles
by Babylonian reliefs
by Lachish letters
by Rembrandt
craftsmanship
deepened monotheism
deported elites

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
series
set aside from Daytime Emmys coverage
specials
television industry standards and careers
two-step peer voting process
winged woman atom imagery on trophies
winged woman holding an atom
writing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
100-inch Hooker telescope
1889-11-20
1929
1953-09-28
20th century
Albert Einstein
American
American Philosophical Society
Andromeda Galaxy
Astronomer
Astronomy
Bachelor of Science
Bruce Medal
Carnegie Institution for Science
Cepheid variable stars
Edwin
Edwin B. Frost
Establishing that the universe is expanding
Excelled in athletics
Expansion of the universe
Galaxies are moving away from us
Galaxy classification
George Ellery Hale
Grace Hubble
Hubble
Hubble Space Telescope
Hubble constant
Hubble crater on the Moon
Hubble sequence
Hubble's law
Hubble–Lemaître law
Legion of Merit
Married
Marshfield, Missouri
Mount Wilson Observatory
National Academy of Sciences
Parsec
Person
Physics
San Marino, California
The Realm of the Nebulae
United States Army
University of Chicago
University of Oxford
Vesto Slipher

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Stateira II
Μέγας Αλέξανδρος

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
multiple levels
near royal palace
neglect after Persian conquest
no definitive remains found
none surviving
part of ancient wonders list
pleasure garden
recreate mountainous landscape
several centuries
some scholars question
stone
stone columns
symbol of love
taller than city walls
terraced gardens
textual descriptions only
tiered structure
vaulted terraces
visible from distance
water irrigation system
ziggurat structures

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Roxana
Siege of Gaza
Siege of Tyre
Spoke Greek
Spread of Greek culture East
Tribes in Hindu Kush
Uncertain - possibly malaria or assassination
Used his own image on coins
Wars of Alexander the Great

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
glasses
had van Gogh Post-Impressionist painting duplicate
has met Stan Lee
imitated Penntech gamma frequency database output
insecure
kind-hearted
lactose
lactose intolerant
learned that Priya is his first
on-and-off with Penny
participated in North Sea experiment simulation
patient
peanuts
quantum mechanics
role-playing conversations before Penny dates
science and Klingon phrases
science-fiction fandom
security clearance reviewed by Brandon
socially awkward
solid oxygen explosive experiment
staying overnight in IKEA
struggled asking Penny out
sweaters and button-up shirts
totaled the Volkswagen Bus once
university researcher
video gaming
won physics bowl

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
seven tablets
sky sequences
state ideology
the sky
the world

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Supports the Mesopotamian Marshes
Syria
The Bible
Threatened by damming and overuse
Turkey
Turkey Syria and Iraq have agreements
Ur
Within top 200 rivers by length
river

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Psalms
Religious text
Revelation
Samson
Sermon on the Mount
Song of Solomon
Western civilization
birth of Jesus
crucifixion of Jesus
divided kingdom of Israel
estimated 5 billion copies
history of Israel
in 1 Samuel
life of Jesus
original sin
parting of the Red Sea
prophecies of Isaiah
readings during mass
teachings of Jesus
various Christian denominations

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
legal history
lex talionis
prologue
ruler
southern Mesopotamia
standardized weights and measures
three classes in law code
unified Mesopotamia
walls of Babylon
with Mari

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1894-07-17
1966-06-20
19th
Albert Einstein
Astronomer
Belgian
Belgian Army
Big Bang Theory
Catholic Priest
Catholic University of Leuven
Charleroi, Belgium
Charles de la Vallée Poussin
Church's initial skepticism
Collège du Saint-Esprit
Cosmology
Edwin Hubble
Einstein at Solvay Conferences
Einstein's General Relativity
Expansion of the Universe
Father of the Big Bang
Francqui Prize
Fred Hoyle
French
French and English
Georges Henri Joseph Édouard Lemaître
Harvard College Observatory
Hubble Constant
Hubble's Law
International Astronomical Union
Leuven, Belgium
MIT
Mathematics
Named asteroid 1565 Lemaître
Nieces and nephews
Person
Physicist
Pope Pius XII praised his work
Primeval Atom Hypothesis
Professor
Professor at Catholic University of Leuven
Published in 1927
Saint-Servais Cemetery, Namur
Scientist
Stellar Astrophysics
Theoretical Physics
Universe from a single quantum
University of Cambridge
World War I

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1901
2.25 meters
282 laws
Akkadian language
Ancient Mesopotamia
Assyrian laws
Babylonian Empire
Babylonian society
France
French archaeological expedition
Hammurabi
Hammurabi receiving laws from sun god
Hebrew Bible
Hittite laws
Louvre Museum
Mesopotamian society
Shamash
Sumerian legal codes
Susa
Ur-Nammu code
accuser
adoption
agriculture
ancient economy
animals
awilum
basalt stele
black diorite
bride price
builders
circa 1754 BCE
civil law
codify laws
commercial law
compensation payments
contracts
criminal law
cuneiform script
daily life
death penalty
debt
different cities
different penalties for classes
diorite pillar
divorce
doctors
earliest comprehensive legal code
evidence
eye for an eye
fines

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 279.5s → outputs in runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231007
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231007/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231007/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231007/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231007/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231007/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231007/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231007/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231007/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231007/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231007
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/icl/wild/The_Big_Bang_Theory/20251029_231007
[crawler] seeded: The Big Bang Theory
[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: The Big Bang Theory

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
in conquered lands
in farming
in fertile crescent
in provinces
in various museums
international trade
iron weapons
large relief sculptures
lion hunts
metals
military prowess
modern Assyrian people
multiple conquered peoples
northern Iraq
palaces
polytheism
seals
sheep
siege warfare
stone reliefs
system of roads
temples
terror tactics
textiles
the Battle of Nineveh
through edicts
tribal groups in Aššur
winged bull statues
with Asia Minor

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
bronze tools
cattle
central Mesopotamia
centralized administration
clay tablets
conquering Sumerian city-states
cuneiform
empire
fall of Akkadian Empire
first empire in history
goats
historical region
internal rebellion
monarchy
polytheism
professional standing army
region
royal inscriptions
ruler
sheep
southern Mesopotamia
southwestern Iran
spread of Akkadian language
stone monument
territorial expansion
trade
wheat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
United Independent Broadcasters
United States
Viacom
Walter Cronkite
Westinghouse Electric Corporation
William S. Paley
cbs.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
6th century BCE
Akkadian
Assyrian Empire
Babil Governorate
Babylonia
Babylonian astronomy
Babylonian calendar
Babylonian mathematics
Babylonian religion
Bible
Bronze Age
Code of Hammurabi
Cyrus the Great
Epic of Gilgamesh
Euphrates River
Hammurabi
Hanging Gardens
Herodotus' Histories
Iraq
Iron Age
Ishtar Gate
Mesopotamia
Nabonidus
Nebuchadnezzar II
Neo-Babylonian Empire
Processional Way
Tower of Babel
ancient city
cuneiform

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1
186 cm
1973-03-24
2007-2019
2012
2017
4
6'1"
Actor
American
Bachelor of Arts
Big Bang Theory characters documentary
Blue
CBS
Critics' Choice Television Award
Distinct nasal tone
Elevator
English
Garden State
Gay
Golden Globe Award
Hidden Figures
Hollywood Walk of Fame star
Home
Houston
Human
Married
Obsessive-compulsive personality style (character)
Oh
Paul Stafford
Primetime Emmy Award
Sheldon Cooper
TCA Award
Texas
The Big Bang Theory
The Boys in the Band
The Muppets
Todd Spiewak
United States
University of Houston
University of San Diego
Voice Actor
Young Sheldon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1904-03-04
1968-08-19
64
Alexander Friedmann
Alpher–Bethe–Gamow paper
American
Boulder
Cavendish Laboratory
Colorado
Gamow factor in quantum tunneling
Gamow theory of alpha decay
George Washington University
Gravity
Hans Bethe
Kalinga Prize
Manhattan Project consultants
Mr. Tompkins series
Odessa
One Two Three... Infinity
PhD in Physics
Professor of Physics
RNA tie club
Ralph Alpher
Rho (Barbara Perkins) Gamow
Russian Empire
Rustem Igor Gamow
Soviet Union (formerly)
The Creation of the Universe
United States
University of Colorado Boulder
University of Copenhagen
University of Leningrad
World War II scientific contributions
alpha decay
astrophysics
atomic nucleus
author
big bang theory
cosmologist
from Soviet Union in 1933
genetic code
humorous popularizer of science
nuclear fission
physicist
physics
prediction of cosmic microwave background radiation
primordial nucleosynthesis
scientist
students including Ralph Alpher

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[bench] START
[bench] root_out=runs/AllParallelTest
[bench] crawler=crawler_batch_concurrency_topic.py
[bench] total_planned=12
  plan[0] domain=topic model=deepseek seed=ancient city of Babylon strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231532
  plan[1] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231532
  plan[2] domain=topic model=deepseek seed=DAX 40 Index strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231532
  plan[3] domain=topic model=deepseek seed=ancient city of Babylon strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231532
  plan[4] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231532
  plan[5] domain=topic model=deepseek seed=DAX 40 Index strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231532
  plan[6] domain=topic model=deepseek seed=ancient city of Babylon strategy=icl profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231532
  plan[7] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=icl profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231532
  plan[8] domain=topic model=deepseek seed=DAX 40 Index strategy=icl profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231532
  plan[9] domain=topic model=deepseek seed=ancient city of Babylon strategy=dont_know profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231532
  plan[10] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=dont_know profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231532
  plan[11] domain=topic model=deepseek seed=DAX 40 Index strategy=dont_know profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231532
[bench] executing with max_procs=6

[RUN 1/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231532 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 2/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231532 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 3/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231532 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 4/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231532 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 5/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231532 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 6/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231532 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 7/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231532 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 8/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231532 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 9/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231532 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 10/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231532 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 11/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231532 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 12/12] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231532 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231532
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231532
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231532
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231532
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231532
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231532
[crawler] seeded: DAX 40 Index
[crawler] seeded: DAX 40 Index
[crawler] seeded: ancient city of Babylon
[crawler] seeded: The TV Series Big Bang Theory
[crawler] seeded: The TV Series Big Bang Theory
[crawler] seeded: ancient city of Babylon
[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: DAX 40 Index

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: The TV Series Big Bang Theory

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: The TV Series Big Bang Theory

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: ancient city of Babylon

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 40 Index

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: ancient city of Babylon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[bench] START
[bench] root_out=runs/AllParallelTest
[bench] crawler=crawler_batch_concurrency_topic.py
[bench] total_planned=24
  plan[0] domain=topic model=deepseek seed=ancient city of Babylon strategy=baseline profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231551
  plan[1] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=baseline profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231551
  plan[2] domain=topic model=deepseek seed=DAX 40 Index strategy=baseline profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231551
  plan[3] domain=topic model=deepseek seed=ancient city of Babylon strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231551
  plan[4] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231551
  plan[5] domain=topic model=deepseek seed=DAX 40 Index strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231551
  plan[6] domain=topic model=deepseek seed=ancient city of Babylon strategy=calibrate profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231551
  plan[7] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=calibrate profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231551
  plan[8] domain=topic model=deepseek seed=DAX 40 Index strategy=calibrate profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231551
  plan[9] domain=topic model=deepseek seed=ancient city of Babylon strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231551
  plan[10] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231551
  plan[11] domain=topic model=deepseek seed=DAX 40 Index strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231551
[bench] executing with max_procs=6

[RUN 1/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231551 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 2/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231551 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 3/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231551 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 4/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231551 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 5/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231551 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 6/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231551 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 7/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231551 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 8/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231551 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 9/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231551 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 10/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231551 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 11/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231551 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 12/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231551 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 13/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_231551 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 14/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251029_231551 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 15/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251029_231551 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 16/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231551 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 17/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231551 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 18/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231551 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 19/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_231551 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 20/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251029_231551 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 21/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_231551 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 22/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231551 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 23/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231551 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 24/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231551 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231551
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231551
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231551
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231551
[crawler] seeded: DAX 40 Index
[crawler] seeded: The TV Series Big Bang Theory
[crawler] seeded: The TV Series Big Bang Theory
[crawler] seeded: ancient city of Babylon
[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 40 Index

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: The TV Series Big Bang Theory

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: The TV Series Big Bang Theory

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: ancient city of Babylon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231551
[crawler] seeded: DAX 40 Index
[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 40 Index

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231551
[crawler] seeded: ancient city of Babylon
[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: ancient city of Babylon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[bench] START
[bench] root_out=runs/AllParallelTest
[bench] crawler=crawler_batch_concurrency_topic.py
[bench] total_planned=24
  plan[0] domain=topic model=deepseek seed=ancient city of Babylon strategy=baseline profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231623
  plan[1] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=baseline profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231623
  plan[2] domain=topic model=deepseek seed=DAX 40 Index strategy=baseline profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231623
  plan[3] domain=topic model=deepseek seed=ancient city of Babylon strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231623
  plan[4] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231623
  plan[5] domain=topic model=deepseek seed=DAX 40 Index strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231623
  plan[6] domain=topic model=deepseek seed=ancient city of Babylon strategy=calibrate profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231623
  plan[7] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=calibrate profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231623
  plan[8] domain=topic model=deepseek seed=DAX 40 Index strategy=calibrate profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231623
  plan[9] domain=topic model=deepseek seed=ancient city of Babylon strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231623
  plan[10] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231623
  plan[11] domain=topic model=deepseek seed=DAX 40 Index strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231623
[bench] executing with max_procs=6

[RUN 1/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231623 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 2/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231623 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 3/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231623 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 4/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231623 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 5/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231623 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 6/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231623 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 7/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231623 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 8/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231623 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 9/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231623 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 10/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231623 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 11/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231623 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 12/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231623 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 13/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_231623 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 14/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251029_231623 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 15/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251029_231623 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 16/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231623 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 17/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231623 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 18/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231623 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 19/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_231623 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 20/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251029_231623 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 21/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_231623 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 22/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231623 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 23/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231623 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 24/24] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231623 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 1 --max-facts-hint 100 --max-subjects 10 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231623
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231623
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231623
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231623
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] seeded: The TV Series Big Bang Theory
[crawler] seeded: ancient city of Babylon
[crawler] seeded: DAX 40 Index
[crawler] seeded: The TV Series Big Bang Theory
[crawler] seeded: ancient city of Babylon
[crawler] seeded: DAX 40 Index
[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: ancient city of Babylon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: The TV Series Big Bang Theory

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 40 Index

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: ancient city of Babylon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 40 Index

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: The TV Series Big Bang Theory

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000 points
30 companies
40 major German companies
BASF
BMW
DAX
DAX 30
DAX 40
DAX Performance Index
DE0008469008
December 30, 1987
Deutsche Börse
Dow Jones Industrial Average
FTSE 100
Frankfurt Stock Exchange
German Aktien Performance Index families
German equity funds
Germany
July 1, 1988
SAP
STOXX Europe 600
September 2021
Siemens
Volkswagen
Xetra trading system
advanced digital trading systems
automotive
blue-chip German stocks
capital gains
chemicals
continuously during trading hours
daily trading above 50,000 shares
dividends
economic trends
financial services
global investors
health of German economy
leading German financial indicator
market capitalization and trading volume
national headlines
performance index
pharmaceuticals
quarterly reviews
stock market index
technology

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1899
2019
323 BCE
331 BCE
539 BCE
626 BCE
689 BCE
Achaemenid Empire
Akitu festival
Akkadian
Akkadian Empire
Alexander the Great
Amorites
Aramaic
Babylon
Babylon in Abrahamic texts
Babylonian captivity
Code of Hammurabi
Cyrus the Great
Enuma Elish
Esagila temple
Esarhaddon
Etemenanki ziggurat
Gate of the God
Gobryas
Hammurabi
Hanging Gardens
Hellenistic period
Herodotus visited
Imgur-Enlil
Iraq
Ishtar Gate
Ishtar Gate at site
Judaism and Christianity
Marduk
Marduk Gate
Mesopotamia
Nabonidus
Nabopolassar
Nebuchadnezzar II
Nemet-Enlil
Neo-Babylonian Empire
Pergamon Museum
Robert Koldewey
Saddam Hussein ordered rebuilding
Sennacherib of Assyria
Tower of Babel myth
alluvial plain of Mesopotamia
ancient rival city-state
astronomy advances

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: BASF

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: BMW

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 30

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 40

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX Performance Index

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Börse

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Dow Jones Industrial Average

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: FTSE 100

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Frankfurt Stock Exchange

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Germany

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: SAP

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: STOXX Europe 600

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Volkswagen

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Xetra trading system

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Siemens

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
10 Primetime Emmy Awards
12
18-22 minutes
279
Actress
Aerospace engineer
Amy Farrah Fowler
Aspiring actress
Astrophysicist
Barenaked Ladies
Bazinga catchphrase
Bernadette Rostenkowski-Wolowitz
Bill Gates
Bill Prady
Board games
CBS
Caltech
Chuck Lorre
Chuck Lorre Productions
Chuck Lorre's life experience
Clothing
Comedy
Comic relief
Elon Musk
English
Experimental physicist
Golden Globe Awards
High ratings
High-pitched voice
Highly intelligent
Howard Wolowitz
Intelligent
Jim Parsons
Johnny Galecki
Kaley Cuoco
Kunal Nayyar
Leonard Hofstadter
Living with his mother
May 16, 2019
Mayim Bialik
Melissa Rauch
Microbiologist
Multi-camera
Neil deGrasse Tyson
Neuroscientist
New Delhi, India
Obsessive
Omaha, Nebraska
Outgoing
Pasadena, California

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1899-1917
2019
60-minute hour
60-second minute
Akitu
Akkadian
Alexander the Great
Amorites
Ashurbanipal
Assyria
Assyrians
Babil
Babil Province
Babylonian captivity
Bible
Code of Hammurabi
Elam
Enuma Elish
Epic of Gilgamesh
Esagila temple
Esarhaddon
Etemenanki
Euphrates River
Hammurabi
Hanging Gardens
Hittites
Ishtar Gate
Jews exiled to Babylon
Marduk
Marduk creation myth
Mesopotamia
Nebuchadnezzar II
Neo-Babylonian Empire
Persians
Robert Koldewey
Sennacherib
Tower of Babel
Tower of Babel story
World Heritage Site
about 200,000 people
about 85 kilometers
after Persian conquest
agriculture
ancient city
archers
arid
awilum
barley
base-60 number system
blue glazed bricks

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
10
1000 points
40
9:00 AM to 5:30 PM CET
Adidas
Airbus
Allianz
BASF
BMW
Bayer
Brenntag
Continental
Covestro
DAX
DAX 30 Index
DAX indices
DE0008469008
Daimler Truck
Delivery Hero
Deutsche Bank
Deutsche Börse
Deutsche Post
Deutsche Telekom
Deutscher Aktienindex 40
E.ON
ETFs
Eurex
Euro
European Securities and Markets Authority
Frankfurt Stock Exchange
Fresenius
Fresenius Medical Care
German economy
German stock market
Germany
Heidelberg Materials
HelloFresh
Henkel
Infineon
July 1, 1988
MDAX
MTU Aero Engines
Mercedes-Benz Group
Merck
Munich Re
Porsche
Prime Standard segment
Puma
Qiagen
RWE

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
100
40 major German companies
9:00 AM to 5:30 PM CET
DAX
DAX index family
December 30, 1987
Deutsche Börse
Deutsche Börse AG
Deutsche Börse supervisory board
Deutscher Aktienindex
Euro
Frankfurt Stock Exchange
Germany
July 1, 1988
diverse sectors of the German economy
free-float market capitalization
high trading volume turnover
market process outside day clear indexes
stock market index
total return index with reinvested dividends

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
base-60 number system
blue glazed bricks
circa 1000 CE
circa 1792-1750 BCE
circa 605-562 BCE
circa 728-627 BCE
city
city straddled Euphrates River
codified laws
controlled trade routes
creation myth
cuneiform script
cuneiform tablets
damaged in modern conflicts
date palms and grains
desertion began
destroyed city and temple
double walls
enuma anu enlil tablets
for religious and civil dates
included in World Heritage List
irrigation and transport
lunisolar system
over 200,000 people
periods of conflict
planned streets and districts
polytheistic
priestesses and traders
records of administration
serpent-dragon
site of exile
strong army
surrounding water
third millennium BCE
time and angles
trade hub
zodiac

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Penny
Pharmaceutical researcher
Pharmaceutical sales representative
Rajesh Koothrappali
Rock Paper Scissors Lizard Spock
Romantic
Selective mutism around women
September 24, 2007
Sheldon Cooper
Sheldon Nobel prize win
Sheldon and Leonard's apartment
Shelly
Shy
Simon Helberg
Sitcom
Socially awkward
Soft Kitty song
Stan Lee
Stephen Hawking
Steven Molaro
Sweet but tough
TV Series
TV-PG
The Big Bang Theory
The Classified Materials Turbulence
The History of Everything
The Launch Acceleration
The Pilot
Theoretical physicist
United States
Waitress
Warner Bros. Studios, Burbank
Warner Bros. Television
Warner Bros. Television Distribution
Womanizer
Young Sheldon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
2017
279
Adam West
Alfred Hofstadter
Amy Farrah Fowler
Anu
Barry Kripke
Bernadette Rostenkowski-Wolowitz
Bernadette Rostenkowski-Wolowitz played by Melissa Rauch
Bernadette and Howard's house
Beverly Hofstadter
Bill Gates
Bill Nye
Bill Prady
Bob Newhart
Brent Spiner
Brian Posehn
Burt Ward
Buzz Aldrin
CBS
Caltech
Carrie Fisher
Christine Baranski
Chuck Lorre
Courtney Henggeler
Critics' Choice Television Award
Elon Musk
Emily
GLAAD Media Award
Gates McFadden
George Takei
Golden Globe Award
Howard Wolowitz
Howard Wolowitz played by Simon Helberg
Howard's house
James Earl Jones
Jim Parsons
John Ross Bowie
Johnny Galecki
Judy Greer
Julie Newmar
Kaley Cuoco
Kate Micucci
Kathy Bates
Kevin Smith
Kevin Sussman
Kunal Nayyar
Laurie Metcalf
LeVar Burton

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
100 units
143 billion euros
1916
320i
BMW Group
BMW IIIa
BMW M Power racing authority
BMW Motorrad Motorsport
Bavarian flag colors
Bayerische Flugzeugwerke AG
Freude am Fahren
Germany
Glas company
Gustav Otto
K1600
Karl Rapp
MINI
Mercedes-Benz
Motorrad
Munich
Murat Günak iNurture
Neue Klasse
Oliver Zipse
R1250GS
R32
Rolls-Royce Motor Cars
Spartanburg USA
X3 xDrive30i
aircraft engine manufacturer
automobile manufacturer
automotive
bmw.com
high-performance vehicles
i series
i3
i7 xDrive60
iX
iX5 Hydrogen
includes C evolution
motorcycle production
motorcycles
over 150,000
over 2.5 million vehicles
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
built by Nebuchadnezzar II
by 2nd century CE
canals from Euphrates
cattle
chariots
circa 1754 BCE
class-based society
codified laws
contract-based
could marry free persons
could own property
could run businesses
cuneiform
damage from reconstruction
dates
decorated with lions
dedicated to Marduk
developed horoscopes
developed zodiac
diagnosis by symptoms
diorite stele
double walls
dragons and bulls
eye for an eye
for his wife Amytis
glazed brick decoration
goats
grain
herbal remedies
in 19th century
lunisolar calendar
military base construction
moat outside walls
modern-day Iraq
mud-brick construction
mushkenum
northern citadel
one of Seven Wonders
over 10 square kilometers
precious metals
scribal schools
sheep
ships on Euphrates
spearmen
textiles
trade
treaties with neighbors
under Seleucid Empire
wardum
wheat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Achaemenid Empire

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Akitu festival

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Akkadian Empire

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Alexander the Great

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Babylon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Babylonian captivity

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Code of Hammurabi

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Cyrus the Great

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Amorites

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Esagila temple

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Etemenanki ziggurat

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Esarhaddon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Enuma Elish

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Gate of the God

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Gobryas

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hammurabi

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hanging Gardens

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Imgur-Enlil

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Iraq

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Ishtar Gate

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
111,000 in 2023
1865
Advanced Fluids chemicals for electrocars
Agricultural Solutions
BAS
BASF Coatings
Badische Anilin- und Soda-Fabrik
CD player laser development
Chemical company
Chemicals
Frankfurt Stock Exchange
Friedrich Engelhorn
German-company
Haber-Bosch process support
Industrial Solutions
Ludwigshafen, Germany
Mannheim, Germany
Materials
Multinational corporation
Nutrition and Care
Oil and Gas
Performance Products
Plastics
Styropor
Surface Technologies
We create chemistry
Wintershall Dea
automotive paints
carbon neutral by 2050
catalytic converters for automobiles
chemical weaponry production in WWII
more than 390 production sites worldwide
nanomaterials for sunscreen products
organized Verbund site in Ludwigshafen
over 68 billion euros in 2023
pharmaceutical ingredients
polyurethane materials
presence in over 90 countries
synthetic dyes
therapeutic antibodies
vitamins
world's largest chemical producer
www.basf.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Rheinmetall
SAP
SDAX
Sartorius
September 20, 2021
Siemens
Siemens Energy
Siemens Healthineers
Symrise
TecDAX
Volkswagen
Vonovia
Xtrackers DAX UCITS ETF
Zalando
at least 10 percent
automotive
based on Xetra trading system
chemicals
deutsche-boerse.com
dividends
economic events
economists
every second
finance
follows EU benchmarks regulation
free-float market capitalization
fund managers
futures
generally positive long-term
global markets
growing
healthcare
high
iShares Core DAX UCITS ETF
increasingly considered
index funds
investors
market capitalization
mergers
moderate to high
one of the major European indices
options
over 1 trillion euros
over 18000 points
performance index
political events
quarterly
real-time
significant during financial crises
stock market index

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
3 January 1984
8am4.30pm London Times
Bloomberg
British pound sterling
December 1975
FTSE 250
FTSE Russell
FTSE UK Index Series
Financial Conduct Authority
Financial Times Stock Exchange 100 Index
London Stock Exchange
London Stock Exchange Group
UK economy gauge
UK listed companies
UK stock market barometer
UKX
United Kingdom
United Kingdom listing place companies
capitalisation adjustments balance
electronically weighted free float market capitalizations
largest companies by market capitalization
passive index funds
performance of top 100 companies
points
quarterly
real-time
stock market index
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: 10 Primetime Emmy Awards

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Amy Farrah Fowler

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Barenaked Ladies

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bernadette Rostenkowski-Wolowitz

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bill Gates

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bill Prady

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: CBS

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Caltech

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Chuck Lorre Productions

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Elon Musk

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Golden Globe Awards

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Jim Parsons

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Kaley Cuoco

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Chuck Lorre

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Kunal Nayyar

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Leonard Hofstadter

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Johnny Galecki

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Howard Wolowitz

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Melissa Rauch

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Mayim Bialik

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1997
200 firms
BaFin
Boerse Stuttgart
Central European Time
Clearstream
DAX Index
Deutsche Börse AG
Deutsche Börse Group
Deutsche Börse systems operations
ESMA
Eurex
Eurex Clearing
European Union regulations
Exchange Stocks tax specifics of handling
FIX/FAST protocol
Frankfurt
Frankfurt Stock Exchange
German equities
German securities registers (e.g., WKN)
Germany
ISIN
T+2
T7 trading system software
Wiener Börse
XETR
Xetra orders workflow as logical package
auction algorithm
auction-based opening
banks
certificates
continuous auction model
continuous auctioning
datafeed services
electronic trading platform
exchange traded funds
floor trading initially
fully electronic
global technology boards like NASDAQ OMX
high transparency
iNAV as ETF’s sell-side
intermediaries like comdirect Bank
jurisdiction of Federal Republic of Germany
majority of trading vs regional exchanges
nearly 100% uptime
order-driven market
organized market
over 90%
post-trade balance of contracts
price discovery mechanism

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Leonard Hofstadter
Leonard Hofstadter played by Johnny Galecki
Leonard Nimoy
Leonard and Penny's apartment
Leslie Winkle
Lucy
Mark Hamill
Mary Cooper
May 16, 2019
Mayim Bialik
Melissa Rauch
Mrs. Wolowitz
NAACP Image Award
Neil deGrasse Tyson
Pasadena, California
Penny
Penny played by Kaley Cuoco
Penny's apartment
People's Choice Award
President Siebert
Primetime Emmy Award
Priya Koothrappali
Raj Koothrappali
Raj Koothrappali played by Kunal Nayyar
Raj's apartment
Riki Lindhome
Sara Gilbert
Satellite Award
September 24, 2007
Sheldon Cooper
Sheldon Cooper played by Jim Parsons
Sheldon and Amy's apartment
Sheldon and Leonard's apartment
Simon Helberg
Stan Lee
Stanley Tucci
Stephen Hawking
Stuart Bloom
TCA Award
Teen Choice Award
Texas
The Cheesecake Factory
University cafeteria
Wil Wheaton
William Shatner
Young Artist Award
Young Sheldon
astrophysicist
career challenges
childhood

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12th largest
1585
1843
24
3rd largest
5:30 PM
75F5+WV Frankfurt
9:00 AM
BaFin
Börse Frankfurt
Börsenplatz
Börsenplatz 4
CET
Clearstream
DAX
DE
Deutsche Börse
Deutsche Börse Group
EU regulations
Frankfurt
Frankfurt Stock Exchange Index
Frankfurter Wertpapierbörse
General Standard
German reunification
Germany
MDAX
Monday to Friday
Neue Börse
Prime Standard
SDAX
Stock exchange
TecDAX
XFRA
Xetra
Xetra launch in 1997
bonds
certificates
closed during WWII
continuous trading
derivatives
electronic trading
euro-denominated trading
eurozone adoption
exchange-traded funds
financial statements
floor trading
for educational groups by arrangement
institutional investors
listed companies' securities trading supported efficiently
market capitalization

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
17 European countries
1998
1998-02-26
2000
2008
600 stocks
Bloomberg
Deutsche Boerse
Deutsche Boerse Group
Dow Jones STOXX 600
ESMA
Euro
Euronext integration attempts
Europe
European 600
European equities
European equity index
FTSE Eurofirst 300
Qontigo
STOXX
STOXX Ltd.
SXXP
SXXP in finance apps
active since 1998
all major industries
available in US dollars
based on size and liquidity
benchmark creation by STOXX
competition from MSCI Europe
comprehensive European equity representation
constituent companies number 600
covers diversified large-cap companies
covers majority of European market capitalization
daily index levels reported
documentation available on Qontigo site
equity investments
exchange-traded funds
flexible based on market changes
for European equity performance
for fund management and derivatives
founded by European exchanges alliance
free-float market capitalization
futures and options
includes gross or net versions
includes large European nations
includes sectoral indices
index composition reviewed regularly
index itself has no employees
investment performance benchmark
licensed to many financial firms

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1937
1938
2015
2019
279.2 billion euros
Asia
Audi
Bentley
British Army
Brussels
Bugatti
Cariad
Chattanooga
Das Auto
Ducati
Europe
FIA World Rally Championship
Ferdinand Porsche
Germany
Golf GTE
Herbert Diess
Herbie movies
Herbie the Love Bug
ID. Buzz
ID.3
ID.4
Ivan Hirst
Kraft durch Freude
Käfer
Lamborghini
Nazi Germany
New Auto
North America
Oliver Blume
Porsche
Puebla Plant
SEAT
Transporter
Type 1
VOW3
Volkswagen
Volkswagen Beetle
Volkswagen Caddy
Volkswagen Golf
Volkswagen Jetta
Volkswagen Motorsport
Volkswagen Passat
Volkswagen Passenger Cars
Volkswagen Polo
Volkswagen Tiguan

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
18591.93 in March 2020
1929
1930s SEC involvement and Glass-Steagall
2 million shares less
2007-2009 financial crisis short period
2015
24.39 percent on October 19, 1987
30
36952.65 points in January 2024
381.17 points
40.94 points
81.7 percent in 1935
9.5 percent
941 days from 1998 through 2001
AT&T Corporation in 1916
AT&T no utility period
Alcoa Aluminum fabrication
Charles Dow
Coca-Cola in 1987
DJIA
Dow Jones & Company
Dow Jones Transportation Average
Dow Theory market trading use
Edward Jones
General Electric for over 110 years
Great Depression
JP Morgan Chase predecessor
March 29, 1999
May 26, 1896
May 6, 2010
Microsoft in 1999
Nasdaq
New York Stock Exchange
News Corp
S&P 500
SPDR Dow Jones Industrial Average ETF
The Wall Street Journal
WWI US market strength
^DJI
continuous trading except breaks exchanges authorized
electronic data feeds
first half twentieth century slightly probable
in 2008 financial crisis
includes venture capital and startup changes
industrial
irregular intervals
less than half million shares combined
more tech heavy company weighting
on Chicago Mercantile Exchange

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+49
.de
16
2962 meters
357022 square kilometers
Adidas
Adolf Hitler
Albert Einstein
Albrecht Dürer
Audi
Austria
Autobahn
BMW
Baden-Württemberg
Bavaria
Belgium
Berlin
Black Forest Cake
Black Red Gold
Bosch
Brandenburg Gate
Bratwurst
Caspar David Friedrich
Central European Time
Christianity
Christmas
Cologne Cathedral
Czech Republic
Denmark
Deutsche Bahn
Deutschlandlied
Eagle
Euro
Europe
European Union
Fall of the Berlin Wall
France
Frank-Walter Steinmeier
Friedrich Nietzsche
Friedrich Schiller
Georg Wilhelm Friedrich Hegel
German
German Unity Day
German national football team
Gottlieb Daimler
Gymnasium
Immanuel Kant
January 18 1871
Johann Sebastian Bach
Johann Wolfgang von Goethe

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000 points
1163.52
18608 pts
2023 June
25%
3 companies
30 major German companies
75%
Allianz
Bloomberg
DAX
Deutsche Bank
Deutsche Börse
Deutsche Telekom
Deutscher Aktienindex
Frankfurt
Frankfurt Stock Exchange
German govt
Germany
Germany stock leaders
Hang Seng
July 1, 1988
Linde
MDAX
SAP
SDAX
SEC equivalent
Siemens
TecDAX
XXA
Xetra
around 20
automotive
avoided
chemicals
compliant EU
dispersed
energy
finance
foreign investors
free float market cap
high
left out
legal are chosen
market capitalization
no
paid by ER
pharmaceuticals
points
separate index

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1972
1973
2010
ABAP
Ariba
Christian Klein
Claus Wellenreuther
Concur
Dietmar Hopp
Frankfurt Stock Exchange
GDPR compliant
Germany
Hans-Werner Hector
Hasso Plattner
IBM
ISO 27001
Klaus Tschira
Microsoft
Oracle
Qualtrics
SAP
SAP AI
SAP Analytics Cloud
SAP Ariba
SAP Autism at Work
SAP Blockchain
SAP Business Technology Platform
SAP Certification
SAP Cloud Platform
SAP Community
SAP Concur
SAP Customer Relationship Management
SAP ERP
SAP Fiori
SAP GUI
SAP HANA
SAP High Availability
SAP Identity Management
SAP Integrated Business Planning
SAP Learning Hub
SAP Leonardo
SAP Machine Learning
SAP NetWeaver
SAP PartnerEdge
SAP Qualtrics
SAP R/1
SAP Research
SAP S/4HANA
SAP Social Sabbatical
SAP SuccessFactors

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Babylon
Babylonian religion
German archaeologists
King Esarhaddon
King Hammurabi
Marduk
Xerxes I's reprisals
a larger temple complex
ancient Mesopotamian temple
astronomical observations
cedar wood
daily offerings
gold and precious stones
its ruins in the 19th century
military conflicts
minor deities
multiple gateways
pilgrims from across Mesopotamia
political inaugurations
ritual processions
state ceremonies
temple revenues
the Achaemenid ruler Xerxes I
the Babylonian New Year festival
the Christian era
the Enuma Elish creation epic
the Euphrates River periodically
the Seleucid king Antiochus I
the administrative heart of Babylon
the cult of Marduk
the fall of the Assyrian Empire
the god Marduk
the house that lifts its head
the oldest temples in Babylon
the ziggurat Etemenanki
within the city walls

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1993
8000 people
8:00–9:00 CET
BaFin
Budapest
Börse Frankfurt building
Clearstream
DAX
DB1
Deutsche Börse Systems
Deutsche Börse Venture Network
Eurex
Eurex Clearing
Eurex Clearing margining
Euronext
European Energy Exchange
European derivatives
FISD
Financial services
Frankfurt
Frankfurt Stock Exchange
General Standard
German Landesbanks
German equities
Germany
Germany's first electronic bond exchange
Karl-Heinz Flöther
Large Cap
London Stock Exchange Group
MDAX
Prime Standard
Qontigo
SDAX
STOXX indices
T7 trading architecture
TecDAX
Theodor Weimer
Wien
Xetra
Xetra trading technology
at Clearstream
at Eurex Clearing
auction
bonds
by 2030
central banks
clearing
clearing fees
commodities
continuous trading

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Akitu

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Akkadian

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Alexander the Great

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Amorites

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Ashurbanipal

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Assyria

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Assyrians

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Babil

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Babil Province

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Babylonian captivity

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bible

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Elam

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Code of Hammurabi

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Enuma Elish

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Epic of Gilgamesh

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Esagila temple

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Etemenanki

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Euphrates River

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hammurabi

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Esarhaddon

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1318 BCE
1329 BCE
58th
Adad-nirari I
Arik-den-ili
Ashur
Assur
Assyrian king
Babylon or Hatti envoys
Ishtar Temple
Middle period
Mitanni borders
Near Eastern chronology societies
Synchronistic History text
Zab rivers
agricultural administration
city walls
dug temple foundation trenches
expansion era
hereditary monarchy
middle Assyrian
mountain peoples times raids
named for the god Enlil
near palace tombs
queen’s tomb
substantial Assyrian territorial gain
tablets from Kanesh merchant
tribute paying landowners
upper Mesopotamia

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
stock splits
technology
trading volume
under 1000 points
varies
with other European indices
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
16085 points on March 8, 2021
16290.19 points on March 9, 2021
1988
357.62 points on January 25, 1988
379.49 points on January 6, 1989
40
9:00 AM to 5:30 PM CET
Adidas AG
Allianz SE
BASF SE
BMW AG
Bayer AG
Continental AG
Covestro AG
December 30, 1987
Deutsche Bank AG
Deutsche Börse
Deutsche Lufthansa AG
Deutscher Aktienindex
Frankfurt Stock Exchange
Fresenius SE & Co. KGaA
German Federal Financial Supervisory Authority
German Securities Trading Act
German public holidays
Germany
HeidelbergCement AG
Henkel AG & Co. KGaA
Infineon Technologies AG
July 1, 1988
Linde AG
MDAX
Merck KGaA
Porsche AG
SAP SE
SDAX
STOXX Limited
Siemens AG
TecDAX
Volkswagen
Xetra electronic trading system
based on quarterly reviews
boerse.de
chemicals
free float market capitalization weighting
included in index performance
index
largest 40 German companies
minimum trading volume
multiplied by 0.01 for target value

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1847
2006 scandal
2008 for bribery
ABB
CD-adapco in 2016
COFDM technology components
Camstar in 2014
Charlottenburg factory in 1872
DAX index
Digital Industries
EURO STOXX 50
European rail networks
Frankfurt Stock Exchange
General Electric
Germany
Honeywell
ICE trains Deutsche Bahn
Indo-European telegraph line
Ingenuity for Life
Ingenuity in 2023
Jim Hagemann Snabe
London Underground
Mentor Graphics in 2017
MindSphere IoT platform
Mobility
Munich, Germany
Paris Air Show for aerospace
Philips
Roland Busch
SIE
SIEGY over-the-counter
Schneider Electric
Siemens
Siemens & Halske
Siemens & Halske in 1847
Siemens & Halske originally
Siemens AG
Siemens Dynadoc
Siemens Energy
Siemens Financial Services
Siemens Healthineers
Siemens Healthineers in 2018
Siemens NX
Siemens PLM software
Siemens S7 PLCs
Siemens TIA Portal
Siemens Teamcenter
Siemens bribery case of 2006
Siemens star logo
Siemens-Schuckertwerke in 1966

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
-12.24%
.GDAXI
1 July 1988
1,000 points
10%
10.83%
12 March 2003
13 October 2008
15 July 1993
16 March 2015
16 October 1989
18,352 points
18,455 points
2024
31 December 1987
372.30 points
40
9:00 to 17:30 CET
BaFin
Bloomberg
Börsen-Zeitung
CDAX
DAX
DAX 30
DAX Index
DAX Volatility Index
DAX price index
DE0008469008
December
Deutsche Börse
Deutsche Börse AG
Deutscher Aktienindex Performance Index
Euro
European Union
FDAX
FactSet
Frankfurt Stock Exchange
German equity funds
Germany
June
Laspeyres formula
MDAX
March
ODAX
Reuters
SAP SE
SDAX
September
September 2021
TecDAX

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
20th century
6th century BC
91 meters
Alexander the Great
Alexander's era
Babylon
Babylonian New Year festival
Esagila complex
Herodotus
Iraq
Marduk
Nebuchadnezzar II
Neo-Babylonian Empire
Sargon of Akkad
Tell Babil mound
Tower of Babel story
Xerxes I
ancient structure
found in tablets
from remote regions
glazed bricks
god Marduk
in present day
mud bricks
multiple lines of fit
near it
of Babylon
records on tablets
religious structure
remain units
seven
temple
temple tower
true
ziggurat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Adidas

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Airbus

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Allianz

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: BASF

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: BMW

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bayer

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Brenntag

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Continental

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Covestro

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 30 Index

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Daimler Truck

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Delivery Hero

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Bank

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Börse

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Post

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutscher Aktienindex 40

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: E.ON

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Telekom

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Eurex

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
6th century BCE
Amytis of Media
Ancient Marvel
Ancient Wonder
Approximately 75 feet
Archimedes Screw
Artificial Mountain
Babylon
Baked Brick
Berossus
Built by Sennacherib
Chain Pump
Conducted at Babylon
Debated by Historians
Demonstrate Royal Power
Destroyed
Diodorus Siculus
Earthquake
Euphrates River
Euphrates River Bank
Exotic Trees
Flowers
From Greek Texts
Greek Historians
Green and Lush
Later Garden Design
Lead Sheets
Literary Works
Median Garden Design
Multi-Level Terraces
Nebuchadnezzar II
Neo-Babylonian Empire
Nineveh
No Physical Remains Found
Reed and Asphalt
Remind Amytis of Her Homeland
Renaissance Paintings
Robert Koldewey
Roof Garden
Royal Palace
Seven Wonders of the Ancient World
Square
Stone Pillars
Stone Slabs
Strabo
Sufficient for Large Trees
Symbol of Babylonian Engineering
Terraced Garden
Uncertain
Vines

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
530 BCE
550 BCE
600-530 BCE
Achaemenid Empire
Achaemenid dynasty
Achaemenid emperor
Ahura Mazda
Anshan
Aramaic language
Babylon
Bactria
Cambyses I
Cambyses II
Caucasus
Cyrus Cylinder
Herodotus
Isaiah
Jaxartes
King of Kings
Kūruš
Lydia
Mandane of Media
Massagetae
Median Empire
Median king Astyages
Old Testament
Opis
Pasargadae
Pasargadae tomb
Persian tribes
Queen Tomyris
Scythians tribes
Temple in Jerusalem
Xenophon
across empire
administration system
ambitions review
by diverse peoples
combined customs
defeated leaders
for connections
humane rule
in conquered areas
later generations
like Alexander
marriage alliances
paternalistic manner
religious tolerance
return of Jewish exiles
son successor

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1988
1990s
1990s Canadian rock
1996
Be My Yoko Ono
Big Bang Theory opening
Big Bang Theory theme
Boat Cruise Shows
Buck Naked
CBC Radio
Canada
Canadian band
Desperation Records
Ed Robertson
Gordon
If I Had $1000000
Jim Creeggan
Juno Awards
Kevin Hearn
Lovers in a Dangerous Time
Michael Phillip Wojewoda
One Week
Reprise Records
Rock Spectacle
Sarah McLachlan
Steven Page
Stunt
Toronto
Tyler Stewart
United States
War Child Canada
acoustic music
alternative rock
energetic shows
environmental activism
humorous choice
humorous lyrics
no actual nudity intended
pop rock

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Volkswagen Touareg
Volkswagen Up
Volkswagen XL1
West Germany
Wolfsburg
Wolfsburg Plant
Zwickau Plant
car manufacturer
commercial vehicles
debuted in 1974
electric vehicles
emissions scandal
fully electric fleet by 2015
future
installing defeat devices
internal combustion engines
main goal
off-vehicle DesignStudiosExamineOptimismLogicandFineEyeArtProcessingStyleMarketingDesignCenterLocationOffloadedPartnerFactoryMediaDisagreementsMannicreatedOriginWeightsUseSettlementAutomationVentureGuiderEasierLearningPrehistoryDirectImmersionNavyHealthMetricsDevelopmentViewtoneBaseLineContextorFormabilityListOrManyStyleEngageUninteractionAutoTypeFinalEditOptionsGroupsThenSelfTechnicalPostCheckReviewMediumHelpRunCalcuatorStandApplyMajorDevelopmentGraphVideoSpaceUserVirtualOverProductionIdentifyPositionStatementCoreSequenceTransferModelTradeDirectControlOverallAgreementCheckDesignerProcessDevelopActualCloserBrowsReviewSolveTermInitSelectMainContextTrustScienceProductTeamAssignOutViewDevelopmentScoreStanceCargoBillingPublishInstallGenerateEditorVoiceEstablishAgentKnowledgeFlowExpandPlanAssetPurposeLogTypeWordEngineProductionMatrixDevelopArchNoStaticExample
over 600000
people's car
research and development
sustainability
van
vehicles globally
yes
Škoda Auto

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Akkadian texts
Amarna letters
Amorite language
Amurru
Amurru land
Ancient Semitic people
Ashera
Ashur
Assyria
Assyrians
Babylon
Bronze Age
Code of Hammurabi
Dagan
Eshnunna
Hammurabi
Hittites
Kassites
Larsa
MAR.TU
Mari
Shamshi-Adad I
Sumerian sculpture
Sumerian texts
Sumerians
Sumu-abum
Syrian Desert region
Ugaritic tablets
West Semitic
Zimri-Lim
Zimri-Lim of Mari
annals of Assyrian kings
circa 2000-1600 BCE
cultivation of grains
cuneiform
during Middle Kingdom
god Amurru
inhabitants of Canaan
late Bronze Age
mudbrick ziggurats
raising sheep and goats
trade of goods
troops with chariots
with Hittites

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1754 BCE
1901 CE
282 Statements
A Basalt Relief of Hammurabi
A Stele of Diorite
Adultery
Akkadian Language
An Eye for an Eye
Ancient Babylonia
Assistance of Gods
Assyriologists and Historians
Codification
Concept of Divine Law
Court Evidence
Cuneiform Writing
Damage Costs Fails
Enlightened Monarchy Exercise
Farmers
Future Rulers
Guillaume-Joseph de Morgan
Hammurabi
If-Then Structures
Inheritance
Justice and Order
King-Appointed Judges
Known Human Laws
Labor and Wages
Law-Abiding Legal Code
Laws from God Shamash
Lex Talionis
Loan Agreements
Louvre Museum
Marriage
Marriage Law
Merchants
Mesopotamian Writing Preservation
Most Cities under Babylonian Control
Old Babylonian Period
Physicians
Property Damage
Property Theft
Reprisal Conditions
Slander
Slave Trade
Social Status of Persons
Susa in Iran
Warfare and Climate
Western Legal Corpus
Written Laws

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Akkadian name
Babylon in texts
C/Conjunctions
Mesopotamian festival
abundance
among cities
ancient Mesopotamia
annually
as Babylonian high priests
at the beginning of the year
by the king and priests
cosmic order
cyclic regeneration of nature
divine favor
during celebrations
eleven days
feasting
for public announcements
for worshippers
from deities
grand banquets
in Babylonia
in Sumer
in importance by Persian conquests
in spring
in the Akitu house
into the Neo-Babylonian period
later New Year celebrations
liturgical dramas
multiple yearly occurrences in some cities
pilgrims from far lands
political significance
processions
reading of the creation epic
religious festival
rituals
royal humility
sacrifices
social cohesion
the agricultural new year
the festival
the king before Marduk
the king from palace to temple
the king's divine mandate
the renewal of kingship
the sacred marriage ceremony
the victory of Marduk over Tiamat
to Marduk
to the 3rd millennium BCE
to the god Anu

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1990s
1998
21st century
American
CBS
Chuck Lorre
Dharma & Greg
Dream On
EDLIN
Ellicott City
Emmy Award
English
Gilmore Girls
Jewish
Jim Parsons
Johnny Galecki
June 7, 1960
Kaley Cuoco
Leonard Hofstadter
Los Angeles
Maryland
Nerdist Podcast
Penny
Primetime Emmy Award
Rebecca Herscher
Sheldon Cooper
Television Critics Association Award
The Big Bang Theory
Twitter
University of Maryland
Warner Bros. Television
billprady.com
co-creating The Big Bang Theory
collaborative
comedy
computer programmer
executive producer
journalism
male
moderate
person
producer
reading
scientists
showrunner
television
television writer
two daughters
writing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
medieval trade fairs
over 1 trillion euros
over 760
peak trading volumes
retail investors
stocks
transaction fees
used to open trading daily
warrants

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
price volatility interruptions stopping dramatic dip
public equities traded hand-in-to-Boerse
submission to unaff company registrar
trading without floor brokers
warrants

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
comedy
comic book store owner
coming of age
drama
education
engineer
everyday life
family
family dynamics
friendship
geek culture
genius
intellectualism
microbiologist
neuroscientist
personal growth
pharmaceutical sales representative
physicist
present
romance
science
sitcom
social awkwardness
television series
waitress

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
moderate for investors
no direct funding raised
on Eurex
originated from STOXX Ltd.
oversight by Deutsche Boerse
part of Deutsche Boerse group evolution
popular on financial sites
price return index
provided on websites like Investing.com
quarterly
stable European benchmark
stock market index
stoxx.com
supported by Deutsche Boerse Group
susceptible to market downturns
trillions of Euros
used in risk models
using chain-linking methodology
varies periodically
vital for portfolio managers
widely recognized benchmark

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
only stock prices matter to index
over 214.57 percent
post-Bretton Woods system suspension 1970s
regular changes for stock splits
since 1970 advent
stock market index
stock splits, mergers, splits influence divisor
the Dow
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1979-10-13
2003
2007
2008
2009
2011
2015
2017
2019
Actress
American
Bernadette Rostenkowski-Wolowitz
Bob's Burgers
Comedian
Comedy
Critics' Choice Television Award
Drama
Family Guy
Intelligent and witty
Kath & Kim
Madison, New Jersey
Marist High School
Married
Marymount Manhattan College
Microbiologist at a major lab
Multiple voice-acting specials
NCIS
Network TV
No
One daughter
Part of cast using awards yearly
Robot Chicken
Screen Actors Guild Award
Streaming platforms
The Big Bang Theory
The Bronze
The Hot Flashes
The Laundromat
The Office
The Simpsons
Theatre Arts
Tina on True Blood
True Blood
Winston Rauch
Writer
Yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1891
3:1
A world-class, private research university
Division of Biology and Biological Engineering
Division of Chemistry and Chemical Engineering
Division of Engineering and Applied Science
Division of Geological and Planetary Sciences
Division of Humanities and Social Sciences
Division of Physics, Mathematics and Astronomy
Jet Propulsion Laboratory (JPL)
Pasadena, California
The truth shall make you free
Throop University
around 2200 students
billions of dollars
low
research excellence
science and engineering education
small
university
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Akitu festival
Akkadian
Akkadian classics
Al Hillah
Alexander the Great
Amorite period
Assyrian rule
Babylonia
Babylonian Chronicles
Babylonian Empire
Babylonian calendar
Babylonian captivity
Babylonian cultures
Babylonian law
Babylonians inhabitants
Belshazzar
Bible
Biblical archaeology
Code of Hammurabi
Cyrus the Great
Elam
Epic of Gilgamesh elements
Esagila
Euphrates River
Hammurabi
Hammurabi's Code
Hammurabi's empire
Hanging Gardens
Hittites
Iraq
Ishtar Gate
Judean exiles
Kassite invasion
Lion of Babylon
Marduk deity
Mesopotamia
Nebuchadnezzar II
Neo-Babylonian period
Persians
Sasanian era crisis
Silk Road routes
Tower of Babel
ancient Greek texts
ancient city
ancient warfare consequences
archaeological preservation
biblical archaeology
celestial observation records
cuneiform
cuneiform tablets

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Karl Benz
Lake Constance
Ludwig van Beethoven
Lufthansa
Luxembourg
Max Planck
Mercedes-Benz
NATO
Netherlands
Neuschwanstein Castle
North Rhine-Westphalia
October 3
October 3 1990
Oktoberfest
Olaf Scholz
Otto von Bismarck
Poland
Porsche
Pretzels
Protestant
Prussia
Reichstag building
Rhine River
Roman Catholic
SAP
Sauerkraut
Siemens
Switzerland
United Nations
Volkswagen
Werner Heisenberg
Wolfgang Amadeus Mozart
World Cup winner
World War II
Zugspitze
approximately 1230 kilometers
approximately 4.5 trillion USD
approximately 83 million
around 5 percent
automotive
beer
chemicals
civil law
country
electronics
federal republic
football
largest in Europe
machinery
no general speed limit

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1997
ABC
Allison Janney via Mom
American television audiences
Anna Faris via Mom
Billy Gardell via Mike Molly
Bob ♥ Abishola
Bookie
CBS
Chuck Lorre
Debbie Allen
Dharma Greg
Eddie Gorodetsky
Emmy Awards nominations
James Burrows
Los Angeles, California
Mike Molly
Mom
Prism Awards
Producers Guild of America Awards
Production Company
Stage 26 occupied prime series
Super Clyde unaired pilot
The Big Bang Theory
The Kominsky Method
Two and a Half Men
United States
WB Network
Warner Bros Television
Writers Guild of America West
Young Sheldon
bureau of associates showrunners
creating successful sitcoms
featuring sitcoms with signature humor
filmed in front live audience
large network series regular orders
longterm partnership with Warner Bros Television
most projects developed by Chuck Lorre
often about family lives relationships
primarily for broadcast television
runtime production logo with written messages
series syndication deals
startet producing with midseason shorts
strong publicity around continuity themes
studio lots like Warner Bros Studios
television production distribution
traditional live audience sitcom filming
very profitable
warner lot Stage 

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2 Chronicles
2 Kings
587 BCE
597 BCE
70 years of desolation
Achaemenid Empire
Aramaic adoption
Assyrian captivity of Israel
Babylon
Babylonia
Babylonian Chronicles
Babylonian cuneiform
Babylonian exile
Book of Daniel
Book of Ezekiel
Chaldean dynasty
Cyrus Cylinder
Cyrus the Great
Edict of Cyrus
Ezekiel
First Temple period
Hebrew Bible
Jehoiachin
Jehoiachin Rations Tablets
Jeremiah
Jerusalem
Jewish community in Babylon
Jewish history
Judaism
Judeans
Kingdom of Judah
Lachish letters
Marduk
Nebuchadnezzar II
Neo-Babylonian Empire
Second Temple period
Tisha B'Av
Zedekiah
Zerubbabel
alliance with Egypt
approximately 70 years
around 538 BCE
around 597 BCE
centralization of worship
compilation of Hebrew scriptures
conquest by Cyrus the Great
craftsmen
destruction of the First Temple
diaspora communities
divine punishment

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1952
American
Bethpage, New York
Bill Prady
Charles Michael Levine
Charlie Sheen
Chuck Lorre Productions
Grace Under Fire
June 19 2009
Lee Aronsohn
Los Angeles, California
October 18
SUNY Potsdam
Sometimes in Mother
Teenage Mutant Ninja Turtles theme
The Big Bang Theory
United States
artist intro sequences
cBS television series
chicken noises
composer
creating Dharma & Greg
creating Mike & Molly
creating Mom
creating Roseanne
creating The Big Bang Theory
creating Two and a Half Men
creating Young Sheldon
diploma from philosophy
director
in 1997
in series end credits
include The Big Bang Theory
met Ashton Kutcher
met Charlie Sheen
millions in syndication
multiple Emmy Awards
multiple times
music composer
often humorous vanity cards
often works with Kathy Bates
on the Hollywood Walk of Fame
screenwriter
short messages to viewers
television creator
television producer
television writer
two children
typed scripts old electric machines
vanity cards

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
669 BCE
681 BCE
Akkadian
Akkitu
Ashnu Temple reconstruction
Ashur
Ashurbanipal
Assyria
Assyrian Library
Assyrian army
Assyrian art
Assyrian religion
Assyrian warfare
Babylon
Babylonian Chronicles
Egypt
Esarhaddon's Treaty
Esharra-hammat
Harran
King of Assyria
King of Babylon
Lydian-Palestine relations
Marduk
Medes
Memphis
Necho I
Neo-Assyrian Empire
Nineveh
Nubia
Sargon II
Sennacherib
Shamash-shum-ukin
Stone wall discoveries
Syrian cities
Taharqa
Tyre
as maintainer
at Taidu
by later kings
centralized authority
community gatherings
due to illness
during Palestine campaigns
first millennium BCE
for decisions
fortresses in Egypt
from wrongdoings
historical figure
human
in 669 BCE

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
$100 million
/Irish heritage
/My Boys/ show appearance feedback
165
1975-04-30
2007
2019
5 feet 5 inches
8 Simple Rules
Alicia Witt
American
American Dreamer
Bathroom Planet Big Bang Theory exhibit
Bean
Bree, Belgium
California
Chicago, Illinois
Chuck Lorre
Comic Book Guy role praised
David Healy
Entourage
Funemployed character
Gary
Harvey Danger - Flagpole Sitta
Hope & Faith Episode
Ira
Jim Parsons
Kaley Cuoco
Kevin Burley
Kurt
Leonard Hofstadter
Leslie Winkle
Masi Oka
Max Neurick
Mom
Murder Ordained
My Boys
National Lampoon's Christmas Vacation
Pasadena, California
Penny
PhD
Roseanne
Russell 'Rusty' Griswold
Sara Gilbert
Sheldon Cooper
Stingo Wheelie
Suicide Kings
TV Land Award
Teen Choice Awards
The Big Bang Theory

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
stabilized diversification
stock market index
technology
telecommunications
throughout GER
trading volume
two per year
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
corporate responsibility
custody
derivatives
derivatives risk models
enhance technology platform
equities
equity indices
executive board
external auditor
from 9:00 to 17:30 CET
global brokers
grow global index business
index calculation
index licensing
investment banks
investment grade
listing for companies
market data
over 8000
pension funds
primary market
secondary market
secondary market trading
settlement
settlement fees
several thousand
stock exchange
supervisory board
trading fees
until 22:00 CET
with London Stock Exchange 2017
with New York Stock Exchange
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1901
Akkadian language
Assyria
Babylon
Babylonian king
Eshnunna
Isin
Larsa
Louvre Museum
Marduk
Mari
Mari through letters found in archives
Mesopotamia
Rim-Sin of Larsa
Samsu-iluna
Shamash
Sin-Muballit
Susa
Zimri-Lim
city dwellers seeking independence
collect taxes efficiently
commercial transactions
dowries and inheritance
from 1792 BC
in battle
social stratification context
the Code of Hammurabi
the First Babylonian Dynasty
the capital of his empire
the weak and orphans
through military conquests
to enforce the law
to enhance agriculture
until 1750 BC

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
SAP Supply Chain Management
SAP Sustainability Control Tower
SAP Training and Adoption
SAP User Group
SAP.iO
SAPPHIRE NOW
SOX compliant
Salesforce
SuccessFactors
Sybase
TechEd
Walldorf
business software
carbon neutral by 2023
cloud solutions
company
database technology
enterprise software
financial services
for older SAP versions
healthcare
implementation
in major cities worldwide
in-memory database
integrated business processes
large enterprises
manufacturing
medium-sized businesses
multiple globally
on various platforms
operates in over 180 countries
over 100000
over 20 percent of revenue
over 30 billion euros
over 40 languages
over 400000
public sector
public sector solutions
real-time data processing
retail
software company
support
thousands of patents
through Activate methodology
through donations and software
through partners
to various projects
training
with other enterprise systems
with universities worldwide

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
"Bernadette's Song"
Aerospace engineer
Astronautical Engineering
Bernadette Rostenkowski
Bill Prady
Caltech
Chuck Lorre
Fictional character
Halley Wolowitz
Howard Wolowitz
International Space Station
Jason Wolowitz
Jewish-American
Klingon
Leonard Hofstadter
Leonard, Sheldon, Nikki, Emilio, and Molly
MIT
Mandarin Chinese
Mars rover
Mrs. Wolowitz
NASA liaison
NightGrainLab_AtomField_walkpathRock_porK_SprctMltParam_onlyon_sd_nu400K_fsh_dropzero_resGrid05Ex_jw
Pasadena
Pilot
Raj Koothrappali
Sheldon Cooper
Simon Helberg
Sitcom character
The Big Bang Theory
Young Sheldon
affair with Heinkel Weckenmeyer's wife
dark curly
mother issues
not an astronaut
slender
telescope for ISS
the Physics Bowl team
toothpaste concept invention movie
with his mother

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Advocated for Jewish women's issues
American
American actress
Animal rights
Ashkenazi Jewish
Attachment parenting
Author
Bachelor of Science in neuroscience
Blossom Russo in Blossom
Carolyn in The Chicago 8
Co-directed the film Katrina
Debbie in As If
December 12, 1975
Doctorate in neuroscience
Dot in Liberty's Kids
English
Film actress
Frederick Heschel Bialik Stone
Hebrew
High-pitched voice
Host of Jeopardy!
Host of The Late Late Show
Jewish
Kiki in Kalamazoo?
Los Angeles, California
Member of Sigma Xi
Michael Stone (2003-2013)
Miles Roosevelt Bialik Stone
Mime in Angry Housewives
Neuroscientist
Orthodox Judaism
Playing Blossom Russo on Blossom
Rachel in Love Actually
San Diego, California
Television actress
The Shape of Things production assistant
Treasurer of Screen Actors Guild
University of California, Los Angeles
Veganism
Voice of Debbie in Weirdsville
YouTuber
often plays brainy characters
parents' science interests

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2022
2023
8 Simple Rules
Alvin and the Chipmunks: The Squeakquel
American actress
Based on a True Story podcast
Billie Jenkins on Charmed
Camarillo, California
Cougar Town episode
December 31, 2013
Hop
June 30, 2018
Karl Cook
Lifetime's Like Cats & Dogs adaptation
Los Angeles Center for Enriched Studies
May 2016
November 30, 1985
Penny in The Big Bang Theory
Penny long-show association nickname co-worker slang
Pierce College
Punk'd
Ryan Sweeting
The Flight Attendant
The Penthouse
The Wedding Ringer
Tinkles in Wonder Park
Tom Pelphrey
Yes, Norman Productions
a competitive recreational tennis player
her dog Norman
her dog Ruby
in Bratz doll-themed movie early 200X
leg injury hospitalization and surgery
starring on The Big Bang Theory

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Adam West

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Alfred Hofstadter

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Amy Farrah Fowler

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Anu

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bernadette Rostenkowski-Wolowitz

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Barry Kripke

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bill Gates

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bill Nye

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Beverly Hofstadter

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bob Newhart

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Brent Spiner

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bill Prady

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Burt Ward

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Brian Posehn

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Caltech

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Carrie Fisher

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Buzz Aldrin

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Chuck Lorre

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Christine Baranski

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/baseline/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Given a subject entity, return *as many facts as possible* as a list of (subject, predicate, object) triples.

### Rules:
- For very famous subjects (e.g., scientists, politicians, historical figures, works), try to reach **50–100+ distinct facts**.
- For moderately known entities, aim for 30–50 facts.
- For obscure entities, produce as many as possible (at least 5–10 if any facts exist).
- Each triple must be concise, factual, and in plain language.
- Use multiple triples rather than long objects with commas.
- Include at least one triple with predicate "instanceOf".
- If you do not know the subject, return an empty list.
- Output only JSON, no markdown or text commentary.

### Output format:
{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: CBS

Now respond with JSON only.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
temple sites
through rebellion
towards Elam
vast territories

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
$800000 per episode as peak salary
0
1 older sister
1.82 meters
12 Seasons
1981-04-30
2007-2019
2010
2011
2015
Agar.io
American
Bachelor of Business Administration
Choice TV Breakout Star in 2009
Cinnamon the dog
Criminal: UK in 2020
Dev Bhatia in Criminal: UK
Emily Sweeney
English
Gupta in Ice Age: Continental Drift
Gupta in NCIS
Hindi
Hindu
Indian
Jim Parsons, Johnny Galecki, Kaley Cuoco
London, England
Master of Fine Arts in Acting
Meenal Nayyar
NCIS
Neha Kapur
New Delhi
Popular People from India-born
Raj Koothrappali
Sanjay in Sloppy Jones
Scab in Ice Age: Continental Drift
Screen Actors Guild Award
Sonal on the show Sonali
St. Columba's School, Delhi
Temple University
The Big Bang Theory
The Big Bang Theory Live
The Last Airbender
The Scribbler
UNICEF
University of Portland
Vijay in Trolls
World Vision
Yes, My Accent Is Real
actor
astrophysicist

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
one second
onvista.de
performance index
points
quarterly
regular market
retail banking financial services
stock market index
systemic stress test
total return
volkswagen group

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2154 Los Robles Avenue in Pasadena
American
Apartment 4A
Arctic expedition
As a research trip
As recorded in document
Beverly Hofstadter
Blue
Boseman Higgs decay
Brown
California Institute of Technology
Comic-Con
Cuddles
Dairy products
Diet soda
Experimental Physicist
Experimental Physics
Fictional Character
For Physicists
Ford Fiesta
From Scientific institutions
From all Marvel Comics
Had his experiments with dark matter
Halo
Howard Wolowitz
In arts when influenced by Penny
In group therapy
Johnny Galecki
Joyce Kim
Kind and patient with friends
Leslie Winkle
Michael
Missy
Neuroscientist and psychiatrist
New Jersey
Often with Penny
Paintball team with his friends
Penny
Penny Hofstadter
Physics
Playing Halo
Princeton University
Prodigal Child Study
Published in peer-reviewed journals
Rajesh Koothrappali
Roommate agreement with Sheldon Cooper
Science conferences
Season 9 finale
Sheldon Cooper
Sheldons flagelian contract

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
VDAX
Xetra
approximately 15
approximately 2-3%
approximately 8%
approximately 80% of German equity market
approximately 90% of German equity market
automotive
chemicals
deutsche-boerse.com
every second
exchange-traded funds
extensive
financial services
four trading days before implementation
free float market capitalization
futures contracts
high
industrial goods
market capitalization
options contracts
order book turnover
performance index
quarterly
real-time
stock market index
technology
top 10 by market capitalization
transparent rules-based methodology
utilities
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Bernadette
Caltech
Cinnamon the Shetland Sheepdog
Dr. Elizabeth Plimpton
Glendale, California
Harvard University
Howard Wolowitz
Leonard Hofstadter
Mayim Bialik
Mr. Fowler
Mrs. Fowler
Mystic Warlords of Ka'a
Penelope
Penny
Sheldon Cooper
Thanksgiving
The Big Bang Theory
The Bow Tie Asymmetry
The Electric Can Opener Fluctuation
The Neurobiological Basis of Social Interaction
United States
Wil Wheaton
as portrayed on show
at The Cheesecake Factory
black Volkswagen Beetle
creating odd inventions
eventually wife of Sheldon Cooper
family encouraged unusual science interest science
fictional character
fluorescent earthworm research
for Superfluid Helium research
from Flash version show joke
girlfriend of Sheldon Cooper
human social behavior
in neurobiology
knitting
loves frog dissections since childhood
neurobiologist
neurobiology
neurobiology experiments
on primate trials occasionally
on research experiments
on spatial recognition neurobiology in primates
primate brains
quirky personality
season 11
season 3
through an online dating site
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Smart Infrastructure
UGS Corporation in 2007
Volkswagen Group
Werner von Siemens
Wittelsbacherplatz
automation
automation systems
by 2030
conglomerate
digital twin technology
digitalization
electric motors
electric tram in Berlin in 1879
electrical components
electrical lighting systems globally
electrification
emeter in 2011
for environmental governance
gas turbines
in research collaborations
industrial IoT solutions
industrial fairs like Hannover Messe
industrial robots
laboratory diagnostics equipment
locomotives
magnetic resonance imaging scanners
medical imaging devices
more than 190 countries
multinational company
nextracker in 2014
over 300,000
pointer telegraph invention
power generation equipment
power grids worldwide
rail automation systems
rail vehicles
renewable energy startups
software for industry
switchgear
telegraph systems
trains
trams
various joint ventures
wind turbines
€135.3 billion (2023)
€7.5 billion (2023)
€77.8 billion (2023)

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1927
60 Minutes
ABC
ATSC digital
America's Most Watched Network
American broadcast television and radio network
CBS All Access streaming service
CBS Corporation
CBS Films
CBS News
CBS Radio
CBS Sports
CBS Sports Network
CBS Television Studios
CBS This Morning
CBS.com
CSI: Crime Scene Investigation
CW Television Network
California
Columbia Broadcasting System
Columbia Phonographic Broadcasting System
English
Eye logo
FCC broadcast licenses
Fox
George Cheeks
I Love Lucy
NBC
NCAAB March Madness
NCIS
NFL games
New York City
Nickelodeon
Only CBS
PARA
Paramount Global
Paramount Pictures
Paramount+
Showtime Networks
Simon & Schuster
Survivor
The Big Bang Theory
The CW
The Twilight Zone
United Independent Broadcasters
United States
Viacom
ViacomCBS
Walter Cronkite once worked for CBS
Warner Bros.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
14 meters
1902-1914
575 BCE
6th century BCE
Adad
Akitu festival
Akkadian
Babylon
Babylonian
Babylonian deities
Berlin
Enuma Elish
Euphrates River
German archaeologists
Herodotus
Hillah, Iraq
Iron Age
Ishtar
King Nebuchadnezzar II
Marduk
Mesopotamia
Mesopotamian
Mesopotamian hall
Nebuchadnezzar II
Neo-Babylonian
Neo-Babylonian Empire
Pergamon Museum
Processional Way
Processional Way walls
Robert Koldewey
academic papers
administrative records
advanced brickmaking
ancient texts
archaeological analysis
archaeological site
arched entrance
bitumen for mortar
blue
blue for divinity
blue glazed tiles
building dedications
bulls
ceremonial entrance
city gate
cuneiform script
defensive
dragons
earlier gates
early 20th century

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
32 years old
323 BC
356 BC
Achilles
Alexander IV of Macedon
Ancient Greek
Aristotle
Arrian's Anabasis
Babylon
Battle of Chaeronea in 338 BC
Battle of Gaugamela in 331 BC
Battle of Issus in 333 BC
Bucephalus
Hellenistic Age
Hephaestion
Homer's Iliad
King Darius III of Persia
King Philip II of Macedon
King Porus of Paurava
Kingdom of Macedon
Olympias
Pella, Macedon
Person
Plutarch's Lives
Roxana
Siege of Tyre in 332 BC
a brilliant strategist
art and films
as a god in some cultures
associated with the Gordian Knot
at Siwa Oasis
at age 16
built alliances through marriage
built fleets for commerce and war
by later conquerors
city of Alexandria in Egypt
city of Bucephala
coins in various empires
composed of Macedonians and allies
conquered as far as India
conquest of the Persian Empire
created a vast empire
cultural exchange
diverse cultures and peoples
divided among Diadochi after his death
driven and charismatic
employed siege engines
established satrapies for governance
featured in biographies and histories
from 336 BC to 323 BC

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+964
1932
438,317 square kilometers
After wars
Approximately 43 million people
Arabic
Arabs
Asia
Babylon
Babylonian Empire
Baghdad
Billions of US dollars
British Mandate for Mesopotamia
Central Marshes
Christianity
Civil war post-2003
Confirmed by international bodies
Council of Representatives
Country
Cradle of Civilization
Cuneiform
Dates
Desert climate
During Iran-Iraq War
Euphrates River
Federal parliamentary republic
Football popular
Fought ISIS
From Arabic term for Uruk
Gulf War
High in some areas
House of Wisdom
In 1990s
In 2003
In 2006
In 2014
In 2017
Iran
Iran in 1980
Iran-Iraq War
Iraq War
Iraqi Airways
Iraqi Marshes
Iraqi dinar
Islam
Islam is majority religion
Jordan
Kurdish
Kurdistan Region
Kurds

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
330 BC
550 BC
Achaemenes dynasty
Achaemenid art
Achaemenid dynasty
Ahura Mazda
Alexander the Great
Anatolia
Aramaic
Babylon
Battle of Gaugamela
Battle of Marathon
Battle of Plataea
Battle of Thermopylae
Battle of the Persian Gate
Behistun
Behistun Inscription
Cambyses II
Cyrus Cylinder
Cyrus Cylinder human rights
Cyrus the Great
Daric
Darius I
Darius I administrative reforms
Egypt
Faravahar
First Persian Empire
Greco-Persian Wars
Hellenistic period
Herodotus
Herodotus wrote about it
Immortals
India
Indo-European
Ionian Revolt
Iran
King of Kings
Lydia
Macedonian Empire
Mede dress
Median Empire
Mesopotamia
Mithra
Naqsh-e Rustam
Nowruz
Old Persian
Pasargadae
Persepolis
Persepolis Fortification Tablets
Persepolis by Alexander

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
development of astronomy
development of mathematics
dragon figure
examinations east
history
history background
irrigation projects designs
law principles
legend supportment
local texts
mathematical system
modern Iraq
modern archaeologists
planetary cycles
poem depictions cuneiform
real contribution
state
ziggurat temple

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
to the god Enlil
to the vernal equinox
to ziggurats
trade and markets
twice per year in Babylon
with Alexander the Great
with other deities

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
elites
exile event
fall of Assyrian Empire
first siege of Jerusalem
forced migration
historical period
oral Torah traditions
peasantry
rebellion against Babylonian rule
rebuilding Second Temple
return of some exiles to Judah
strengthening Jewish identity
synagogues
tens of thousands
weakening of Judean monarchy

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Akitu festival
Akkadian
Anshar and Kishar
Anu
Apsu
Assyrian capital Nineveh
Babylon
Babylon society mythologists
Babylonian creation myth
Book of Genesis
George Smith
Jewish exiled elite
Kingu helper also punished
Lahmu and Lahamu
Library of Ashurbanipal
Marduk
Marduk greater than forefathers
Neo-Assyrian era
New Year celebrations
S'eh Hazibita
Sumerian mythology
The Epic of Creation
Tiamat
Tiamat slain by wind weapony
When on high
about over a thousand lines
adverse powers increase children
ancient Mesopotamia
anthropology implied
baked clay
beefs Tiamat renders chaos slain
c. 12th century BCE
civil dependence on worship logic
clay tablets
combat with Tiamat
concepts polytheism
cosmogony
cosmological distinction chaos battle
creation of universe
cuneiform
design of man
dismemberment of beings
divine order
dozens
dual gods contest physically
editing copy continued referencing
election of Marduk
epic
eternal monarchy for Marduk
faith reaffirmed through deity act

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Amy Farrah Fowler
Antivirals
Bernie
Biopharmaceutics
Carol Rostenkowski
Catholic
Catholic school in Philadelphia
Cheesecake Factory where she waitressed
Fictional Character
Frequently packs Howard's lunches
Frugal
Gets feisty when provoked
Halley Wolowitz
Halley after meeting Space Shuttle astronaut
Her unusual high voice
High-voiced
Howard Wolowitz
Howard earlier in their relationship
Linda from Catholic school
Main 7 characters by later seasons
Melissa Rauch
Microbiologist
Microbiology
Mike Rostenkowski
Neil Michael Wolowitz
Novel drug PRQ-77X at Zangen
Penny and Leonard
Pharmaceutical Researcher
Philadelphia
Polish American
Sheldon's colleague and then friend
Shy character became assertive over seasons
Stuart painting her nude
Sweet-natured
The Big Bang Theory
Tinny the Dinosaur in Captain Perky
Transitioned during season 4 periods
UCLA
Zangen

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
temperate seasonal
the right
vehicles

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
10.75 inches
1944
1965
Best Actor
Best Actor in a Television Series
Best Actress
Best Actress in a Television Series
Best Director
Best Motion Picture
Best Supporting Actor
Best Supporting Actress
Best Television Series
Beverly Hills, California
Beverly Hilton Hotel
Cecil B. DeMille
Champagne and wine companies
Drama and Musical or Comedy
Golden Globes
Golden Globes, LLC
Hollywood Foreign Press Association
Hollywood Foreign Press Association members
January
La La Land
Meryl Streep
NBC
Oscar nominations
Oscars
Pacific Time Zone
Pia Zadora award
a globe
a major awards show
after controversy
approximately 5.5 pounds
assigned to cover Hollywood
at times relative to Oscars
award ceremony
box office performance
by genre
by studios
casual atmosphere
celebrity hosts
defunct magazine at founding
drama and musical or comedy
due to writers' strike
excellence in film and television
for nominees
from various countries
gold-plated
golden globe on a pedestal
have won Golden Globes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1995
1999
2002
2003
2004
2006
2008
2013
2015
2016
2017
2018
2019
2022
American
Bachelor of Science in Economics
Bachelor of Science in Physics
CEO of SpaceX
CEO of Tesla, Inc.
CTO of X
Canadian
Elon
Errol Musk
FAI Gold Space Medal
Falcon 1 in 2006
Falcon 1 in 2008
Grimes
Isaac Asimov
June 28, 1971
Justine Musk
Kimbal Musk
Maye Musk
Musk
Neuralink brain-computer interface
Nikola Tesla
Pretoria, South Africa
Royal Society Fellow
South African
SpaceX Demo-2 in 2020
SpaceX reusable rockets
Talulah Riley
Tesla electric vehicles
Texas, United States
The Boring Company tunneling machines
The Hitchhiker's Guide to the Galaxy
Tosca Musk
University of Pennsylvania
X
acquiring Twitter in 2022
active on social media

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
111.6 billion
13
2000
2010 giving pledge
3
Advanced Energy Research in Washington
Altair BASIC
American business magnate
Berkshire Hathaway
Bill
Bill & Melinda Gates Foundation
Bill’s Books
Breakthrough Energy Ventures
Business @ the Speed of Thought
CEO of Microsoft
Cambridge University
Cascade Investment
Cascade_BH
Codex Leicester by Leonardo da Vinci
CorePower aligned / more pending
Gates
HIV
Harvard University
Kristianne Gates
Libby Gates
MS-DOS
Malaria eradication
Mary Maxwell Gates
Medina, Washington
Melinda French Gates
Microsoft
Microsoft Office Suite
Microsoft Windows
October 28, 1955
Paul Allen
Presidential Medal of Freedom
Seattle
TerraPower co-founder
The Road Ahead
ThinkWeek
Traf-O-Data
Twitter
United States of America
Universal Child Immunization
University of Tokyo
William H. Gates Sr.
William Henry Gates III
World Health Organization
author
chairman of Microsoft

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
world's leading enterprise software provider

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The Conners
The Tonight Show
USD
actor
experimental physicist
financial consultant
home schooled
military photojournalist
observant friend
over $100 million
roommate
university

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
in Babylonian visits
in cuneiform
king
local autonomy
pruning innovation
rebellious leaders
religious tolerance
revolts in Babylonia
siege activity
succession of Ashurbanipal
temple of Nabu
temple treasures
vassal kings in Egypt
vassal states
with Media
with vassals
within decrees

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2154 BCE
2334 BCE
Afghanistan
Akkad
Akkadian
Anatolia
Assyrian Empire
Babylonian Empire
Elam
Elamites
Euphrates River
Gutian Dynasty
Gutian invasion
Gutians
Indus Valley
Levant
Lullubi
Magan
Manishtushu
Mesopotamia
Nagar
Naram-Sin
Naram-Sin defeating Lullubi
Oman
Rimush
Sargon
Sargon of Akkad
Shar-Kali-Sharri
Sumer
Sumerian city-states
Sumerian epics
Tell Brak
Tigris River
Ur
Uruk
Victory Stele of Naram-Sin
\"king of the four quarters\"
administrative records
agriculture based
appointed by king
approximately 180 years
assimilated
based on earlier codes
became Akkadian center
became lingua franca
bronze tools and weapons
built in conquered cities
by Rimush and Manishtushu
by Sargon
canal building

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
180
1899
19th century
2019
4th century BCE
6th century BCE
7th century BCE
91 meters
Akitu
Alexander the Great
Babylon
Babylonian Chronicles
Babylonian mythology
Babylonian power
Egyptian pyramids
Esagila complex
Euphrates River
Great Ziggurat of Ur
Herodotus
Iraq
Ishtar Gate
Marduk
Mesopotamia
Nabopolassar
Nebuchadnezzar II
Neo-Babylonian Empire
Robert Koldewey
Sumerian ziggurats
Tower of Babel
ancient engineering
ancient wonder
archaeological studies
astronomical observations
at the top
available
axis mundi
baked bricks
before destruction
bitumen
blue
blue and gold
calendar development
cardinal directions
clay tablets
connecting heaven and earth
construction details
cuneiform texts
daily rituals
decades
depicted in reliefs

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (17); stopping.
[crawler] finished in 292.1s → outputs in runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251029_231623
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Persians
Phoenician ships
Royal Road
Shahanshah
Susa
Ten Thousand Immortals
Xerxes I
Xerxes I reign
Zoroastrian calendar
Zoroastrianism
agriculture
ancient Near East
ancient empire
apadana
at Salamis
bas-relief
based on divine law
burning of Persepolis
clay tablets
constructed rock-cut tombs
cuneiform
cuneiform inscriptions
gold
gold and silver
griffins in art
imperial postal system
in Mediterranean
invasion of Greece
lamassu
later Persian empires
limestone
metalworking
model for imperial administration
monarchy
multi-ethnic
other religions
palaces at Persepolis
parts of Central Asia
satrapies
silver
spread of Aramaic
trade
tribute system
walls of Babylon
winged sun disk

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] output_dir: runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231623
[crawler] seeded: ancient city of Babylon
[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: ancient city of Babylon

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
William S. Paley
a stylized eye
adults 25-54
advertising
airing emergency alerts
as part of Paramount Global
classic television shows
color television broadcasting
comedy
covers international news
drama
entertainment shows
entrepreneur
has received Emmy Awards
has received Golden Globe Awards
has received Peabody Awards
high definition
licenses merchandise for shows
local affiliate stations
major influence on American culture
media technology
millions of viewers
news programming
often top-rated network
presidential debates
prime-time television
profitable
radio broadcasting
reality TV
recognized internationally
social media channels
sports broadcasting
standard definition
streaming
subscription fees
syndication
television broadcasting
thousands of employees

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
609 BCE
Akitu
Akkadian
Amarna letters
Anatolia
Ashur
Ashurbanipal
Assur
Assyrian people
Austen Henry Layard
Babylon
Babylonians
Bronze Age
Egypt
Enuma Elish
Epic of Gilgamesh
Hebrew Bible
Iron Age
Israel
Israelites
Judah
Kanesh
Khorsabad
Levant
Medes
Mesopotamia
Middle Assyrian Laws
Middle Assyrian Period
Neo-Assyrian Empire
Neo-Assyrian Period
Neo-Babylonian Empire
Nimrud
Nineveh
Old Assyrian Period
Sargon II
Sennacherib
Tiglath-Pileser III
agriculture
ancient Mesopotamian religion
ancient empire
annals of kings
arid
astronomy
barley
battering rams
boats on Tigris
c. 2500 BCE to 609 BCE
canals
captured gods
cavalry

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Kuwait
Kuwait in 1990
Lake Tharthar
Largest US embassy
Many
Masgouf
Mesopotamia
Middle East
Mount Halgurd
Muhammad Najib ar-Ruba'i
Near Persian Gulf
OPEC
October 3
October 3, 1932
Official calendar
Oil
Oil-dependent
Ottoman Empire
Persian Gulf
Petroleum
President
Presidential Palace in Baghdad
Prime Minister
Protests in 2011
Recently
Reported abuses
Saddam Hussein
Saudi Arabia
Shia Islam
Shocking events
Since 2008
Sumer
Sunni Islam
Syria
Syriac
Tigris River
Turkey
Turkey Syria
United Kingdom
United Nations
University of Baghdad
Ur
Various ethnic minorities
Yazidism
Yes
Ziggurat of Ur

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19th century
Achaemenid period
Alexander the Great
Ashurbanipal
Babylon
Babylon's grandeur
Babylonian New Year
Babylonian identity
Babylonian politics
Babylonian religious complex
Babylonian texts
Baghdad
Enuma Elish
Esarhaddon
Etemenanki ziggurat
Euphrates River
Hammurabi
Hellenistic period
Herodotus' Histories
Iraq
Ishtar Gate
Marduk
Marduk's consort Sarpanit
Marduk's creation myth
Marduk's power
Marduk's son Nabu
Mesopotamian architecture
Nebuchadnezzar II
Neo-Babylonian period
Old Babylonian period
Processional Way
Robert Koldewey
Seleucid kings
Xerxes I
academic papers
administrative records
altars
ancient Mesopotamia
ancient reliefs
annual festivals
archaeological excavations
archaeologists
astronomy
baked bricks
biblical references
cardinal directions
celestial bodies
center of Marduk worship
coins
cultic objects

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
comedian
earned $1 million per episode eventually
grew up in India mostly
initially mute around women
loves cricket game
memoir/essays
overcoming shyness
performed in college productions
person
selective mutism initially
sings friend Leonard's wedding song
tennis
toured One Man Show
writer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
environmental damage
extensive
fertility
full-scale models
geometric patterns
glazed brick inlay
glazed bricks
goddess Ishtar
gold
honored gods
imperial glory
in Iraq
in museums
inner city
inspired artists
key Neo-Babylonian artifact
large
later architecture
lions
local clay
love
mentioned in records
monumental gate
mud bricks
multiple
museum exhibit
mušhuššu
on ancient art
ongoing
parades
part of Babylon ruins
partially intact
performed
pottery shards
praises Nebuchadnezzar II
precious stones
reconstructed
references in media
religious
rosettes
slaves and artisans
snake-dragon
stylized flowers
symbol of Babylonian power
war
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
from Persian court
grew into an empire force
hammer and anvil
his father Philip II
in 336 BC
in his early 30s
inspired loyalty in his troops
intermarriage among Macedonians and Persians
known as 'the Great'
led campaigns across three continents
led to wars among his generals
likely contested
lost in antiquity
many cities named Alexandria
marched east through Asia
merged Macedonian and Persian elites
of Argead dynasty
of Egypt
of the Achaemenid Empire
originally in Memphis, then Alexandria
possible illness or poisoning
presented as divine
secured Greece in his first years
sent envoys to distant kingdoms
spread Hellenistic culture
stretched from Greece to India
studied under Aristotle
survived several wounds
syncretistic beliefs
the 'King of Kings'
the Wars of the Diadochi
the city of Persepolis
the oracle at Siwa
through Gedrosian Desert
to Parysatis
to Roxana in 327 BC
to Stateira
to reach the eastern ocean
undefeated in battle
used Companion cavalry
used phalanx and cavalry effectively
went from Greece to Punjab
with Sarissa spears

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2 Chronicles
2 Kings
516 BCE
538 BCE
586 BCE
597 BCE
6th century BCE
70-year duration
Aramaic language
Aramaic script
Babylon
Babylonia region
Babylonian Chronicles
Babylonian Talmud
Babylonian court
Babylonian culture
Babylonian exile
By the Rivers of Babylon psalm
Christian theology
Cyrus the Great
Daniel
Darius I
Davidic monarchy
Edict of Cyrus
Ezekiel
Ezra
Hebrew Bible
Hebrew scripture compilation
Jehoiachin
Jeremiah
Jewish diaspora
Jewish elite
Jewish fast days
Jews to return to Judah
Joshua the High Priest
King Jehoiakim
Kingdom of Judah
Nebuchadnezzar II
Persian conquest of Babylon
Persian court
Persians in 539 BCE
Second Temple period
Zedekiah
Zerubbabel
about 50,000
about 70 years
after capture
against Babylon
agriculture
altar first

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1872
20th century
Academic works
Akkadian language
Allegory of human condition
Ancient Mesopotamia
Ancient Mesopotamian epic poem
Ancient history courses
Ancient kingship ideals
Art and music
Assyriology
Battle with Humbaba
Biblical flood story
British Museum
Bull of Heaven episode
City
Civilization vs. nature
Clay tablets
Coming-of-age story
Cultural treasure
Cuneiform script
Death of Enkidu
Dreams and omens
Earliest great work of literature
Enduring human themes
Enkidu
Epic
Epic poetry
Film
Flood myth
Foundational text of Western literature
Friendship
George Smith
Gilgamesh
Gilgamesh epic
Gods and goddesses
He who saw the deep
Heroic deeds
Historians
Historical context
Historical document
Historical king Gilgamesh
Human suffering
Humbaba
Insight into ancient thought
Ishtar
Journey
Journey to the Cedar Forest
Later Mesopotamian literature
Library of Ashurbanipal

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1970
1972
AIR
Acquired Bombardier CSeries
Adheres to international laws
Advanced aerodynamics
Advanced satellite systems
Aerospace
Aerospace manufacturer
Airbus A220
Airbus A300
Airbus A320
Airbus A330
Airbus A340
Airbus A350
Airbus A380
Airbus A400M Atlas
Airbus Commercial Aircraft
Airbus Defence and Space
Airbus Defence and Space satellites
Airbus H125
Airbus H135
Airbus H145
Airbus H160
Airbus Helicopters
Airbus SE
Airlines worldwide
Autonomous systems
Boeing
Broughton, United Kingdom
Commercial airliners
Common cockpit design
Community engagement
Composite materials in airframes
Continuous improvement
Customer feedback integration
Defense
Defense ministries
Developed A350 XWB
Developing sustainable aviation
Diversity and inclusion
Educational programs
Electric flight
Environmental initiatives
Eurofighter Typhoon
Euronext Paris
European Space Agency
Expanded into global markets
Fly-by-wire technology
France

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19th century
24th century BCE
Afro-Asiatic
Akkadian Empire
Akkadian Empire inscriptions
Akkadian dictionaries
Amarna letters
Anatolia
Arabic
Aramaic
Assyria
Assyrian
Assyriology
Atra-Hasis
Babylonia
Babylonian
Behistun Inscription
Chicago Assyrian Dictionary
Code of Hammurabi
East Semitic
Ebla tablets
Edward Hincks
Egypt
Enuma Elish
Epic of Gilgamesh
Fertile Crescent
Hebrew
Henry Rawlinson
Julius Oppert
Late Babylonian
Late Babylonian period
Levant
Mari tablets
Middle Babylonian period
Myth of Adapa
Near East
Neo-Assyrian period
Nuzi tablets
Old Akkadian
Old Akkadian period
Sargon of Akkad
Semitic
Semitic language
Standard Babylonian
Sumerian
Sumerian words
academic interest only
administration
ancient Mesopotamia
ancient Near Eastern studies

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1946 Treaty of Friendship
1987 Protocol
1990 agreement
356 cubic meters per second
Akkad
Assyria
Atatürk Dam
Atatürk Dam Hydroelectric Plant
Babylon
Balikh River
Birecik
Deir ez-Zor
Deir ez-Zor Bridge
Dura-Europos
Epic of Gilgamesh
Eridu
Fallujah
Fallujah Bridge
Haditha
Haditha Dam
Haditha Dam Hydroelectric Plant
Hawar Islands
Herodotus' Histories
Hit
Iran
Iraq
Jarabulus
Karasu River
Khabur River
Kuwait
Lake Assad
Mari
Mesopotamia
Mosul Dam
Mount Ararat
Murat River
Nippur
Persian Gulf
Purattu
Qadisiyah Lake
Ramadi
Ramadi Bridge
Raqqa
Saddam River
Saudi Arabia
Shatt al-Arab
Shatt al-Arab delta
Sippar
Sumer
Syria

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
chief software architect of Microsoft
city
climate change solutions
dropped out of Harvard University
enhancing healthcare
expanding educational opportunities
honorary knighthood from Queen Elizabeth II
human
investor
malaria vaccine result papers 2021
multinational corporation
narrative likely references
nuclear energy adoption
philanthropist
philanthropy era
private foundation
reducing extreme poverty
richest person in the world
school scheduling
software company
software developer
technology company
vaccination programs
yes
~107 billion USD in year 2023-04

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Acco
Adad
Ai
Akkadian language
Akkadian texts
Alalakh
Aleppo
Arpad
Ashdod
Ashkelon
Assyrian culture
Babylon
Babylonian culture
Beth Horon
Beth Shean
Beth Shemesh
Beth Zur
Bethel
Bethlehem
Biblical texts
Bit-Abirti
Bit-Adini
Bit-Amukkani
Bit-Bahiani
Bit-Dakkuri
Bit-Halupe
Bit-Shaalli
Bit-Shilani
Bit-Yakin
Bit-Zamani
Bosra
Bronze Age
Byblos
Canaanite languages
Carchemish
Code of Hammurabi
Dagan
Damascus
Dibon
Dor
Ebla
Egyptian texts
Ekron
Emar
First Dynasty of Babylon
First Dynasty of Isin
First Dynasty of Larsa
Gath
Gaza
Gezer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1COV
2015
Aktiengesellschaft
Antwerp
Apec
BASF
Bayblend
Bayer
Bayfit
Baymedix
Baytherm
Baytown
Brunsbüttel
CO2 as raw material
Desmodur
Desmophen
Desmoseal
Dispercoll
Dormagen
Dow
DuPont
EcoVadis
Frankfurt Stock Exchange
Germany
ISO 14001
ISO 45001
ISO 9001
Impranil
Krefeld-Uerdingen
Lanxess
Leverkusen
Makrolon
Map Ta Phut
Markus Steilemann
Pittsburgh
Platilon
SABIC
Shanghai
adhesives
adhesives for bonding
annual reports
automotive
automotive interiors
billions of euros
bio-based raw materials
charitable donations
chemicals
circular economy
climate neutrality
coatings

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1995
Aktiengesellschaft
Board Member
Bonn
CEO
DHL
DHL Express
DHL Global Forwarding
DHL Supply Chain
DHL in 2002
DPD
DPW
Deutsche Bundespost
Deutsche Post DHL Group
Die Post für Deutschland
FedEx
Frank Appel
Frankfurt Stock Exchange
Germany
GoGreen program
Hermes
ISO certified
KfW Bankengruppe
Melanie Kreis
Post
Postbank
Postbank in 2008
UPS
acquisition of DHL in 2002
air freight services
billions of euros annually
black
business customers
collaborates with e-commerce platforms
company
developed Packstation
develops electric delivery vehicles
e-commerce solutions
electric vehicles
employs people worldwide
environmental protection
experienced labor strikes
express delivery
extensive global network
financial services
focuses on logistics innovation
global logistics leader
has physical branches
healthcare benefits
horn symbol

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1750 BC
1792 BC
1901
282 laws
Akkadian
Amorite
Babylon
Babylonian king
Bronze Age
Code of Hammurabi
Eshnunna
First Babylonian Dynasty
Hammurapi
Jacques de Morgan
King of Babylon
King of Sumer and Akkad
King of the Four Quarters
Larsa
Louvre Museum
Marduk
Mari
Mari letters
Mesopotamian
Old Babylonian period
Rim-Sin I
Samsu-iluna
Shamash
Shamshi-Adad I
Sin-Muballit
Susa
Zimri-Lim
actual implementation of code
agriculture
an eye for an eye
archaeologists
around 1755 BC
blessings for followers
bureaucracy
canals
claimed mandate from gods
clay tablets
contracts
cuneiform
curses for violators
diorite stele
document annual events
earliest written legal code
evidence-based judgments
extensive diplomatic letters
family law

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1876
19th century
7
Akitu festival
Akkadian language
Alexander Heidel
Anu
Apsu
Apsu and Tiamat
Ashur
Assyrian religion
Atra-Hasis
Babylon
Babylonian creation myth
Babylonian political ideology
Ea
Enlil
Epic of Gilgamesh
Esagila temple
Fifty Names
Genesis creation story
George Smith
Imhullu
Kingu
Kish
Library of Ashurbanipal
Marduk
Marduk creates cosmos
Marduk creates humanity
Marduk defeats Tiamat
Neo-Assyrian period
New Year celebrations
Nineveh
Semitic
Standard Babylonian
Stephanie Dalley
Sultantepe
Sumerian mythology
Tiamat
Tiamat's plan and Marduk's rise
When Above
When on High
academic studies
ancient Mesopotamia
ancient Mesopotamian epic
ancient Near Eastern studies
around 18th to 16th centuries BCE
battle between gods
birth of the gods
blood of Kingu

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Star Trek
Stephanie Barnett
Stephen Hawking
Summa cum laude
The Big Bang Theory
The Cheesecake Factory
To go to pharmacy when sick
While travelling for experiments
With Howard and Raj
With his psychologist mother

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
gods labor no longer necessary
half-human appearance champion apis
heavens
hierarchical pantheon
honor foundation elements earth
inspired Levantine texts
king of gods
kudurru boundary stones
legitimize Marduk divine rule
marking divine succession
mid-twentieth Tablet Copies
monsters
oral litany chant
order from chaos
priests
primordial ocean
repetition-in-series
rise of Babylon
role celting high ziggurat
scribes religious officials
sea
seven
slaying and venerate reenacted
stability and dominion
succession of kingdom established
the 19th century CE
the Tablets of Destiny
titular ascension of deities
unified cosmic vista
vertical storytelling
war among deities
wisdom literature

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19th century
41 years
627 BC
668 BC
685 BC
Akkadian
Aramaic
Asenappar
Ashur
Ashur-etil-ilani
Assyrian empire expansion
Assyrian royal inscriptions
Assyrian ruler
Austen Henry Layard
Babylonian Chronicles
Babylonian campaigns
Bible
British Museum
Egyptian campaigns
Elamite campaigns
Epic of Gilgamesh
Esarhaddon
Esharra-hammat
Ezra 4:10
Great King
Gyges of Lydia
Iron Age
Ishtar
King of Assyria
King of Babylon
King of Sumer and Akkad
King of the Lands
King of the Universe
Kuyunjik
Libbali-sharrat
Library of Ashurbanipal
Louvre Museum
Marduk
Mighty King
Nabopolassar of Babylon
Nabu
Neo-Assyrian Empire
Neo-Assyrian period
Nimrud
Nineveh
North Palace
Psamtik I of Egypt
Sargonid dynasty
Sennacherib
Shamash-metu-uballit

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
in 1956
in 1970s and 1980s
in 2023
international audience
lack of diversity
lifetime achievement award given
lifetime achievement in television introduced
made by Newell
membership practices
millions
no
no explicit sports category
occasional script in-jokes or shade-throwing
often musical numbers
on a Sunday
other venues
precursor to Oscars
predicting Oscar winners
publicity for nominees
published widely
revenue
sometimes due to controversies
sometimes mimic ceremony
special business partnership
such as France
television excluded from Oscars
to Golden Globe Awards
to increase diversity
usual dress code
via Film Academy
was in 1958
weeks before ceremony
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
artificial intelligence
artificial intelligence risks
as a non-profit
at Pinnacle Research Institute
at least 10
attended Queen's University in Ontario
business magnate
climate change
co-founding Neuralink
co-founding PayPal
co-founding Tesla, Inc.
designing the Tesla Model 3
designing the Tesla Model S
develop safe artificial intelligence
developing the Dragon spacecraft
developing the Falcon 9 rocket
divorced multiple times
donated to artificial intelligence safety
donated to renewable energy research
electric vehicles
electromechanical engineer
engineer
establish a human colony on Mars
first principles thinking
founding OpenAI
founding SpaceX
founding The Boring Company
industrial designer
invested in DeepMind
invested in Vicarious
known for long working hours
large-scale battery production facilities
listed in Time 100
model
moved to Canada at age 17
neurotechnology
none
ongoing
over $200 billion
owner of X
person
proposing the Hyperloop transportation concept
reduce global warming through sustainable energy
registered independent
renewable energy
space exploration
space travel
technology entrepreneur
transferred to University of Pennsylvania
tunneling

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
centralized government
climate change
combined Sumerian and Akkadian
conquered states
controlled large estates
cuneiform
describes his rise
detailed narrative scenes
distinct from Sumerian
distinctive styles
during reign of Naram-Sin
existed
explains fall of empire
first empire in history
for over 2000 years
for transport
gold and lapis lazuli
governors
grain
highly developed
historical empire
imperial ideology
in kind
influenced by Sumerian
internal rebellions
irrigation
king as god
labor
letters
limited due to site destruction
literary works
livestock
locally or centrally
model for later empires
mythological scenes
myths in Akkadian
naturalistic
palace controlled large tracts
preserved in later copies
professional standing army
recorded on stelae
remained influential
resurgence of Sumerian city-states
rich grave goods
road maintenance
royal motifs
semi-autonomous
siege warfare
simple
spread Akkadian

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Visible from Distance

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1976
2019
25 degrees Celsius
5119 square kilometers
Adnan Faihan Al-Siraj
Akkadian
Al-Hashimiyah
Al-Hillah SC football club
Al-Kufa SC football club
Al-Mahawil
Al-Musayab
Al-Mustaqbal University College
Al-Qasim
Al-Qādisiyyah Province
Arabia Standard Time
Arabic
Arabs
Aramaic
Babylon Fortress
Babylon International Festival
Babylon Museum
Babylon Theatre
Babylon archaeological site
Babylonian calendar
Babylonians advanced in astronomy
Babylonians developed base-60 number system
Baghdad Province
Belshazzar
Borsippa ruins
Code of Hammurabi
Enuma Elish creation myth
Epic of Gilgamesh
Etemenanki ziggurat
Euphrates River
Hammurabi
Hanging Gardens of Babylon
Hanging Gardens of Babylon site
Hillah
Hillah General Hospital
Hillah Museum
Iraq
Ishtar
Ishtar Gate
Isin ruins
Islam
Karbala Province
Kish ruins
Lion of Babylon statue
Marduk
Marjan Teaching Hospital

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
612 BCE
Akkadian language
Aramaic language
Ashur
Ashurbanipal
Assur
Assyrian people
Babylon
Babylonian culture
Babylonians
Bronze Age
Christianity
Egypt
Elam
Epic of Gilgamesh tablets
Hebrew Bible
Iron Age
Ishtar
Israel
Judah
Khorsabad
Library of Ashurbanipal
Marduk
Medes
Mesopotamia
Neo-Aramaic languages
Neo-Assyrian Empire
Nimrud
Nineveh
Persian Empire
Sargon II
Semitic people
Sennacherib
Shamshi-Adad I
Tiglath-Pileser III
advanced administration system
ancient civilization
annals of kings
aqueducts
archers
astronomy
barley
battering rams
battle scenes
bearded men
by archaeologists in 19th century
calendar system
cattle
cavalry
chariots

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
20th century
539 BCE
Achaemenid Empire
Achaemenid art
Akkad
Akkadian
Akkadian texts
Anshan
Assyria
Assyrian invasions
Assyriologists
Babylonia
Bakhtiari
Bronze Age
Chogha Zanbil
Elam
Elamite
Elamite cuneiform
Elamites
Eparti dynasty
Eshnunna
Herodotus
Humban
Indus Valley
Inshushinak
Iron Age
Karkheh
Karun
Khuzestan
Louvre Museum
Lurs
Mari
Mesopotamia
Middle Elamite
Napirisha
National Museum of Iran
Nebuchadnezzar I
Neo-Elamite
Old Elamite
Persian Empire
Roman Ghirshman
Shilhak-Inshushinak
Shutruk-Nahhunte
Shutur-Nahhunte
Sumer
Sumerian texts
Susa
Untash-Napirisha
Ur-Nammu
a UNESCO World Heritage site

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
669 BC
681 BC
Abdi-Milkutti
Anatolia
Arab tribes
Arda-Mulissu
Ashur
Ashurbanipal
Assyria
Assyrian expansion
Assyrian king
Assyrian officials
Babylon
Babylonian Chronicles
Bible
Cyprus
Egypt
Esharra-hammat
Ezra 4:2
Harran
Judah
Levant
Marduk
Memphis
Mesopotamia
Naqi'a
Necho I
Neo-Assyrian Empire
Nineveh
Nubian dynasty
Philistia
Phoenicia
Psamtik I
Sennacherib
Shamash-shum-ukin
Sidon
Syro-Palestine
Taharqa
across empire
after father's death
against cities
ancient texts
appointed officials
as king of Assyria
as king of Babylon
at Nineveh
between sons
building projects
by Chaldeans
by brothers

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1877
2016
2017
2018
2019
2023
Asia Pacific
Azelis
BNR
Brenntag & Cie.
Brenntag Essentials
Brenntag Specialties
Christian Kohlpaintner
DE000A1DAHH0
Desiccant Plastics
EAC Industrial Ingredients
Essen, Germany
Europe
Frankfurt Stock Exchange
Helm AG
IMCD
ISO 14001
ISO 9001
Latin America
Middle East and Africa
Nexeo Solutions
North America
OHSAS 18001
SSCP
Univar Solutions
Wilhelm Schmits
acids and bases
acquired by Brenntag AG in 2003
additives
agriculture
charitable donations
chemical distribution
chemical distribution company
coatings and adhesives
commodity chemicals
community engagement
customer portals
customer-centric solutions
distributors
dividend payments
e-commerce platform
employee development
employee volunteering
energy efficiency
enhance circular economy

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
-12.3%
1000 points
1163.52 points
15.8%
16290.19 points
20.3%
2021
25.5%
3.6%
30
993.69 points
9:00 AM to 5:30 PM CET
Adidas
Airbus
Allianz
BASF
BMW
BaFin
Bayer
Beiersdorf
Black Monday 1987
Bloomberg
Börsen-Zeitung index
COVID-19 pandemic
Continental
Covestro
DAX
DAX committee
DAX indices
DE0008469008
December 30, 1987
Delivery Hero
Deutsche Bank
Deutsche Börse
Deutsche Börse AG
Deutsche Post
Deutsche Telekom
Deutscher Aktienindex
E.ON
ETFs
Euro
FDAX
Financial Times
Frankfurt Stock Exchange
Fresenius
Fresenius Medical Care
German economy
German stock index
Germany
Henkel

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2010
American
Beverly Hofstadter
Beverly's rigidity
Bill Prady
Chuck Lorre
English
Hofstadter family
Judd Hirsch
Leonard Hofstadter
Leonard's character development
Leonard's decisions
Leonard's independence
Sheldon Cooper
TV show
The Alien Parasite Hypothesis
The Big Bang Theory
The Big Bang Theory series
adventurous
amicable interactions
anthropologist
average
brown
casual clothing
casual dresser
contrasting with Beverly
cultural anthropology
cultural exploration
deep and calm
diverse
divorced
elderly
empirical research
exploring new cultures
family dynamics
favorable
few
fictional character
fieldwork
for research
free-spirited
freedom
from travels
gray
human cultures
implied Caucasian
in Leonard's life
in pop culture
laid-back
limited

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Assur
Assyrians
Babylon
Babylonians
Mesopotamia
Nineveh
Nippur
Sumerians
Ur
Uruk
ancient Mesopotamian festival
ancient Near East
the city of Ashur
the city of Assur
the city of Babylon
the city of Nineveh
the city of Nippur
the city of Ur
the city of Uruk

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
allegorical interpretation subject
allegory interpretation subject
anagogical interpretation subject
ancient text
anthropocentric subject
apocalyptic interpretation subject
apocalyptic literature
apostolic witness
archaeological source
authoritative scripture
authority interpretation subject
best-selling book
canonical criticism subject
canonical text
christocentric subject
christological interpretation subject
church foundation
clarity interpretation subject
collection of books
cosmocentric subject
covenant document
covenant history
covenant progression subject
covenant record
covenant-centric subject
covenantal interpretation subject
creation account
creational interpretation subject
cultural artifact
devotional text
discourse interpretation subject
diversity interpretation subject
divinely inspired text
doctrinal basis
doxocentric subject
dream interpretation subject
ecclesiocentric subject
ecclesiological interpretation subject
efficacy interpretation subject
epistle interpretation subject
epistolary collection
eschatocentric subject
eschatological interpretation subject
ethical system
faith standard
faith-centric subject
fall narrative
form criticism subject
foundational text
fulfillment interpretation subject

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
chariots
city walls
clay tablets
commoners
couriers
cuneiform
curled beards
deportation of populations
divination
drums
fringed garments
geometry
glazed bricks
goats
gold earrings
harps
herbal remedies
hierarchical
in kind
infantry
iron weapons
lamassu statues
later empires
libraries
lion hunting
lunisolar
medicine
metals
military prowess
monarchy
mudbrick
mutilation
nobles
oaths
omen texts
palaces
precious stones
provincial system
relief sculptures
royal roads
sexagesimal
sheep
siege towers
siege warfare
silver
stone
temple officials
temples
textiles
timber

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
323 BC
336 BC
356 BC
Alcetas
Alexander IV
Alexandria Eschate
Alexandria in Arachosia
Alexandria in Aria
Alexandria in Assyria
Alexandria in Bactria
Alexandria in Cappadocia
Alexandria in Carmania
Alexandria in Cilicia
Alexandria in Drangiana
Alexandria in Egypt
Alexandria in Epirus
Alexandria in Gedrosia
Alexandria in Greece
Alexandria in Hyrcania
Alexandria in Illyria
Alexandria in Macedonia
Alexandria in Margiana
Alexandria in Media
Alexandria in Mesopotamia
Alexandria in Paropamisadae
Alexandria in Parthia
Alexandria in Persis
Alexandria in Phoenicia
Alexandria in Pontus
Alexandria in Sogdia
Alexandria in Susiana
Alexandria in Syria
Alexandria in Thrace
Alexandria in the Caucasus
Alexandria on the Indus
Alexandria on the Oxus
Amyntas
Anatolia
Anaxarchus
Andronicus
Antigenes
Antigonus
Antipater
Archon
Ariobarzanes
Aristobulus
Ariston
Aristonous
Aristotle
Arsames

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1754 BC
18th century BC
1901
2.25 meters
282
Akkadian
Babylon
France
Gustave Jéquier
Hammurabi
Louvre Museum
Paris
Susa
adoption
agriculture
alcohol regulation
an eye for an eye
animal husbandry
animal injuries
assault
bankruptcy
blackmail
boat building
border disputes
bribery
bridge construction
brigandage
building codes
canal maintenance
caravan raiding
civil law
commercial law
contract law
counterfeiting
criminal law
crop damage
cuneiform
debt forgiveness
debt slavery
debts
diorite stele
divination
divorce
drought
dyke repair
embankment construction
embezzlement
epidemics
extortion
false accusation

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1998
2022
Akira Kurosawa
Amitabh Bachchan
Anurag Kashyap
Anushka Sharma
Anvita Dutt
Ayaan Khan
Babil Khan
Babilians
Babs
Bollywood
Cancer
English
Film Production
Filmfare Award
Filmfare Award for Best Male Debut
France
Friday Night Plan
Hindi
Hindi cinema
India
Indian actor
Instagram
Irrfan Khan
Japan
Kay Kay Menon
LGBTQ+ rights
Martin Scorsese
Mumbai
Naseeruddin Shah
Netflix
Om Puri
Oscar award
Qala
R. Madhavan
Satyajit Ray
Screen Award for Best Male Debut
Shiv Rawail
Sutapa Sikdar
Swastika Mukherjee
The Railway Men
Triptii Dimri
United Kingdom
United States
University of Westminster
acting
acting as passion
animal rights
art as expression

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
different for each story
due to his death
extensive
food and incense
foundation tablets
glazed bricks
in early texts
in history courses
in museums
incomplete records
later architectures
layered bricks
limited
local sources
looting
maintain the temple
mentioned in historical accounts
multiple
numerous
ongoing
part of Babylon site
political changes
preservation
proposed
rebuilding project
referenced in books
referenced in films
religious ceremonies
restricted
ruins
seven
slaves and workers
spiral
statues of gods
structural remains
tracking planets
war damage
ziggurat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1916
1923
1928
Alpina
Amsterdam Island
Antarctica
Arctic
Argentina
Armenia
Australia
Austria
Azerbaijan
BMW 3/15
BMW M
BMW R32
BMW i
Bangladesh
Bavaria
Bavarian Motor Works
Bavarian flag colors
Bayerische Motoren Werke
Bear Island
Belarus
Bhutan
Bjornoya
Bouvet Island
Brazil
Brunei
Bulgaria
Cambodia
Canada
China
Christmas Island
Cocos Islands
Cook Islands
Croatia
Crozet Islands
Czech Republic
Denmark
Desventuradas Islands
East Timor
Easter Island
Edgeoya
Egypt
Estonia
Falkland Islands
Faroe Islands
Fiji
Finland
France

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1863
Adalat
Adempas
Afrin
Aleve
Aliqopa
Alka-Seltzer
Aspirin Cardio
Avelox
Baycol
Bepanthen
Berocca
Betaferon
Canesten
Citracal
Claritin
Coppertone
Dr. Scholl's
Elevit
Essure
Eylea
Femibion
Finacea
Flintstones Vitamins
Friedrich Bayer
Germany
Glucobay
Jaydess
Johann Friedrich Weskott
Kerendia
Kyleena
Leverkusen
Midol
MiraLAX
Mirena
Neo-Synephrine
Nexavar
Nubeqa
One A Day
Phillips' Milk of Magnesia
Preparation H
Redoxon
Rid
Skyla
Sovaldi
Stivarga
Supradyn
Verquvo
Viktravi
Vitrakvi

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1890
ALV on Xetra
AZSEY on OTC Markets
Allianz
Allianz Agricultural Insurance
Allianz Arena
Allianz Art Insurance
Allianz Aviation Insurance
Allianz Bicycle Insurance
Allianz Boat Insurance
Allianz Business Insurance
Allianz Business Interruption Insurance
Allianz Car Insurance
Allianz Caravan Insurance
Allianz Classic Car Insurance
Allianz Commercial Vehicle Insurance
Allianz Computer Insurance
Allianz Consequential Loss Insurance
Allianz Construction Insurance
Allianz Credit Insurance
Allianz Critical Illness Cover
Allianz Cyber Insurance
Allianz Cyber Risk Insurance
Allianz Data Insurance
Allianz Directors and Officers Insurance
Allianz Electronics Insurance
Allianz Employers Liability Insurance
Allianz Energy Insurance
Allianz Engineering Insurance
Allianz Environmental Liability Insurance
Allianz Equipment Insurance
Allianz Event Insurance
Allianz Fleet Insurance
Allianz Global Investors
Allianz Goods in Transit Insurance
Allianz Health Insurance
Allianz Home Insurance
Allianz Hospital Cash Insurance
Allianz Income Protection
Allianz Investment Funds
Allianz Jewelry Insurance
Allianz Legal Protection
Allianz Liability Insurance
Allianz Life
Allianz Life Insurance
Allianz Loss of Profits Insurance
Allianz Machinery Insurance
Allianz Marine Insurance
Allianz Mobile Phone Insurance
Allianz Money Insurance

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
cultural heritage
cuneiform inscriptions
daily rituals
divination practices
divine kingship
early 20th century
economic functions
educational functions
foreign dignitaries
foundation deposits
glazed bricks
guardian statues
healing rituals
historians
historical records
inscriptions
judicial functions
large size
later religious buildings
later temples
legal documents
legends
library
modern reconstructions
mud bricks
multiple courtyards
multiple gates
myths
natural disasters
offerings rooms
oracles
pilgrims
prayer
priests of Marduk
priests' quarters
religious ceremonies
religious symbols
ritual texts
royal coronations
royal decrees
royal donations
sacrifices
sanctuary
seals
site of Akitu festival
statue of Marduk
stone reliefs
temple
temple estates
temple whose top is lofty

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1924
2005
2017
2021
2022
4D
AC Milan
Adidas Creators Club
Adidas NEO
Adidas Originals
Adidas Originals stores
Adidas Performance
Adidas Performance stores
Adidas app
Adiprene
Adolf Dassler
Al Rihla
All In
Argentina national football team
Arsenal
Azteca
Bayern Munich
Belgium national football team
Beyoncé
Boost
Bounce
Brazuca
Chelsea
Climacool
Climalite
Copa
Create the New
Damian Lillard
David Beckham
End Plastic Waste
FIFA World Cup
Fevernova
ForMotion
Forever adidas
Forever air
Forever basketball
Forever better
Forever climbing
Forever culture
Forever cycling
Forever design
Forever earth
Forever energy
Forever fashion
Forever faster

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
13
1975
1994
2000
2014
2016
2020
2021
American
American Academy of Arts and Sciences
AutoNation
BASIC interpreter for Altair 8800
Barack Obama
Beyond Meat
Bill & Melinda Gates Foundation
Bower Award for Business Leadership
Breakthrough Energy
Breakthrough Energy Ventures
Business @ the Speed of Thought
CEO of Microsoft
Cambridge University
Canadian National Railway
Cascade Investment
Corbis
English
Four Seasons Hotels
GAVI
Harvard University
How to Avoid a Climate Disaster
Jennifer Gates
Kristianne Gates
Lakeside School
Lasker-Bloomberg Public Service Award
Libby Gates
Mary Maxwell Gates
Medina, Washington
Melinda French Gates
Microsoft
Microsoft Office
Microsoft Windows
October 28, 1955
Open Letter to Hobbyists
Padma Bhushan
Paul Allen
Phoebe Gates
Presidential Medal of Freedom
Rory Gates
Seattle, Washington
TerraPower
The Big Bang Theory

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Tabqa Dam
Tabqa Dam Hydroelectric Plant
Tell Brak
Third River
Tigris River
Tigris-Euphrates river system
Turkey
Ur
Uruk
Western Asia
World Heritage sites nearby
Zeugma
about 2,800 kilometers
about 4,500 meters
about 500,000 square kilometers
ancient trade
arid
associated with gods
bird species
climate change
dams
declining
drinking water
fish species
from Ancient Greek
high flow in spring
historical ferries
historically frequent
historically navigable
hydroelectric power
in Christianity
in Islam
in Judaism
industrial use
international agreements
limited navigation
low flow in summer
mammals
marshland restoration
marshlands
modern dams
over 5,000 cubic meters per second
over-extraction
pollution
rainfall
riparian zones
river
river of life
sea level
semi-arid

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Gibeon
Hamath
Hammurabi
Hazor
Hebron
Heshbon
Ibleam
Ishtar
Jericho
Jerusalem
Joppa
Karkemish
Kingdom of Mari
Kingdom of Qatna
Kingdom of Yamhad
Lachish
Marduk
Mari
Megiddo
Palmyra
Petra
Qatna
Rabbah
Semitic
Shamash
Shamshi-Adad I
Shechem
Shiloh
Sidon
Sin
Sin-Muballit
Sumerian texts
Sumu-abum
Sumu-la-El
Syrian Desert
Taanach
Tadmor
Tyre
Ugarit
Yarim-Lim I
Zimri-Lim
ancient Semitic-speaking people
circa 2500-1600 BCE
development of cuneiform
establishing several Mesopotamian dynasties

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1960
1961
1963
1970
1972
1977
1980
1982 to 1990
1990
1993
1994
1997
2002
2003
2005
2006
2011
2013
2014
6 feet 1 inch
Abe Lincoln vs. Madison Avenue
Album of the Year
American comedian
Bachelor of Science in Business Management
Bel Air, Los Angeles
Bernard in The Rescuers
Bernard in The Rescuers Down Under
Best New Artist
Bob Hartley
Bob Newhart: Off the Record
Bob Newhart: Unbuttoned
Catch-22
Democratic Party
Dick Loudon
Elf
Ellen DeGeneres
George Burns
George David Newhart
Hollywood Boulevard
Hollywood Walk of Fame star
Horrible Bosses
I Shouldn't Even Be Doing This!
Irish American
Jack Benny
Jerry Seinfeld
Judd in The Simpsons
Julia Pauline Burns
July 18, 2024
Korean War
Los Angeles, California

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
ancient deportations
and literature
by Babylonians
by Jeremiah
capture of Jerusalem
city destruction
craftsmen
deportation of Jews
destruction of Solomon's Temple
development of Judaism
encouraged rebuilding
executed
exile laments
flourished
for idolatry
historians and theologians
historical period
in 516 BCE
in Babylon
in Isaiah
law and scripture
like Book of Esther
lingua franca
messianic redemption
mourns destruction
of Israel preceded it
opposition from Samaritans
pivotal in Jewish history
poor people in Judah
practice their religion
preserved in exile
prominence in Babylon
rebellion against Babylon
rebuilding of Jerusalem
rebuilding of the Temple
refer to events
remained in Judah
strengthened
submission to Babylon
supports biblical account
supports return policy
synagogue worship
temporarily
ten lost tribes
tolerant of religions
trade
warriors

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
community engagement
company
construction
construction materials
corporate governance
distribution networks
dividend payments
durable coatings
educational programs
electronic components
electronics
energy-efficient production
environmental protection
expansion through acquisitions
furniture
global logistics
global network
global presence
industry collaborators
initial public offering in 2015
innovation awards
insulation materials
leading in polycarbonates
leading in polyurethanes
lightweight components
medical devices
multiple countries
occupational health
over 17000
packaging
polycarbonates
polyurethanes
product stewardship
profitability
publicly traded
raw material sourcing
recycle materials
reduce greenhouse gas emissions
research institutions
revenue growth
safety glazing
shareholder meetings
specialty chemicals
sports
sports equipment
sports surfaces
spun off from Bayer
sustainability awards
sustainable solutions
technological advancements

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1871
Continental AG
Hanover, Germany
automotive actuators
automotive after-sales service
automotive application software
automotive artificial intelligence
automotive autonomous driving systems
automotive battery systems
automotive big data
automotive braking systems
automotive cables
automotive calibration equipment
automotive carbon neutrality
automotive certification testing
automotive charging systems
automotive chassis systems
automotive circular economy
automotive cloud computing
automotive cloud services
automotive company
automotive compliance
automotive conformance testing
automotive connectivity
automotive connectors
automotive continuous improvement
automotive control systems
automotive corporate governance
automotive crash testing
automotive customer satisfaction
automotive cybersecurity
automotive cybersecurity testing
automotive data acquisition
automotive data analysis
automotive data management
automotive diagnostic tools
automotive displays
automotive documentation
automotive driver assistance systems
automotive durability testing
automotive edge computing
automotive efficiency testing
automotive electric motors
automotive electric vehicle systems
automotive electromagnetic compatibility
automotive electronics
automotive embedded systems
automotive emissions testing
automotive enclosures
automotive environmental protection

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Literary scholars
Literary structure
Literature
Many languages
Many tablets incomplete
Meeting with Utnapishtim
Mesopotamian worldview
Modern adaptations
Modern culture
Mortality
Multiple versions
Mythological literature
Nineveh
Old Babylonian version
Ongoing by scholars
Other museums worldwide
Parallelism
Plant of rejuvenation
Poetic narrative
Political commentary
Power and responsibility
Praise of Uruk's walls
Prostitution scene
Quest for immortality
Relationship with deities
Repetition
Search for eternal life
Sha naqba īmuru
Shamhat
Sleep
Sumerian and Akkadian
Sumerian poems
Sîn-lēqi-unninni
Textual variants
Theologians
Theological elements
Twelve tablets
Uruk
Utnapishtim
Views on afterlife
Water
Wilderness
World literature
World literature courses
c. 1200 BCE
c. 2100 BCE
c. 2800–2500 BCE

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
15 million thalers
1870
1873
1999
2008 financial crisis
2010
Adelbert Delbrück
Aktiengesellschaft
Alexander Wynaendts
Asset Management
BaFin
Bankers Trust
Berlin
Christian Sewing
Commerzbank
Corporate Bank
DAX
DBK
DWS Group
Deutsche Bank Labs
Deutsche Bank Securities Inc.
Deutsche Bank Stiftung
Deutsche Bank Trust Company Americas
European Central Bank
European sovereign debt crisis
Fitch
Frankfurt
Frankfurt Stock Exchange
Germany
Goldman Sachs
HSBC
Investment Bank
JPMorgan Chase
London
Ludwig Bamberger
Moody's
Postbank
Private Bank
Standard & Poor's
addresses market risk
aims for sustainable growth
artificial intelligence applications
arts
asset management
backs educational programs
bank
billions of euros
blockchain exploration
blue
blue square with slash

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
fortifications
founder of Babylonian empire
from Persian Gulf to Assyria
historians
icon of ancient law
inscriptions
irrigation systems
later legal systems
law code stele
legal scholars
legal system
lex talionis
lists his achievements
personal injury
played rivals against each other
possibly as Amraphel
presumption of innocence
promoted Akkadian literature
property rights
protector of the weak
referenced in legal contexts
regulated trade
restored cities
retributive justice
royal inscriptions
servant of the gods
set interest rates
slavery
social hierarchy
southern Mesopotamia
standardized weights and measures
stele receiving laws from Shamash
supported temple cults
temples
the kinsman is a healer
three classes: awilum, mushkenum, wardum
through local officials
unified Mesopotamia
unknown
used diplomacy and force
varied by social class
year names

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1865
BAS
Badische Anilin- und Soda-Fabrik
DE000BASF111
Frankfurt Stock Exchange
Germany
Kurt Bock
Ludwigshafen
Martin Brudermüller
Rhineland-Palatinate
agricultural solutions
basacryl
basazol
basilen
basilen additives
basilen adhesives
basilen care chemicals
basilen catalysts
basilen coatings
basilen composites
basilen construction chemicals
basilen dispersions
basilen dyes
basilen engineering plastics
basilen foams
basilen intermediates
basilen leather chemicals
basilen mining chemicals
basilen nutrition and health
basilen oilfield chemicals
basilen paper chemicals
basilen performance chemicals
basilen pigments
basilen polyurethanes
basilen resins
basilen sealants
basilen specialties
basilen textile chemicals
basilen water treatment chemicals
basocryl
basoplast
basotect
catalysts
cellasto
chemical company
chemicals
coatings
crop protection products
dispersions
elastollan

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1995
Bonn
Borussia Dortmund
DE0005557508
DTE
Deutsche Bundespost
Europe
FC Bayern Munich
Frankfurt Stock Exchange
German government
German national football team
Germany
GigaTV
Hannover 96
Hrvatski Telekom
IPTV services
Magenta Telekom
MagentaCLOUD
MagentaEINS
MagentaMobil
MagentaMusik
MagentaSport
MagentaTV
MagentaZuhause
Magyar Telekom
OTE
Olympic Games
Slovak Telekom
T-Mobile US
T-Mobile brand
T-Systems
Telekom
Telekom 5G
Telekom Apps
Telekom Audio
Telekom Backup
Telekom Banking
Telekom Billing
Telekom Books
Telekom Broadband
Telekom Bundles
Telekom Business
Telekom Cables
Telekom Calls
Telekom Car
Telekom Cloud
Telekom Compliance
Telekom Consulting
Telekom Contracts
Telekom CustomerService

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Frankfurt Stock Exchange
Germany
Global certifications
Governments
Guillaume Faury
Hamburg, Germany
Helicopters
High safety standards
ISO certifications
Improving fuel efficiency
Innovation prizes
Introduced A380 in 2007
Largest commercial aircraft manufacturer
Leading helicopter manufacturer
Leiden, Netherlands
Listed on stock exchanges
Lockheed Martin
Madrid Stock Exchange
Major defense contractor
Market capitalization in billions
Meets EASA standards
Meets FAA standards
Merged with other European aerospace companies
Military aircraft
Military forces
Mobile, Alabama, USA
NASA
Numerous industry awards
Operations in over 100 countries
Over 130,000
Over 50 billion euros
Profitable years
Prominent space company
Reducing emissions
Researching hydrogen-powered aircraft
Rigorous testing
Safety accolades
Satellites
Service centers worldwide
Seville, Spain
Space agencies
Space exploration
Space station modules
Space systems
Spain
Supply chain networks
Thousands of aircraft
Tianjin, China
Toulouse, France
Training facilities

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
astronomy
borrowed from Sumerian
circa 2500 BCE to 100 CE
clay tablets
compound words
conditional sentences
contracts
coordination
court records
cuneiform
derivational morphology
diplomacy
divination
emphatic consonants
extinct language
from Sumerian cuneiform
gendered nouns
grammar books
guttural sounds
historical records
hymns
incantations
include divine elements
inflectional morphology
key to understanding ancient Mesopotamia
language
law
law codes
library of Ashurbanipal
linguistics
literature
loanwords in other languages
logographic and syllabic use
mathematics
medicine
multilingual texts
no native speakers
noun cases
often theophoric
omens
other Semitic languages
prayers
prefix and suffix conjugations
preserves myths and laws
reflect culture
relative clauses
religion
research institutes
rituals
root-based morphology

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1993
360T
360T in 2015
9:00 to 17:30 CET
Aktiengesellschaft
BaFin
CME Group
Clearstream
Clearstream Banking AG
Clearstream International
Clearstream in 2002
Clearstream risk controls
Clearstream settlement service
DAX
DAX index
DB1
Deutsche Börse AG
Deutsche Börse Cloud Exchange
Deutsche Börse Colocation
Deutsche Börse Commodities
Deutsche Börse Foundation
Deutsche Börse Market Data + Services
Deutsche Börse Systems
Deutsche Terminbörse
ESG indices
ESG initiatives
Eurex
Eurex Clearing
Eurex Clearing risk framework
Eurex Frankfurt AG
Eurex T7
Eurex derivatives exchange
Euronext
Euronext in 2006
European Securities and Markets Authority
Federation of European Securities Exchanges
Frankfurt
Frankfurt Stock Exchange
General Standard
German Futures Exchange
Germany
Intercontinental Exchange
London Stock Exchange Group
London Stock Exchange in 2000
London Stock Exchange in 2016
MDAX index
NYSE Euronext in 2011
Nasdaq
Prime Standard
Qontigo

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Shamash-shum-ukin
Sherua-eterat
Sumerian
Taharqa
Tantamani
Teumman
administrator
ancient Mesopotamian religion
appears in popular culture
appointed governors
astronomical texts
astronomy
banquet scenes
builder
cavalry use
chariot corps
clay tablets
commissioned artworks
cuneiform texts
divination
educated
empire declined after his death
featured in museums
human
hunter king
king
last great Assyrian king
library foundation for modern Assyriology
lion hunt reliefs
literary works
mathematics
medical texts
militaristic
military campaigns
palaces in Nineveh
preserved Mesopotamian literature
religious texts
reorganized provinces
scholar king
scholarship
scribal training
siege warfare
subject of scholarly studies
supported scribes
temples
trade expansion
tribute collection

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
implements AI in logistics
innovative logistics provider
insured mail
international markets
introduction of Packstation
invests in digital solutions
invests in green technologies
leading postal service in Germany
logistics
mail delivery
major employer in Germany
meets international standards
merger into Deutsche Post DHL Group
millions of private customers
mobile apps
next-day delivery for letters
ocean freight services
offers hotline support
online postage
operates in over 220 countries
over 500000
packstation services
parcel delivery
pays dividends
pension plans
post office boxes
postal services
privatization in 1995
profitable company
promotes education
provides online help
provides universal postal service in Germany
recognized for sustainability
registered mail
regulated by Bundesnetzagentur
road freight services
serves all German postal codes
significant government holding
specified delivery times for parcels
state-owned enterprise
supports disaster relief
supports global trade
top employer awards
tracking services
training programs
trusted brand in Germany
uses automated sorting systems
works with retail partners
works with ver.di
yellow

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19.3 billion euros
2021
2023
2024
24/7 roadside assistance
3.9 billion euros
5.4 billion euros
50.9 billion euros
67.1 billion euros
89.29%
Active Brake Assist
Africa
Asia
Attention Assist
Beijing Foton Daimler Automotive
Benz & Cie.
BharatBenz
Brazil
CNH Industrial
DE000DTR0CK8
DTG
Daimler AG
Daimler Buses
Daimler Truck Academy
Daimler Truck Financial Services
Daimler Truck North America
Daimler-Benz
Daimler-Motoren-Gesellschaft
DaimlerChrysler
December 10, 2021
Detroit Connect
Electronic Stability Program
Europe
Fleet Owner Magazine awards
Frankfurt Stock Exchange
Freightliner
Fuso
GenH2 Truck
Germany
Green Truck Award
ISO 14001
India
International Truck of the Year
Japan
Joe Kaeser
Kamaz
Lane Keeping Assist
Latin America
Leinfelden-Echterdingen, Germany
Martin Daum

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Alfred Hofstadter
American
American Psychological Association
Christine Baranski
EEG devices
English
Harvard University
Johns Hopkins University
Journal of Neuroscience
Leonard Hofstadter
MD in Psychiatry
MRI machines
MacArthur Fellowship
Nature
Nobel Prize in Physiology or Medicine
PhD in Neuroscience
Princeton University
Raising a Prodigy
Science
Society for Neuroscience
The Big Bang Theory
The Lancet
The Maternal Bond
The Neuropsychology of Love
advance science
analytical
as a character archetype
at academic conferences
at universities
atheist
attending lectures
author
behavioral science
by other researchers
child development
clinical studies
clinical trials
cognitive psychology
cold and analytical personality
competitive
conducting psychological experiments on her son
conservative
critical thinking
diagnostic tools
direct
disciplined
documentaries
emotional attachment
emotional displays
emotionally distant

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
chaos
clay tablets
comparative mythology
cosmogony
creation of humanity
creation of the world
cuneiform script
divine kingship
earth
elevates Marduk over Enlil
epic
first millennium BCE
foundational Babylonian text
fragmentary
fresh water
from multiple copies
gods appoint Marduk
heaven
incomplete
key to understanding ancient cosmology
later Mesopotamian culture
later composition
legitimize Babylonian kingship
legitimize Marduk's supremacy
net
oldest known creation epic
order from chaos
other ancient Near Eastern myths
parallelism
poetic
poetic work
popular culture
praise of Marduk
primordial gods and conflict
religious ritual
religious text
repetition
rise of Marduk
salt water
second millennium BCE
serve the gods
seven tablets
supreme authority
theomachy
understanding Babylonian religion
urban civilization values
winds

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
10%
1000 points
40
9:00 AM to 5:30 PM CET
Adidas
Airbus
Allianz
BASF
BMW
Bayer
Beiersdorf
Bloomberg
Commerzbank
Continental
Covestro
DAX
DE0008469008
Daimler Truck
Delivery Hero
Deutsche Bank
Deutsche Börse
Deutsche Börse indices
Deutsche Post
Deutsche Telekom
Deutsche Wohnen
Deutscher Aktienindex
E.ON
EU Benchmark Regulation
Euro
Euro Stoxx 50
European Central Bank policies
European Securities and Markets Authority
FDAX
Frankfurt Stock Exchange
Fresenius
Fresenius Medical Care
German equity market
Germany
HelloFresh
Henkel
Infineon
July 1, 1988
Linde
Lyxor DAX UCITS ETF
MDAX
MTU Aero Engines
March, June, September, December
Mercedes-Benz Group
Merck
Munich Re

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1,000 points
10%
15 seconds
2008 financial crisis
40
846900
9:00 AM to 5:30 PM CET
Allianz
BASF
Bloomberg
CAC 40
COVID-19 pandemic
DAX
DAX 30
DAX 40
DAX 50 ESG
DAX indices
DE0008469008
December 30, 1987
Deutsche Börse
ETFs
EU Benchmarks Regulation
Eurex
Euro
FTSE 100
FactSet
Frankfurt Stock Exchange
German equity market
Germany
ICB
July 1, 1988
MDAX
March, June, September, December
Prime Standard segment
Reuters
S&P 500
SAP
SDAX
STOXX
STOXX Ltd
September 20, 2021
Siemens
TecDAX
VDAX
Volkswagen
acquisitions
affect composition
announced in advance
automatic
below 1,000 points

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
until 2016

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2000
2045
Czech Republic
DE000ENAG999
E.ON Energie
E.ON SE
E.ON Stiftung
E.ON Sverige
E.ON UK
ENAG99
EOAN
EU energy regulations
EnBW
Essen, Germany
Europe
European energy transition
European hydrogen initiatives
Federal Network Agency
Frankfurt Stock Exchange
German Energy Agency
Germany
Hungary
Innogy operations
Innogy's network business
Innogy's retail business
Leonhard Birnbaum
RWE
Romania
Slovakia
Sweden
Uniper
Uniper in 2016
United Kingdom
VEBA and VIAG merger
Vattenfall
annual reports
approximately 72000 people
art
artificial intelligence
available
battery storage solutions
billions of euros
businesses
by rating agencies
climate neutrality
community projects
conventional power generation
corporate restructuring
cultural activities
customer base

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2001: A Space Odyssey
@billprady
American
American Civil Liberties Union
Amy Sherman-Palladino
Bachelor of Arts
California
Carl Sagan
Chuck Lorre
Comic-Con
Cosmos by Carl Sagan
Democratic Party
Dharma & Greg
Dharma & Greg episodes
Dottie Dartland
Douglas Adams
Dream On
Emmy Awards
Gilmore Girls
Gilmore Girls episodes
Isaac Asimov
Jim Henson
Judaism
July 7, 1960
LGBTQ rights
Los Angeles
New York
Planned Parenthood
Primetime Emmy Award
Producers Guild of America Award
Rebecca Rand
September 10, 2000
Star Trek
Star Trek: Voyager
Star Trek: Voyager episode 'The Thaw'
The Big Bang Theory
The Big Bang Theory episodes
The Big Bang Theory pilot
The Big Bang Theory set
Twitter
United States
University of Maryland
Writers Guild of America Award
articles about The Big Bang Theory
artificial intelligence
aspiring writers
at industry events
at universities
biographies of Chuck Lorre
budget management

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 362.2s → outputs in runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251029_231623
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
standard weapons
standing bureaucracy
subartu
temple construction
trade network
used
used Akkadian language
used by infantry
used in military
weights and measures

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Infineon
July 1, 1988
July 26, 1988
Linde
MDAX
Mercedes-Benz Group
Merck
Munich Re
November 17, 2021
ODAX
Porsche
Porsche Automobil Holding
Qiagen
RWE
Reuters
SAP
SDAX
Sartorius
Siemens
Symrise
TecDAX
VDAX
Volkswagen
Vonovia
Xetra trading system
Xtrackers DAX UCITS ETF
Zalando
analysts
automotive
blue-chip index
chemicals
consumer goods
costs
derivatives
deutsche-boerse.com
diverse
dividends
dot-com bubble
every second
financial crisis 2008
financial products
financials
free float
free-float market capitalization
from 30 to 40 constituents
fund managers
futures
healthcare
iShares DAX UCITS ETF
industrial

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] output_dir: runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] seeded: The TV Series Big Bang Theory
[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: The TV Series Big Bang Theory

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
minimal
minor
moderate
multiple
multiple episodes
nomadic
non-conformist
none
none notable
none specific
occasionally
of Leonard's childhood
of various cultures
on anthropology
on parenting
on science
one son
personal growth
positive
relaxed
researcher
season 4
sitcom universe
static
storytelling
supporting character
sympathetic
to Leonard
traveling
traveling anthropologist
university
various locations
with Amy
with Bernadette
with Beverly
with Howard
with Penny
with Raj
with main characters

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
city walls
classical sources
cuneiform script
dates
deportation of conquered peoples
divination
enemies
enemy heads on poles
ethnic group
fortified cities
fortresses
fringed garments
from conquered territories
gates with protective deities
glazed bricks
goats
hunting scenes
in British Museum
in Louvre Museum
into specialized units
iron weapons
irrigation agriculture
ivory carvings
jewelry
king as supreme ruler
lamassu statues
later empires
lions
long-distance trade
luxury goods
massive palaces
mathematics
mercenaries
merchant class
metals
metalwork
military colonies
military prowess
nobility class
on clay tablets
peasant class
polytheistic religion
priestly class
professional army
provincial system
psychological warfare
rebellious rulers
relief sculptures
road networks
royal ceremonies

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
a ziggurat
agriculture
ancient civilization
archers
arid
as currency
barley
c. 1100–539 BCE
c. 1158 BCE
c. 1500–1100 BCE
c. 2700 BCE
c. 2700–1600 BCE
c. 539 BCE
ceramics
chariots
clay tablets
conduct business
contracts
copper
cylinder seals
dates
dedicated to gods
descent from gods
divination
glazed bricks
goats
grand regent
highland
in 19th century
in Fars Province
in Khuzestan Province
inhabited since 4000 BCE
inscriptions
internal strife
jewelry
king of Anshan and Susa
language isolate
later Persian culture
law codes
local rulers
lunar calendar
metalworking
mountains
mud-brick
one of the oldest cities
own property
plains
polytheism
pottery
sheep

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Marsh Arabs
Nabonidus
Nabu
Najaf Province
Nebuchadnezzar II
Nebuchadnezzar II ruled here
Nebuchadnezzar's Palace
Nippur ruins
Northern Palace
Processional Way
Saddam Hussein rebuilt parts of Babylon
Shia Islam majority
Southern Palace
Sumerian
Tiamat
Tower of Babel
Tower of Babel site
University of Babylon
Walls of Babylon
Wasit Province
affected by ISIS conflict
affected by Iraq War
agriculture
ancient Babylon
ancient Babylon ruins
ancient irrigation canals
barley production
center of ancient Babylonian Empire
citrus fruits
conquered by Alexander the Great
conquered by Muslim Arabs
conquered by Parthians
conquered by Persians
conquered by Sassanians
cuneiform
date palm cultivation
dates
desert climate
fish in Euphrates River
football is popular
fruit orchards
grapes
highways connect to Baghdad
location of Code of Hammurabi
low annual rainfall
mentioned in Bible
migratory birds
ongoing archaeological restoration
over 2 million people
pomegranates

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
crown and scepter
detailing reign
during reign
for affected areas
for decisions
for empire
for record keeping
for river transport
for ruthlessness
for strength
for subjects
from conquered lands
from foreign lands
from gods
from local rulers
from nobles
from provinces
historians
historical figure
illness
in Assyria
in Babylon
in Babylonia
in Egypt
in ancient Near East
in battles
in border regions
in conquered territories
in court
in family
in inscriptions
in regions
king of Assyria
king of Babylon
king of Sumer and Akkad
king of the Four Corners
like droughts
like generals
military campaigns
multiple times
of documents
of loyalty
of rebellion
of victories
on clay prisms
on succession
personally
reliefs
severely
stable empire transition

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
ensure regulatory compliance
executive board
expanded internationally in 20th century
food and beverage
formulation development
formulators
founded in Mülheim an der Ruhr
global chemical producers
global market leader
global supply chain
growth through acquisitions
increase renewable energy use
industrial manufacturers
ingredients
innovation and technology
intermediates
largest chemical distributor
leadership programs
listed on stock exchange in 2010
oil and gas
operational excellence
over 16 billion euros
over 17,500 people
over 77 countries
personal care
pharmaceuticals
plastics
polymers
prevent chemical accidents
processors
product testing
profitable
raw material suppliers
rebranded as Brenntag in 2006
recognized globally
reduce carbon emissions
reliable supplier
safety training
solvents
specialty chemicals
supervisory board
supply chain optimization
sustainable growth
sustainable packaging
talent development
technical support
transportation services
trusted partner
two-tier board system
warehousing facilities

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
trade
treaties
war captives
wheat
ziggurats

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
family law
famine
farming
fire damage
fishing
fishing rights
flood control
flood damage
forgery
fraud
gate building
grazing rights
herding
highway robbery
hostage taking
house building
hunting
hunting rights
inheritance
innkeeping
insolvency
interest rates
irrigation
kidnapping
labor law
lease agreements
legal code
lex talionis
loans
marriage
medical malpractice
military service
mining rights
mortgages
murder
navigation
omens
palace construction
perjury
pestilence
piracy
prices
priestly duties
property rights
prostitution
public health
quarantine
ransom
religious offenses
rental property

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 373.6s → outputs in runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251029_231623
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
ABC
American
American television producer
Ashton Kutcher
Bachelor of Arts
Bethpage, New York
Bill Prady
Bob Hearts Abishola
Bookie
CBS
Charles Michael Levine
Charlie Sheen
Chuck Lorre Productions
Classic sitcoms
Collaborative
Composer
Consistent hits
Cybill
Dharma & Greg
Divorced
Eccentric
Emmy Award
English
Extensive
Family dynamics
Feud with Charlie Sheen
Formulaic
Friendship
Generally good
Grace Under Fire
Guitar
Heart surgery in 1990s
High
Highly successful
Hundreds of millions
In his shows
In multiple languages
Influential producer
Jewish
Large
Laugh track
Lee Aronsohn
Los Angeles, California
Lucrative
Mike & Molly
Millions
Mom
More shows
Multi-camera
Multiple

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
French Polynesia
Galapagos Islands
Georgia
Germany
Greece
Greenland
Heard Island
Hopen
Hungary
Iceland
India
Indonesia
Ireland
Italy
Jan Mayen
Japan
Juan Fernandez Islands
Kazakhstan
Kerguelen Islands
Kiribati
Kong Karls Land
Kyrgyzstan
Laos
Latvia
Lithuania
Lord Howe Island
Macquarie Island
Malaysia
Maldives
Marshall Islands
McDonald Islands
Mexico
Micronesia
Mini
Moldova
Mongolia
Munich
Myanmar
Nauru
Nepal
Netherlands
New Caledonia
New Zealand
Niue
Norfolk Island
North Korea
Norway
Oliver Zipse
Pakistan
Palau

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2010
4 feet 11 inches
Halley Wolowitz
Howard Wolowitz
Melissa Rauch
Mike Rostenkowski
Neil Michael Wolowitz
PhD in microbiology
The Big Bang Theory
University of California
Zangen Pharmaceuticals
accurate
adaptable
adventurous
ambitious
analytical
antibiotics
approachable
assertive
authentic
brave
caring
collaborative
communicative
compassionate
competitive
confident
courageous
creative
critical thinker
curious
decisive
dependable
detail-oriented
determined
disciplined
down-to-earth
driven
efficient
empathetic
fearless
fictional character
fierce
flexible
focused
forgiving
funny
genuine
goal-oriented
grounded

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Adapa myth
Akkadian
An
Anshar
Antu
Anu
Anu the Great
Anunitu
Anunitum
Anunna
Anunnaki
Anzu myth
Assur
Atra-Hasis
Babylonian
Der
Dyaus Pita
Eanna temple
El
Enki
Enki and Ninmah
Enlil
Enuma Elish
Epic of Gilgamesh
Father Anu
Father of the Gods
Gibil
Igigi
Inanna
Jupiter
Ki
King of Heaven
Kishar
Lagash
Lord of the Sky
Mesopotamian deity
Nanna
Ninhursag
Ninsar
Nisaba
Sumerian
Tian
Uranus
Uras
Uruk
Utu
Zeus
creator
divine assembly
father of the gods

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
genealogical record
genealogy interpretation subject
glory-centric subject
gospel collection
gospel interpretation subject
gospel-centric subject
grace-centric subject
historical criticism subject
historical document
historical interpretation subject
historical narrative
history interpretation subject
holiness-centric subject
holy book
hope-centric subject
inerrancy interpretation subject
infallibility interpretation subject
influential work
inspiration interpretation subject
justice-centric subject
kingdom interpretation subject
kingdom-centric subject
law code
law interpretation subject
law-centric subject
legal document
life-centric subject
linguistic corpus
literal interpretation subject
literary interpretation subject
literary work
love-centric subject
meditation source
mercy-centric subject
metaphor interpretation subject
miracle account
miracle interpretation subject
missiocentric subject
moral code
moral interpretation subject
narrative criticism subject
narrative interpretation subject
necessity interpretation subject
parable collection
parable interpretation subject
pneumatocentric subject
pneumatological interpretation subject
poetic work
poetry interpretation subject
prayer book

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1998
Agricultural derivatives
Agricultural futures
Agricultural index derivatives
Agricultural options
Bond derivatives
Bond futures
Bond index derivatives
Bond options
Coal derivatives
Coal futures
Coal index derivatives
Coal options
Commodity derivatives
Commodity index derivatives
Commodity index futures
Commodity index options
Commodity options
Credit default swap index futures
Credit default swap index options
Credit derivatives
Credit futures
Credit index derivatives
Credit options
Currency derivatives
Currency futures
Currency index derivatives
Currency options
Derivatives exchange
Deutsche Börse Group
Dividend derivatives
Dividend futures
Dividend index derivatives
Dividend options
Emissions derivatives
Emissions futures
Emissions index derivatives
Emissions options
Energy derivatives
Energy futures
Energy index derivatives
Energy options
Equity derivatives
Equity futures
Equity index derivatives
Equity index futures
Equity index options
Equity options
Eurex Frankfurt AG
Eurex Zurich AG

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] output_dir: runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231623
[crawler] seeded: DAX 40 Index
[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: DAX 40 Index

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1950
1956
1957
1962
1966
1966-1968
1970
1994
2000-2017
2012
6
6 feet 2 inches
Back to the Batcave
Batman
Batman vs. Two-Face
Batman: Return of the Caped Crusaders
Batman: The Animated Series
Batman: The Brave and the Bold
Batman: The Movie
Bewitched
Billie Lou Yeager
Bruce Wayne
Burt Ward
Captain Man
Captain Man in The Fairly OddParents
Chill
Doin' Time on Planet Earth
Dr. Clayton Forrester
Drop Dead Gorgeous
Family Guy
Fantasy Island
Frisbie Dawson
Geronimo
Hollywood Boulevard
Hollywood Walk of Fame star
Hooper
I Take These Men
Jeff Rovin
Johnny Bravo
June 9, 2017
Los Angeles, California
Mara of the Wilderness
Marcelle Tagand Lear
Mayor Adam West
Mayor Adam West in Family Guy
Meet the Robinsons
Mission: Impossible
Monster Island
Murder, She Wrote
NewsRadio

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
art films
assistant director
award shows
black
brand endorsements
brown
casual clothing
charitable organizations
classical music
controversies
craft
creativity
direct films
directors
documentaries
dog
emotional performances
environmental conservation
equality
family
film festivals
film studies
global recognition
gracefully
guitar
his father
honesty
human emotions
indie music
international acclaim
interviews
introverted
karma
literature
low profile
magazines
many
meaningful cinema
media outlets
meditation
mental health awareness
method acting
millions
minimalist lifestyle
multiple
music
music videos
naturalistic acting
painting
personal growth

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Bernadette Rostenkowski
Caltech
Cinnamon the cat
Dungeons & Dragons
Europe
Howard Wolowitz
Leonard Hofstadter
Mayim Bialik
McArthur Genius Grant
Mozart
Nobel Prize in Physics
Pasadena
Penny Hofstadter
Penny's career
Raj Koothrappali
Relationship Agreement with Sheldon
Sheldon Cooper
Sheldon Cooper on research
Sheldon's female counterpart
Thai food
The Big Bang Theory
a sensible car
about human behavior
about relationships
art
as fictional characters
at international symposiums
at parties
at universities
at university
behavioral experiments
birds
blunt
brain imaging
by science magazines
cardigans
classical music
comic conventions
compassionate
complex mathematics
conservative and practical
evolved over seasons
fMRI machine
fantasy novels
fictional character
for research funding
for scientific journals
for work
friends on personal issues
friendship

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
100 Greatest Discoveries
1977
American
Bachelor of Science in Mechanical Engineering
Bill Nye Saves the World
Bill Nye the Science Guy
Bill Nye's Global Meltdown
Bill Nye's Science Rules!
Bill Nye's Solving for X
Bill Nye's The Climate Code
Bill Nye's The End Is Nye
Bill Nye's The Eyes of Nye
Bill Nye's The Science Guy
Boeing
CEO of The Planetary Society
Cornell University
Dancing with the Stars
Inside Amy Schumer
MythBusters
November 27, 1955
Stargate Atlantis
The Adventures of Elmo in Grouchland
The Big Bang Theory
The Climate Code
The Dr. Oz Show
The End Is Nye
The Eyes of Nye
The Late Show with Stephen Colbert
The Planetary Society
The Science Channel
The Simpsons
The X-Files
Washington, D.C.
William Sanford Nye
actor
author
mechanical engineer
person
science communicator
television host

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2011
2017
Aktiengesellschaft
Always delivering an amazing experience
Americas
Asia
Australia
Berlin
DHER
Damejidlo
DoorDash
Europe
Foodpanda
Frankfurt Stock Exchange
GPS tracking
Germany
Grubhub
HungryPanda
Just Eat Takeaway.com
Kolja Hebenstreit
Latin America
Lieferheld
Lukasz Gadowski
Markus Fuhrmann
Middle East
New Zealand
Niklas Östberg
Oceania
PedidosYa
Pizza.de
South Korea
Southeast Asia
Swiggy
Talabat
Team Europe
Turkey
Uber Eats
Yemeksepeti
Zomato
acquisitions
advertising
artificial intelligence
billions of euros
billions of euros annually
carbon offset programs
cash on delivery
cloud kitchens
collaboration
commission fees
company

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Forever fire
Forever football
Forever game
Forever golf
Forever green
Forever hiking
Forever innovation
Forever motion
Forever music
Forever original
Forever outdoor
Forever passion
Forever running
Forever skate
Forever snow
Forever spirit
Forever sport
Forever sportswear
Forever stronger
Forever style
Forever swim
Forever tennis
Forever three stripes
Forever training
Forever water
Forever yoga
Formotion
Gazelle
Germany
Germany national football team
Herzogenaurach
Hu NMD
Impossible is Nothing
Ivy Park
Jabulani
James Harden
Juventus
Kanye West
Kylian Mbappé
Lionel Messi
Manchester United
MiCoach
Olympic Games
Parley for the Oceans
Paula Radcliffe
Pharrell Williams
Predator
Primeknit
Questra
Real Madrid

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Arsites
Artabazus
Asander
Atropates
Attalus
Autophradates
Babylon
Bactria
Balacrus
Battle of Gaugamela
Battle of Granicus
Battle of Issus
Battle of the Hydaspes
Bucephalus
Callisthenes
Caranus
Cassander
Cleander
Cleitus the Black
Cleomenes
Coenus
Craterus
Darius III
Demaratus
Demetrius
Diodotus
Egypt
Eumenes
Harpalus
Hephaestion
Heracles
King Porus
Leonidas
Leonnatus
Leosthenes
Lysimachus
Macedonia
Mazaeus
Meleager
Memnon
Menander
Menes
Mesopotamia
Mithridates
Mithrobuzanes
Nearchus
Neoptolemus
Nicanor
Olympias
Onesicritus

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
30 Rock
Agnes of God
American actress
Austin Powers: International Man of Mystery
Billie Lourd
Bryan Lourd
Burbank, California
Catastrophe
Central School of Speech and Drama
Dan Aykroyd
Debbie Reynolds
December 27, 2016
Delusions of Grandma
Eddie Fisher
Emmy Award nomination
Family Guy
Fanboys
French bulldog
George Lucas
Hannah and Her Sisters
Harrison Ford
Hook
Irene
Jay and Silent Bob Strike Back
Joely Fisher
Leia's cinnamon bun hairstyle
Leia's gold bikini
Lethal Weapon 3
Los Angeles, California
Mike Nichols
October 21, 1956
Outbreak
Paul Simon
Paul Simon from 1983 to 1984
Postcards from the Edge
Princess Leia Organa
Robot Chicken
Sarah Lawrence College
Scream 3
Shockaholic
Sister Act
Soapdish
Star Wars merchandise
Star Wars: A New Hope
Star Wars: Return of the Jedi
Star Wars: The Empire Strikes Back
Star Wars: The Force Awakens
Star Wars: The Last Jedi
Star Wars: The Rise of Skywalker
Steven Spielberg

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
$350
1965
1966
1969
1977
1989
1990
1992
1993
1994
1995
2002
2003
2005
2007
2009
2013
2016
2019
2020
2021
5 feet 6 inches
78 as of 2023
@BurtWard
Adam West
American actor
Batman: The Brave and the Bold
Batman: The Movie
Bert John Gervis Jr.
Boy Wonder: My Life in Tights
California
Christian
Dick Grayson
Donald Trump
Dynamic Duo
Gentle Giants Rescue and Adoptions
Great Danes
Hollywood Boulevard
Holy [something], Batman!
July 6, 1945
Kathy Kersh
Lisa
Los Angeles, California
Mariana Torchia
Melody
Poppy
Protestant
Republican
Robin
Starring Adam West

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Loyola University Chicago
Major Major
Mark Twain
Mark Twain Prize for American Humor
Newhart
Oak Park, Illinois
P.G. Wodehouse
Papa Elf
Primetime Emmy Awards
Professor Proton
Roman Catholic
Saturday Night Live
September 5, 1929
Television Hall of Fame
The Big Bang Theory
The Bob Newhart Show
The Button-Down Mind of Bob Newhart
The Driving Instructor
The Ed Sullivan Show
United States Army
Virginia Quinn
accountant
achieved long-term sobriety
actor
advertising copywriter
alcoholism
battled alcoholism
beloved and respected
corporal
deadpan
film actor
four children
gentlemanly
golf
influenced modern comedians
innkeeper
involved with USO
known for clean humor
multiple
multiple times
one-sided telephone conversations
psychologist
reading
semi-retired in later years
stand-up comedian
supported multiple causes
television actor
three sisters
voice actor

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2001
American actor
B-4
Broadway
Cheers
Data
Dr. Arik Soong
Dr. Brackish Okun in Independence Day
Dr. Noonien Soong
Dude, Where's My Car?
Emmy Awards
February 2, 1949
Fresh Hell
Friends
Hill Street Blues
Houston, Texas
Independence Day
Independence Day: Resurgence
Jackson Spiner
Lore
Loree McBride
Mad About You
Maury Yeston
Night Court
Out to Sea
Phenomenon
Saturn Awards
St. Jude Children's Research Hospital
Star Trek: First Contact
Star Trek: Insurrection
Star Trek: Nemesis
Star Trek: Picard
Star Trek: The Next Generation
Stephen Sondheim
The Aviator
The Big Bang Theory
The Outer Limits
The Planetary Society
The Simpsons
The Trevor Project
a background in improvisation
a charity work
a comedian
a comedic timing
a convention appearances
a distinctive voice
a fan of classic films
a fan of jazz music
a frequent collaborator with Gates McFadden
a frequent collaborator with Jonathan Frakes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Telekom DSL
Telekom Data
Telekom DataCenter
Telekom Deals
Telekom Deployment
Telekom Development
Telekom Discounts
Telekom Education
Telekom Energy
Telekom Entertain
Telekom Files
Telekom Finance
Telekom Games
Telekom Glasfaser
Telekom Hardware
Telekom Healthcare
Telekom Home
Telekom Images
Telekom Infrastructure
Telekom Innovations
Telekom Insurance
Telekom International
Telekom Invoicing
Telekom IoT
Telekom LTE
Telekom Local
Telekom MMS
Telekom Mail
Telekom Maintenance
Telekom Maps
Telekom Marketing
Telekom Media
Telekom Messaging
Telekom Mobility
Telekom Music
Telekom Narrowband
Telekom National
Telekom Navigation
Telekom Networks
Telekom News
Telekom Offers
Telekom Office
Telekom Packages
Telekom Partner
Telekom Payments
Telekom Plans
Telekom Prepaid
Telekom Privacy
Telekom Promotions
Telekom Protocols

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Xarelto
Xofigo
aspirin
biotechnology
chemicals
ciprofloxacin
glyphosate
heroin
inventing aspirin
inventing heroin
kogenate
levitra
mirena
neonicotinoids
pharmaceutical company
pharmaceuticals
polyurethane
prontosil
trifluralin
yasmin

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
tourist visits
treasury
true
wall paintings
wars

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
silt deposition
snowmelt
the Bible
the Quran
the great river
under 100 cubic meters per second
used for agriculture
varies seasonally
water disputes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The Giving Pledge
The Global Fund
The Road Ahead
The Simpsons
The Social Network
Traf-O-Data
WHO
Warren Buffett
William H. Gates Sr.
William Henry Gates III
a mansion called Xanadu 2.0
a private jet
a tic-tac-toe game
agricultural development
battery storage technology
business magnate
carbon capture technology
chairman of Microsoft
chief software architect of Microsoft
climate change
co-founding Microsoft
computer labs in schools
digital literacy
education
for philanthropy
global health
his mother
human
impossible Foods
investor
malaria prevention
nuclear energy
over 100 billion USD
philanthropist
plant-based diets
playing bridge
polio eradication
poverty reduction
reading
renewable energy
research on COVID-19
richest person in the world
scholarships
software copyright
software developer
tennis
to give away majority of wealth
to libraries
vaccination programs

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
textiles
transparent plastics
universities
use renewable energy

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1983
2014
2019
9 to 5
A Bad Moms Christmas
Addams Family Values
Agnes van Rhijn
American actress
Ann Marwood Bartle
Arleen
Bachelor of Fine Arts
Becky Martin-Granger
Beverly Hofstadter
Bonnie and Clyde
Bowfinger
Broadway
Broadway Cares/Equity Fights AIDS
Buffalo, New York
Bulworth
Carol
Carol Donovan
Charlotte
Chicago
Cinderella's Stepmother
Cloud Guy
Connecticut
Connie Chasseur
Constance Bulworth
Cybill
Diane Lockhart
Donna Who
Drama Desk Award
Eleanor
Golden Globe Award
Herself
Hurlyburly
Into the Woods
Isabel
Isabel Cowles
Jeffrey
Juilliard Drama Division
Juilliard School
Juilliard School on scholarship
Katherine Archer
Kitty Hurley
Legal Eagles
Lily Cowles
Lucien Baranski
Mamma Mia!
Mamma Mia! Here We Go Again

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Allianz Motor Insurance
Allianz Motorcycle Insurance
Allianz Motorhome Insurance
Allianz Music Insurance
Allianz Park
Allianz Partners
Allianz Personal Accident Insurance
Allianz Pet Insurance
Allianz Political Risk Insurance
Allianz Product Liability Insurance
Allianz Professional Indemnity Insurance
Allianz Property Insurance
Allianz Public Liability Insurance
Allianz Retirement Plans
Allianz Riviera
Allianz SE
Allianz Sickness Insurance
Allianz Sports Insurance
Allianz Stock Insurance
Allianz Surety Bonds
Allianz Trade Credit Insurance
Allianz Travel Insurance
Allianz Wedding Insurance
Berlin
Best Global Brands
Bloomberg Gender-Equality Index
CDP Climate Change Leader
DAX index
DE0008404005
Digital Innovation Award
Euler Hermes
Euro Stoxx 50
Financial Times Diversity Leader
Forbes Global 2000
Formula E
Fortune Global 500
Germany
Giulio Terzariol
Insurance Company of the Year
Munich
Oliver Bäte
Olympic Games
PIMCO
Sirma Boshnakova
Sustainable Company Award
Top Employer
World's Most Ethical Companies
acquired many companies over decades
adapted to digital transformation
allianz.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
empathy
evidence-based medicine
experimental research
female
fictional character
field of neuroscience
for animal studies
for conferences
for grants
for human studies
for journals
for research
from NIH
from NSF
graduate students
health-conscious
human brain
in New Jersey
in United States
in fictional television
in textbooks
intellectual
international symposia
liberal
mental health
mental health awareness
neuroimaging
neuroplasticity
neuroscience
neuroscientist
none
on brain function
on emotional development
on neurological devices
on neuroscience
on psychiatry
on therapeutic methods
other neuroscientists
parenting skills
policy discussions
postdoctoral researchers
professional
professional with colleagues
psychiatric practices
psychiatrist
psychologists
psychology
public debates
publish influential work
reading scientific literature

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
collaborates with fintech startups
committed to net-zero emissions
corporations
digital transformation
education
encourages cultural diversity
ensures data protection
exit unprofitable businesses
expanded internationally in late 19th century
faced criticism for scandals
faced regulatory fines
finances German exports
financial services
focuses on credit risk
focuses on digital services
follows international sanctions
funds sports events
governments
implements anti-money laundering measures
improve profitability
includes international members
includes women
initiated in 2019
institutional investors
investment banking
investment grade
involved in money laundering scandals
issues bonds
manages operational risk
merged with Disconto-Gesellschaft in 1929
millions of clients
offers apprenticeships
over 1.3 trillion euros
over 20 billion euros
over 25 billion euros
over 4 billion euros
over 50 countries
over 84000
played role in German industrialization
private banking
private individuals
promotes gender equality
provides leadership programs
provides mortgages
received sustainability awards
recognized for corporate banking
reduce costs
reestablished after World War II
retail banking
seen as systemically important

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
automotive environmental testing
automotive ethics
automotive field monitoring
automotive field service
automotive firmware
automotive fleet management
automotive functional safety testing
automotive hardware
automotive hardware tools
automotive harnesses
automotive harshness testing
automotive homologation
automotive infotainment systems
automotive innovation
automotive instrument clusters
automotive intellectual property
automotive interior systems
automotive internet of things
automotive interoperability testing
automotive lean manufacturing
automotive lightweight materials
automotive logistics
automotive machine learning
automotive manufacturing
automotive market surveillance
automotive measurement systems
automotive microcontrollers
automotive middleware
automotive mobility services
automotive navigation systems
automotive noise testing
automotive operating systems
automotive over-the-air update testing
automotive over-the-air updates
automotive parts
automotive patents
automotive pedestrian protection testing
automotive performance testing
automotive post-market monitoring
automotive power electronics
automotive powertrain systems
automotive printed circuit boards
automotive prototyping
automotive quality management
automotive real-time systems
automotive recalls
automotive recycling
automotive regulations
automotive reliability testing
automotive repair procedures

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
elastopan
neopor
nutrition
oil and gas
over 110000
over 78 billion euros
performance products
pigments
plastics
styropor
ultradur
ultraform
ultramid
ultrason

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
United Kingdom
Urban air mobility
Various airlines
Wide-body twinjet
ZEROe hydrogen aircraft

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
science
sexagesimal
simplified signs
stress patterns
subordinate clauses
text editions
trade
universities worldwide
used in mathematics
verb-subject-object word order
verbal aspects
vowel length distinction

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
0
12 days 1 hour 52 minutes
1930-01-20
1954
1963
1966-11-11
1969-07-16
1969-07-20
1969-07-21 03:15 UTC
1971
1972
1974
1975
1978
1988
2
2 hours 31 minutes
2012
3
4
4 days
66
7 hours 52 minutes
93
Active on Twitter
Air Force Commendation Medal
Air Force Distinguished Service Medal
Air Force officer
Alcoholism
American
Apollo 11
Apollo 13
Astronaut
Author
Bachelor of Science in Mechanical Engineering
Beautiful view
Beverly Van Zile
Buzz
Buzz Aldrin Ventures
Collected lunar samples
Colonel
Congressional Gold Medal
Consultant
Cycler orbit concept for Mars missions
Dancing with the Stars
Deployed scientific experiments
Depression
Doctor of Science in Astronautics
Dr. Rendezvous
Eagle

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Qontigo in 2019
SDAX index
Scale
Stoxx
Stoxx in 1998
T7 trading system
TecDAX index
Theodor Weimer
Tradegate Exchange
World Federation of Exchanges
Xetra
Xetra trading platform
Xetra trading system
art and culture sponsorship
bonds trading
calendar year
carbon neutral operations
clearing
custody services
cybersecurity measures
derivatives trading
deutsche-boerse.com
education initiatives
equities trading
euro
exchange-traded funds
executive board
financial services
foreign exchange trading
green bonds
institutional investors
joint stock company
market data
offices in Asia
offices in Europe
over 1 billion euros
over 10000
over 3 billion euros
over 30 billion euros
publicly traded company
regular dividend payments
regulatory compliance
retail investors
securities trading
settlement
social projects
stock exchange
structured products
supervisory board
sustainable finance

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1927
1941
1951
1958
1960
1962
1967
1969
1972
1991
1998
2001
21 times
48 Hours
60 Minutes
ABC
Amazon Prime Video
America's Most Watched Network
Arthur Judson
Big Brother
Blue Bloods
CBS All Access
CBS Cable
CBS Cares
CBS Consumer Products
CBS Digital Media
CBS Entertainment
CBS Evening News
CBS Films
CBS Home Entertainment
CBS Interactive
CBS Kidshow
CBS Mornings
CBS News
CBS News App
CBS News Podcast
CBS Outdoor
CBS Radio
CBS Sports
CBS Sports Network
CBS Studios
CBS Sunday Morning
CBS Television Distribution
CBS Television Stations
CBS Television Studios
CNN
CSI
Columbia Broadcasting System
Connie Chung
Criminal Minds

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
American Physical Society
Boston accent
Boston sports teams
Caltech
European research institutions
Harvard University
Ivy League university
John Ross Bowie
Leonard Hofstadter
Mars rover project
NASA
Nature journal
PhD in Physics
Physical Review Letters
Porsche
Sheldon Cooper
Sheldon and Amy's wedding
Shelly
That's wude
The Big Bang Theory
You're a stwange man
academic conferences
across from Sheldon's office
advanced computer systems
annual physics symposium
assigned by department
at Caltech
at other universities
at scientific meetings
brown
campus library
casual academic attire
charity events
coffee
colleague of Howard Wolowitz
colleague of Raj Koothrappali
colleagues at lunch
competitive
conferences
confident
daily commute
department matters
department picnics
discussing science
expensive sports car
experimental physicist
experimental physics
faculty directory
faculty meetings
fictional character

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
yellow vans
zero emissions by 2050

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
casting decisions
character development
charity events
co-creating The Big Bang Theory
comedy
comedy panels
computer programmer
dialogue writing
environmental issues
from fans
from peers
fundraisers
interviews about The Big Bang Theory
multiple TV series
online articles
person
pilot episodes
popular culture
portrayal of scientists
producer
producing duties
radio, television, and film
science
science communication
science communicators
science education
series finales
showrunning
space exploration
stand-up comedian
story arcs
technology
television history books
television industry
television producer
television producers
television scripts
television writer
television writing
two daughters
use of science in comedy
women in television
writer
writer for The Jim Henson Hour
writers' workshops
writing for Dharma & Greg
writing for Gilmore Girls
young writers

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Mercedes-Benz
Mercedes-Benz Group
Mercedes-Benz Uptime
Mexico
Mitsubishi Fuso Truck and Bus Corporation
Navistar
North America
PACCAR
Thomas Built Buses
Torc Robotics partnership
Traton Group
Turkey
United States
Volvo Group
Western Star
alternative fuels
approximately 30 billion euros
automotive
autonomous driving
buses
carbon-neutral production by 2022
carbon-neutral vehicles by 2039
coaches
commercial vehicle manufacturer
community engagement programs
comprehensive vehicle warranty
connectivity
eActros
eCascadia
eCitaro
eCitaro G
eEconic
eM2
educational initiatives
electric mobility
environmental protection projects
global dealership network
heavy-duty trucks
leading in Europe
leading in North America
light-duty trucks
medium-duty trucks
over 100,000
parts distribution centers
profit distribution to shareholders
school buses
service centers
special-purpose vehicles
spin-off from Daimler AG
technical training facilities

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
investors
market capitalization
options
performance index
price return index
quarterly
real-time
sector representation
stock market index
taxes
technology
top 10
top 3
total return index
trading volume
utilities

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
ODAX
Porsche
Puma
Qiagen
RWE
Refinitiv
SAP
SDAX
Sartorius
Siemens
Siemens Energy
Symrise
TecDAX
Volkswagen
Vonovia
Xtrackers DAX UCITS ETF
Yahoo Finance
Zalando
^GDAXI
approximately 8%
around 3%
automotive industry trends
billions of euros daily
deutsche-boerse.com
energy prices
expanded to 30 components in 1988
expanded to 40 components in 2021
featured on Bloomberg
featured on Financial Times
featured on Handelsblatt
featured on Reuters
financial analysts
first calculated in 1988
free-float market capitalization weighted
fund managers
global trade dynamics
high
iShares Core DAX UCITS ETF
includes automotive, chemicals, finance, technology
introduced Xetra electronic trading in 1997
investors
managed by Deutsche Börse AG
moderate to high
over 1 trillion euros
over 18000 points
performance index
quarterly
reflects German economic health
stock market index
survived COVID-19 pandemic in 2020

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
southwestern Iran
statues
sukkalmah
textiles
the Bible
tin
to Susa
tombs
trade
with Mesopotamian rulers
with kings and priests
ziggurats

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
by Deutsche Börse
daily in financial news
declining
delisting
diverse German economy
dot-com bubble
elections
eurozone crisis
every second
financial analysts
financial crises
for German economy
for bankrupt companies
for diversified portfolios
free-float market capitalization weighted
fund managers
futures
generally positive long-term
global
growing
high
increasing
investors
limited
low on average
market capitalization and trading volume
mergers
minimum trading volume
moderate to high
modest
monetary policy
notable
occurred in 2006
often industrials
one of Europe's leading indices
options
over 18,000 points
oversees composition
performance index
performance issues
periodic
present
price index
prominent
publicly available
quarterly
reinvested
required for commercial use
significant
small

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
customer service centers
customer solutions
decarbonization
digitalization
distribution networks
education
electric vehicle charging infrastructure
electricity
energy advice
energy audits
energy company
energy contracts
energy efficiency
energy grids
energy networks
energy saving
ensured
for corporate responsibility
for customers
for employees
for staff
for sustainability
fossil fuel assets
governs the company
grid operations
heat pumps
held in Essen
households
hydrogen projects
independent auditors
industrial customers
innovation
investment grade
manages operations
market competition
monthly or quarterly
natural gas
over 1.5 million kilometers
over 100 billion euros
over 50 million customers
photovoltaic systems
power plants
power-to-gas technology
priority
promoted
renewable energy
renewables and networks
research and development centers
research projects
science

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
royal hunts
royal inscriptions
sheep
shield bearers
siege engines
siege towers
siege warfare
slave class
slavery
social hierarchy
spearmen
standardized weights and measures
standing army
tall headdresses
temple complexes
timber
wheat
with wall reliefs
ziggurats

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Papua New Guinea
Philippines
Pitcairn Islands
Poland
Portugal
Rolls-Royce Motor Cars
Romania
Russia
Saint Paul Island
Samoa
Serbia
Singapore
Slovakia
Slovenia
Solomon Islands
South Africa
South Georgia
South Korea
South Sandwich Islands
Spain
Sri Lanka
Svalbard
Sweden
Taiwan
Tajikistan
Thailand
Tokelau
Tonga
Turkey
Turkmenistan
Tuvalu
Ukraine
United Kingdom
United States
Uzbekistan
Vanuatu
Vietnam
Wallis and Futuna
aircraft engines
aircraft propeller
as of 2024
automobile manufacturer
automotive
blue and white roundel
financial services
motorcycle manufacturing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
succession planning
through agriculture
to commemorate reign
to distant areas
unknown
unknown regions
with land grants
with neighbors
with new troops
with rivals
with symbols
within empire

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
124 acres
1891
39 Nobel Prizes
3:1
Ahmed Zewail
Alumni Reunion
Amgen Scholars Program
Avery House
Bachelor of Science
Barbara McClintock
Beaver
Beavers
Beckman Auditorium
Beckman Institute
Ben Roy Mottelson
Braun Athletic Center
Breakthrough Prize
Cahill Center for Astronomy and Astrophysics
Cahill Library
Caltech Archives
Caltech Honor Code
Carver Mead
Center for Data-Driven Discovery
Commencement
DNA structure
Dabney Hall
David Baltimore
David L. Goodstein
Department of Energy
Ditch Day
Division of Biology and Biological Engineering
Division of Chemistry and Chemical Engineering
Division of Engineering and Applied Science
Division of Geological and Planetary Sciences
Division of Humanities and Social Sciences
Division of Physics, Mathematics and Astronomy
Doctor of Philosophy
Donald Knuth
Engineering & Science magazine
Fields Medal
Fiona Harrison
Frances Arnold
Frank Capra
Gates-Thomas Laboratory
George Ellery Hale
Gordon Moore
Howard Hughes Medical Institute
Jet Propulsion Laboratory
John D. Roberts
John McCarthy

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
waste reduction
water treatment

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
girls' nights
glasses
graduate students
highly intelligent
holidays with friends
human cognition
in other research
infrequently
karaoke
knitting
learning processes
logical
loyal
memory formation
messy and disorganized
minimally
multiple languages
neural pathways
neurobiologist
neurobiology
of scientific discovery
on a regular schedule
on neurobiology
on television shows
papers with colleagues
penicillin
playing board games
popular culture
primate behavior
professional success
reading scientific journals
real scientists
sarcastic
science enthusiasts
science fiction movies
scientific conferences
scientific societies
scientific theories
season 3
sense of humor
shoulder-length brown hair
simple meals
small talk
social cognition
socially awkward
statistical methods
studied monkey social behavior
super-asymmetry
through friendships
through online dating

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
province
railway lines
religious festivals
site of Babylonian captivity
small industries
symbol of ancient Babylon
tourism
uses Euphrates River for irrigation
vegetables
water buffalo in marshes
wheat production
ziggurat of Borsippa

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2004
2008
25 Hours a Day
3rd Rock from the Sun
6 feet 6 inches
@midnight
Adventure Time
American River College
American comedian
Bloodline by Slayer
Bob's Burgers
Brendon Small
Brian Spukowski in Mission Hill
Brian in The Cleveland Show
Chelsea Lately
Community
Conan
Deadpool
Drunk History
Fart and Wiener Jokes
Forever Nerdy: Living My Nerd Life
Friends
Himself in American Dad!
Himself in Family Guy
Himself in Robot Chicken
Himself in The Simpsons
Human Giant
Hymie in The Sarah Silverman Program
July 6, 1966
Just Shoot Me!
Late Night with Jimmy Fallon
Live In: Nerd Rage
Melanie Truhett
Metalocalypse
Mr. Show with Bob and David
Nerd Poker
New Girl
Sacramento City College
Sacramento, California
Scott Ian
Seinfeld
Sex Drive
The A&E Special
The Amazon Special
The Andy Milonakis Show
The Animal Planet Special
The Apple TV Special
The Arsenio Hall Show
The Ben Show
The Big Bang Theory

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
One Dark Night
Partisan
Ratko: The Dictator's Son
Redux Riding Hood
September 19, 1928
Sexina
Soldier in the Rain
Stanford University
Television
The Adventures of Superboy
The Batman
The Batman vs. Dracula
The Big Guy
The Big Valley
The Clinic
The Detectives
The Drew Carey Show
The F.B.I.
The Fairly OddParents
The Fall Guy
The Girl Who Knew Too Much
The Gray Ghost
The Last American Virgin
The Last Precinct
The Last of the Mohicans
The Love Boat
The Marriage of a Young Stockbroker
The New Age
The Old Man and the Studio
The Simpsons
The Star Wars Holiday Special
The Super Mario Bros. Super Show!
The Wild Wild West
The Young Philadelphians
Thomas Edison
Thomas Edison in Meet the Robinsons
United States Army
Walla Walla, Washington
Whitman College
William West Anderson
Young Lady Chatterley II
Zombie Nightmare
actor
author
blue
brown
campy superhero style
himself in NewsRadio
himself in The Drew Carey Show
himself in The Simpsons

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Reebok
Samba
Spain national football team
Sport needs creators
Stan Smith
Stella McCartney
Superstar
Tango
TaylorMade
Teamgeist
Telstar
Telstar 18
Torsion
UEFA Champions League
Ultraboost
We are football
Y-3
Yeezy
accessories
adidas GMR
adidas.com
apparel
bags
balls
caps
company
footwear
gloves
jackets
jerseys
ocean plastic
ocean plastic shoes
recycled polyester
shorts
socks
sports shoes
sportswear
sustainable sportswear
t-shirts
three parallel stripes
three stripes logo
tracksuits

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Orontes
Oxyartes
Parmenion
Parysatis
Peithon
Pella
Perdiccas
Persian Empire
Peucestas
Pharnabazus
Philip
Philip II of Macedon
Philotas
Phoenicia
Phrataphernes
Polyperchon
Ptolemy
Pyrrho
Reomithres
Rhoesaces
Roxana
Seleucus
Sibyrtius
Sitalces
Sogdia
Spithridates
Stasander
Stasanor
Stateira
Syria
Theodotus
Thymondas
Tlepolemus
human
king
military leader
parts of India

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
road building
sacrilege
sanitation
shipbuilding
slavery
sorcery
storm damage
tavern keeping
taxation
temple administration
temple construction
territorial claims
theft
veterinary medicine
wages
wall construction
waste disposal
water rights
water supply
well digging
witchcraft

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
hardworking
high-pitched
honest
humble
imaginative
independent
infectious diseases
innovative
inquisitive
intelligent
kind
leader
logical
loyal
maternal
mature
methodical
meticulous
microbiologist
modest
motivated
nurturing
open-minded
organized
patient
perfectionist
persistent
practical
pragmatic
precise
problem-solver
protective
realistic
reliable
resilient
resourceful
responsible
sarcastic
sassy
sincere
strategic
strong-willed
successful
supportive
sweet
systematic
tactical
team player
tenacious
thorough

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
personal manager
philosophy
photography
premieres
private
produce films
production houses
reading
real life stories
seminars
senior actors
sensitive
social issues
social media
social media negativity
soft
spiritual teachings
talent agency
tall
thoughtful
traditional attire
travel
true
unnamed film
versatile acting
web series
workshops
world cinema
writing
yoga

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Music
Musician
Netflix
No published books
Not a teacher
Not active
Not known
Not publicly stated
Not retired
Not specific
Occasional
October 18, 1952
Often writes
On television comedy
Ongoing
Online
Over 12 seasons
Paula Smith
Personal experiences
Personal musings
Private
Rare
Relatable
Screenwriter
Shown at end of episodes
Shows broadcast worldwide
Sitcoms
Sometimes directs
Successful
Supports various causes
Television production
The Big Bang Theory
The Kominsky Method
To education
To healthcare
Two
Two and a Half Men
With HBO Max
Workplace humor
Writer for Roseanne
Young Sheldon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
heaven
horned crown
judge
king of the gods
kingship
lawgiver
scepter
sky
staff

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Exchange-traded fund futures
Exchange-traded fund index derivatives
Exchange-traded fund options
Exchange-traded funds derivatives
Foreign currency futures
Foreign currency options
Foreign exchange derivatives
Frankfurt
Freight derivatives
Freight futures
Freight index derivatives
Freight options
Futures
Index derivatives
Index futures
Index options
Inflation derivatives
Inflation futures
Inflation index derivatives
Inflation index futures
Inflation index options
Inflation options
Interest rate derivatives
Interest rate futures
Interest rate index derivatives
Interest rate options
Metal derivatives
Metal futures
Metal index derivatives
Metal options
Natural gas derivatives
Natural gas futures
Natural gas index derivatives
Natural gas options
Options
Power derivatives
Power futures
Power index derivatives
Power options
Real estate derivatives
Real estate futures
Real estate index derivatives
Real estate index futures
Real estate index options
Real estate options
SIX Group
Stock futures
Stock options
Volatility derivatives
Volatility futures

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
preaching resource
progressive revelation subject
promise interpretation subject
prophecy collection
prophecy interpretation subject
prophetic history
prophetic interpretation subject
prophetic literature
prophetic work
proverb collection
proverb interpretation subject
psalm collection
psalm interpretation subject
redaction criticism subject
redemption story
redemptive history subject
religious canon
religious text
research subject
revelation interpretation subject
revelation record
revelatory text
rhetorical criticism subject
righteousness-centric subject
sacred scripture
salvation history
salvation history subject
shadow interpretation subject
soteriological interpretation subject
soterocentric subject
source criticism subject
spiritual guide
spiritual interpretation subject
study material
sufficiency interpretation subject
symbol interpretation subject
teaching tool
testament collection
textual criticism subject
theocentric subject
theological interpretation subject
theological text
translated work
trinitarian interpretation subject
truth-centric subject
type interpretation subject
typological interpretation subject
unity interpretation subject
vision interpretation subject
wisdom interpretation subject

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
connects restaurants with customers
corporate clients
couriers
credit card
customer focus
data analytics
debit card
delivery fees
digital wallets
diversity
e-commerce
eco-friendly packaging
electric vehicle delivery
food delivery
food delivery service
foodora
grocery delivery
grocery stores
individual consumers
innovation
integrity
market expansion
marketplace platform
millions of users
mobile applications
multiple
offers advertising services to restaurants
online food ordering
over 40000
over 70 countries
partners with charities
partnerships
premium services
product diversification
promotes food safety
provides delivery logistics
public limited company
public shareholders
quick commerce
raised hundreds of millions
restaurants
subscription services
supports local communities
sustainability
technology company
technology innovation
technology innovation awards
to deliver anything to anyone
true
various industry recognitions

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
TV Land Award
Teen Titans Go!
Television
The 1970s Batman animated series
The Adventures of Superboy
The Cape Crusade
The Simpsons
Tracy Posner
action figures
active on Twitter
activist
actor
animal welfare
attended UCLA
author
autobiography
back injuries
burtward.com
business administration
celebrity auctions
collecting Batman memorabilia
comic cons
dog breeding
dog rescue
dog rescue advocacy
dog rescue operations
frequent attendee
friendly and accessible
generally good in later years
highly sought by collectors
himself
iconic portrayal of Robin
inspired later Robin actors
less than Adam West
loyal and enduring
moderate to high
none
photographs
portraying Robin in Batman TV series
public appearances
ranch
rarely used
referenced in Family Guy
semi-retired
seven-year contract with 20th Century Fox
signed memorabilia
stunt work
suffered from injuries on Batman set
supports children's hospitals
vegan

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1899-1917
18th century BCE
1901
200,000 people
2019
23rd century BCE
2nd century BCE
60-minute hour
60-second minute
689 BCE
7th century BCE
900 hectares
Akitu festival
Akkadian
Alexander the Great
Amorites
Assyrian culture
Assyrians
Babylonian King List
Babylonian captivity
Babylonian mythology
Bible
British Museum
Code of Hammurabi
Diodorus Siculus
Enuma Elish
Epic of Gilgamesh
Esagila
Etemenanki
Euphrates River
Hammurabi
Hanging Gardens
Hellenistic astronomy
Herodotus
Hillah, Babil Governorate
Hittites
Ishtar Gate
Istanbul Archaeology Museums
Kassites
Marduk
Mesopotamia
Nebuchadnezzar II
Neo-Babylonian Empire
Nippur
Pergamon Museum
Persian culture
Persians
Plimpton 322
Processional Way
Robert Koldewey

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Martha May Whovier
Mary Sunshine
Matthew Cowles
May 2, 1952
New York City
Parker
Polish ancestry
Polish immigrant
Primetime Emmy Award
Relative Strangers
Reversal of Fortune
Roz Keith
Rumors
Screen Actors Guild Award
Tanya Chesham-Leigh
The Actors Fund
The Big Bang Theory
The Birdcage
The Bounty Hunter
The Gilded Age
The Good Fight
The Good Fight spin-off
The Good Wife
The Grinch
The House of Blue Leaves
The Odd Couple II
The Real Thing
The Ref
The Simpsons
Thelma
Trolls
Trolls World Tour
Villa Maria Academy
Virginia
Welcome to Mooseport
charity work
comic timing
drama
editor
elegant and sophisticated roles
heart failure
in 2014
in Hide & Seek
in Soup for One
in theater
secretary
star on Hollywood Walk of Fame
strong female characters
two daughters

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Surrender the Pink
The 'Burbs
The Best Awful
The Big Bang Theory
The Blues Brothers
The Guardian
The Last Jedi video game
The New York Times
The Princess Diarist
The River Wild
The Simpsons
The Wedding Singer
These Old Broads
Todd Fisher
Weeds
When Harry Met Sally...
Wishful Drinking
about her personal struggles
addiction recovery
affair with Harrison Ford
ashes in a Prozac pill-shaped urn
author
bipolar disorder
body positivity
cardiac arrest
cocaine
company called Serenity Forge
dog named Gary
her father Eddie Fisher
her mother Debbie Reynolds
human
iconic film roles
in interviews and writing
in various venues
literary contributions
many women in Hollywood
mental health advocacy
mental health awareness
one-woman show Wishful Drinking
prescription drugs
screenwriter
star on Hollywood Walk of Fame
struggles with mental health

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
a frequent collaborator with LeVar Burton
a frequent collaborator with Marina Sirtis
a frequent collaborator with Michael Dorn
a frequent collaborator with Patrick Stewart
a frequent collaborator with Wil Wheaton
a large fan following
a podcast appearances
a presence on social media
a reputation for playing intelligent characters
a singer
a voice actor
a website
an author
at the Cafe Carlyle
audiobooks
characters in American Dad!
characters in Ben 10: Alien Force
characters in Family Guy
characters in Gargoyles
characters in Justice League Unlimited
characters in Rick and Morty
characters in Star Trek: Lower Decks
characters in Star Trek: Prodigy
characters in The Batman
characters in The Venture Bros.
characters in Young Justice
drama
in cabaret shows
in theater
of Jewish descent
one son
the Broadway play The Three Sisters
the TV series Elementary
the TV series Hell's Kitchen
the TV series Leverage
the TV series Ray Donovan
the TV series The Blacklist
the TV series The Good Wife
the TV series The Librarians
the TV series The Orville
the TV series Threshold
the TV series Warehouse 13
the University of Houston
the album Dreamland
the film I Am Sam
the film Introducing Dorothy Dandridge
the film King of the Hill
the film Masterminds
the film The Comedian
the film The Grudge

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Telekom Regional
Telekom Regulations
Telekom Research
Telekom Roaming
Telekom SMS
Telekom Sales
Telekom Satellites
Telekom Security
Telekom Shopping
Telekom SmartDevices
Telekom SmartHome
Telekom Social
Telekom Software
Telekom Standards
Telekom Storage
Telekom Support
Telekom Tariffs
Telekom Technologies
Telekom Testing
Telekom Text
Telekom Towers
Telekom Travel
Telekom Video
Telekom Voice
Telekom Wearables
Telekom Weather
Telekom Wired
Telekom Wireless
Timotheus Höttges
United States
company
fiber optic networks
fixed-line telephone services
internet services
magenta
mobile networks
mobile phone services
over 100 billion euros
over 200000
telecommunications

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
regular
research projects
research skills
sarcastic
scientific journals
scientific terminology
sedan
strained with Leonard
suburban house
television interviews
textbooks
treatment protocols
unknown
unscientific claims
workshops
writing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
serves companies
serves individuals
serves institutions
settled with US authorities
social projects
supports LGBTQ+ inclusion
supports arts and culture
supports green financing
supports small businesses
survived World War II
to finance foreign trade

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
automotive research and development
automotive safety systems
automotive safety testing
automotive semiconductors
automotive sensors
automotive service manuals
automotive shared mobility
automotive signal processing
automotive simulation
automotive six sigma
automotive social responsibility
automotive software
automotive software tools
automotive standards
automotive supply chain
automotive sustainability
automotive technical support
automotive telematics
automotive testing
automotive thermal management
automotive total quality management
automotive training
automotive type approval testing
automotive user manuals
automotive validation
automotive vehicle-to-everything
automotive vehicle-to-grid
automotive vehicle-to-infrastructure
automotive vehicle-to-network
automotive vehicle-to-pedestrian
automotive vehicle-to-vehicle
automotive vibration testing
automotive warranty
tires

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
asset management
asset management services
became a global leader in insurance
businesses
car insurance
casualty insurance
climate change
company
customer service
digital innovation
expanded internationally in early 20th century
faced regulatory challenges
financial services
financial services company
health insurance
home insurance
individuals
institutional clients
insurance
insurance company
investment funds
life insurance
over 1 trillion euros
over 100 billion euros
over 150000
over 70 countries
over 80 billion euros
property insurance
rebuilt after World War II
retirement plans
risk management
survived World War II
sustainability
travel insurance

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Edwin Eugene Aldrin Jr.
Encounter with Tiber
Engineer
Expertise in orbital rendezvous
Fighter Pilot
Flying
Gemini 12
Glen Ridge, New Jersey
His father
Human
In the Shadow of the Moon
International Space Hall of Fame
Joan Archer
Korean Service Medal
Korean War
Lois Driggs Cannon
Lunar Module Pilot
Marion Moon
Mars colonization
Mass Effect 3
Massachusetts Institute of Technology
Men from Earth
Mental health awareness
Mental health struggles
Michael Collins
Military Officer
Mission to Mars
Multiple
NASA
NASA Ambassadors of Exploration Award
NASA Distinguished Service Medal
NASA Exceptional Service Medal
National Aviation Hall of Fame
Neil Armstrong
No Dream Is Too High
None
Not publicly known
Pilot
Presbyterian
Presidential Medal of Freedom
Public Speaker
Return to Earth
Scuba diving
Set record for EVA time
ShareSpace Foundation
Space Advocate
Space exploration
Spacecraft docking system
The Big Bang Theory
The Last Man on the Moon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
two-tier board system

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Disney+
ESPN
Ed Bradley
Face the Nation
Fox
HBO
Hawaii Five-0
How I Met Your Mother
I Love Lucy
Jack Paar
Let's Make a Deal
MSNBC
Mom
NBC
NCIS
Netflix
New York City
Paramount Global
Paramount+
Showtime
Stephen Colbert
Survivor
The Amazing Race
The Big Bang Theory
The Bold and the Beautiful
The CBS Television Quiz
The Columbia Phonographic Hour
The Dr. Oz Show
The Ed Sullivan Show
The Eye
The Guiding Light
The Late Late Show
The Late Show
The Late Show with Stephen Colbert
The Lucy Show
The Price Is Right
The Talk
The Young and the Restless
Two and a Half Men
United Independent Broadcasters
United States
Walter Cronkite
Westinghouse Electric Corporation
William S. Paley
Young Sheldon
billions of dollars annually
blue
broadcasting
broadcasting company
broadcasts in over 100 countries

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
shareholder returns
smart grids
smart home solutions
social initiatives
solar energy
sports events
sustainability
sustainable development
transmission networks
transparent
universities
various
wind power
with RWE in 2019
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
for data analysis
for equipment purchases
for lab access
for lab work
for local games
for research
for research notes
for students
glasses
graduate level physics
graduate student
high citation index
high-energy laser
in office
international research projects
making fun of Sheldon's quirks
married to Susan Kripke
news articles
on campus
other faculty members
other physics professors
other scientists
over 30 episodes
particle accelerator
particle physics
physics building
physics department events
playing practical jokes
prestigious university
professional accounts
professor level
pronounces R as W
quantum mechanics
research excellence award
research experience
research funding
research students
rhotacism
sarcastic
scientific journals
scientific papers
scientific posters
scientific supplies
season 12
season 2
spectrometers
sports memorabilia
teasing colleagues
through university
to lab and office

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
trucks
two-tier board system
world's largest truck manufacturer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
survived dot-com bubble in 2000
survived financial crisis in 2008
under 1000 points
varies between 10 and 20

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
stock market index
stringent
transparent
vary over time
via Deutsche Börse website
widely studied
with other European indices

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Kavli Foundation
Kavli Nanoscience Institute
Keck Laboratories
Kip Thorne
Konstantin Batygin
LIGO Hanford Observatory
LIGO Livingston Observatory
LIGO Scientific Collaboration
Lee Alvin DuBridge
Linde + Robinson Laboratory
Linus Pauling
MIT
Master of Science
Max Delbrück
Mike Brown
Millikan Library
Millikan Pumpkin Drop
Moore Foundation
Murray Gell-Mann
NASA
NASA Space Grant
NASA's JPL
National Medal of Science
National Science Foundation
Nobel Prize
Owens Valley Radio Observatory
Palomar Observatory
Pasadena, California
Pi Day
Planet Nine hypothesis
Preview Weekend
Public Lecture Series
RNA interference
Research Conference
Resnick Sustainability Institute
Richard Feynman
Robert A. Millikan
Rotation
Rudolf Mössbauer
Seismological Laboratory
Seismological Laboratory Museum
Sherman Fairchild Library
Simons Foundation
Southern California Intercollegiate Athletic Conference
Stephen Wolfram
Summer Undergraduate Research Fellowships
The California Tech
The truth shall make you free
Theodore von Kármán
Thomas F. Rosenbaum

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The Birthday Boys
The Burn with Jeff Ross
The Chris Gethard Show
The Comedians of Comedy
The Comedy Central Live
The Comedy Central Presents
The Comedy Central Roast
The Comedy Central Special
The Comedy Central Stand-Up
The Cooking Channel Special
The Crackle Special
The D Train
The DIY Network Special
The Devil's Rejects
The Discovery Channel Special
The Discovery+ Special
The Disney+ Special
The ESPN Special
The Eric Andre Show
The Fartist
The Five-Year Engagement
The Food Network Special
The Goldbergs
The Golf Channel Special
The Gorburger Show
The Greg Behrendt Show
The Guilt Trip
The HBO Max Special
The HBO Special
The HGTV Special
The History Channel Special
The Hulu Special
The Investigation Discovery Special
The Jeselnik Offensive
The Joe Rogan Experience
The Last Christmas
The Late Late Show
The Lifetime Special
The MLB Network Special
The Meltdown with Jonah and Kumail
The Michael Show
The NBA TV Special
The NFL Network Special
The NHL Network Special
The National Geographic Special
The Netflix Special
The Paramount+ Special
The Peacock Special
The Pete Holmes Show
The Pluto TV Special

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
human
iconic portrayal of Batman
later Batman actors
leukemia
voice actor

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
towards others
wine
with Sheldon
women in science
young women in STEM

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Strabo
Tower of Babel
Tower of Babel story
Ur
Uruk
Venus tablets of Ammisaduqa
World Heritage Site
agriculture
ancient city
arid
baked bricks
blue glazed bricks
class-based society
connected Mesopotamia to Mediterranean
cuneiform
cuneiform tablets
cylinder seals
developed Babylonian astronomy
developed base-60 number system
diorite stele
double walls
dragons and bulls
early legal systems
extensive canal system
foundation of modern timekeeping
grains
influenced Western civilization
limited rights under Hammurabi's Code
lunisolar calendar
massive fortifications
military occupation
modern-day Iraq
mud bricks
pottery
practiced slavery
reconstruction by Saddam Hussein
textiles
trade

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
tolerant
trustworthy
understanding
unknown
witty

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Volatility index derivatives
Volatility options
Weather derivatives
Weather futures
Weather index derivatives
Weather options
Zurich

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
venture capital firms
web platforms

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
wisdom literature
wisdom-centric subject
worship guide

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
veganism
vintage items

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 468.2s → outputs in runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251029_231623
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231623
[crawler] seeded: ancient city of Babylon
[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: ancient city of Babylon

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 469.6s → outputs in runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251029_231623
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] seeded: The TV Series Big Bang Theory
[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: The TV Series Big Bang Theory

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
the film The Heat
the film The Last Shot
the film The Little Death
the film The Man
the film The Out-of-Towners
the film The Pale Blue Eye
the novel Fan Fiction: A Mem-Noir

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The Return
Took photographs
Transformers: Dark of the Moon
True
U.S. Astronaut Hall of Fame
United States
United States Air Force
United States Military Academy
buzzaldrin.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
dominant in sports broadcasts
early adopter of HDTV
eye
funds disaster relief
international
leader in streaming technology
leading in news audience
most-watched network in the U.S.
multiple Critics' Choice Awards
multiple Edward R. Murrow Awards
multiple Emmy Awards
multiple Peabody Awards
of CBS Records
of CNET Networks
of King World Productions
of Simon & Schuster
on Twitter
over 100 stations
over 200 stations
partnerships with international networks
pioneer in color television
promotes diversity and inclusion
radio
since 1956
since 1973
since 1974
since 1978
since 1982
streaming
streaming available internationally
supports education initiatives
syndication of shows worldwide
television
thousands worldwide
to Europe in 1962
top in primetime viewers
with Viacom in 2019

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
to undergraduate students
under supervision
university cafeteria
university email
university identification card
university profile page
university protocols
university provided
university social events
video games
watching sports
weekly department meetings
with contact information
with direct line
with honors
with international researchers

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Throop University
Turing Award
WAVE Fellows Program
William A. Fowler
Wolf Prize
approximately 300 professorial faculty
around 1,200 graduate students
around 900 undergraduate students
astronomy
biology
black holes
changing Hollywood Sign to Caltech
chemistry
computer science
cosmic microwave background radiation
engineering
environmental science
exoplanets
femtochemistry
geology
graduate student apartments
gravitational waves
hacking MIT
high in QS World University Rankings
humanities
less than 5%
mathematics
neuroscience
orange and white
over $3 billion
physics
planetary science
private research university
public art on campus
quasars
social sciences
to faculty and alumni
top 10 in world university rankings
top quark
undergraduate houses

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Akitu festival

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Akkadian

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Alexander the Great

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Amorites

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Assyrians

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Babylonian King List

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Babylonian captivity

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Bible

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: British Museum

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Code of Hammurabi

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Diodorus Siculus

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Enuma Elish

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Epic of Gilgamesh

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Esagila

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Etemenanki

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Euphrates River

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Hammurabi

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Hanging Gardens

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Hillah, Babil Governorate

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Herodotus

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The Posehn Podcast
The Roku Special
The Sarah Silverman Program
The Science Channel Special
The Showtime Special
The Star Wars Holiday Special
The TLC Special
The Tennis Channel Special
The Tonight Show
The Travel Channel Special
The Tubi Special
The Vimeo Special
The YouTube Special
Thunderhorse by Dethklok
Uncle Nick
WTF with Marc Maron
actor
comic books
heavy metal music
nerdy and self-deprecating humor
on Comedy Central
on Netflix
one son
video games
voice actor
writer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
"The Big Bang Theory Theme"
12
18-22 minutes
2007-09-24
2019-05-16
279
Aarti Mann
Adam West
Amy Farrah Fowler
Barenaked Ladies
Barry Kripke
Bernadette Rostenkowski
Beverly Hofstadter
Bill Gates
Bill Nye
Bill Prady
Billy Bob Thornton
Bob Newhart
Brent Spiner
Brian Posehn
Buzz Aldrin
CBS
Caltech
Carrie Fisher
Charlie Sheen
Christine Baranski
Chuck Lorre
Chuck Lorre Productions
Courtney Henggeler
Critics' Choice Television Award
Elon Musk
English
George Takei
Georgie Cooper
Golden Globe Award
Howard Wolowitz
James Earl Jones
James Maslow
Jim Parsons
John Ross Bowie
Johnny Galecki
Joshua Malina
Judy Greer
Kaley Cuoco
Katee Sackhoff
Kathy Bates
Kevin Smith
Kevin Sussman
Kunal Nayyar
Laurie Metcalf

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
09:00-17:30 CET
10%
1000
1987-12-30
1988-07-01
2021-09-20
40
Adidas AG
Airbus SE
Allianz SE
Approximately 2-4%
Automotive
BASF SE
BMW AG
BaFin
Below 1000 points
Benchmark for German stock market
Chemicals
Corporate earnings
DAX
DAX 30 Index
DAX indices
DE0008469008
Deutsche Bank AG
Deutsche Börse
Diversified portfolios
Eurex
Euro
European Central Bank policies
European Union financial regulations
Every second
Exchange-traded funds
Extensive
Finance
Financial institutions
Frankfurt Stock Exchange
Free-float market capitalization
Futures
Generally positive long-term trend
German economic data
German economic health
German federal government
Germany
Global trade conditions
Globally recognized benchmark
Healthcare
High
High with other European indices
IFRS for constituent companies
Incorporated in selection process

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1899
2019
3rd millennium BCE
539 BCE
6th century BCE
Alexander the Great
Babylonian Empire
Babylonian astronomy
Bible
Code of Hammurabi
Epic of Gilgamesh
Esarhaddon
Euphrates River
Hammurabi
Hanging Gardens
Hellenistic period
Herodotus
Hittites
Iraq
Ishtar Gate
Marduk
Mesopotamia
Nebuchadnezzar II
Robert Koldewey
Sennacherib
archaeological site
city
cuneiform writing
mentioned
mud bricks
over 900 hectares
temple of Marduk
trade routes
ziggurats

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 527.9s → outputs in runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231623
[crawler] seeded: DAX 40 Index
[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: DAX 40 Index

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
LeVar Burton
Leonard Hofstadter
Leslie Winkle
Lewis Black
Mark Hamill
Mary Cooper
Mayim Bialik
Melissa Rauch
Missy Cooper
Mrs. Wolowitz
Nathan Fillion
Neil deGrasse Tyson
Pasadena, California
Penny
People's Choice Award
Primetime Emmy Award
Raj Koothrappali
Regina King
Riki Lindhome
Sara Gilbert
Sheldon Cooper
Simon Helberg
Stan Lee
Stephen Hawking
Stuart Bloom
Summer Glau
Television Critics Association Award
United States
Warner Bros. Television
Warner Bros. Television Distribution
Wil Wheaton
Young Sheldon
actress
astrophysicist
engineer
microbiologist
multi-camera
neuroscientist
physicist
sitcom
television series

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Index funds
Institutional investors
International investors
Largest stock index in continental Europe
Long-term investors
MDAX
March, June, September, December
Market capitalization and trading volume
Medium to high
Mercedes-Benz Group AG
Moderate to high
Moderate with US indices
Options
Over 1 trillion euros
Over 18000 points
Performance index
Prime Standard
Publicly available
Quarterly
Real-time
Retail investors
SAP SE
SDAX
Siemens AG
Significant during 2008 financial crisis
Significant during COVID-19 pandemic
Stock market index
Strict for constituent companies
Structured products
Subject of financial research
Subject to EU financial market regulations
Subject to German capital gains tax
Subject to global economic trends
TecDAX
Technology
Total return including dividends
Typically recovers from market downturns
Varies with market conditions
Volkswagen AG
Widely reported in financial media
Yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Alexander the Great

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Babylonian Empire

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Bible

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Epic of Gilgamesh

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Esarhaddon

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Euphrates River

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Hammurabi

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Code of Hammurabi

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Hanging Gardens

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Iraq

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Ishtar Gate

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Marduk

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Mesopotamia

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Robert Koldewey

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Sennacherib

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: temple of Marduk

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Hittites

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Nebuchadnezzar II

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Herodotus

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19th century
20th century
3rd century BCE
6th century BCE
After 1st century CE
Agricultural innovation
Amytis of Media
Ancient Greek historians
Ancient Wonder
Approximately 75 feet
Architectural marvel
Art
Babylon
Babylonian
Baghdad
Berossus
Chain pump
Debated by historians
Diodorus Siculus
Engineering achievement
Euphrates River
Exotic plants
Film
Flowers
Iraq
Irrigation system
Limited
Literature
Mud brick
Near Euphrates River
Nebuchadnezzar II
Persian gardens
Quintus Curtius Rufus
Reminder of homeland
Robert Koldewey
Royal pleasure garden
Seven Wonders of the Ancient World
Stone
Strabo
Terraced gardens
Terraced structure
Trees
Vaulted terraces
Vines

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Aarti Mann

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: The Big Bang Theory Theme

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Adam West

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Amy Farrah Fowler

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Barenaked Ladies

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Barry Kripke

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Bernadette Rostenkowski

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Beverly Hofstadter

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Bill Gates

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Bill Nye

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Billy Bob Thornton

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Bob Newhart

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Bill Prady

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Brian Posehn

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Brent Spiner

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: CBS

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Carrie Fisher

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Caltech

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Charlie Sheen

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Buzz Aldrin

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1259 BC
2000 BCE
Anatolia
Anatolian Languages
Ancient Civilization
Boghazkoy Archives
Bronze Age
Hattusa
Hittite Language
Puduhepa
cuneiform
for Writing
with Egypt

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Adidas AG

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Airbus SE

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Allianz SE

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: BASF SE

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: BMW AG

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: BaFin

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: DAX

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: DAX 30 Index

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Deutsche Bank AG

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Deutsche Börse

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Eurex

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Euro

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Frankfurt Stock Exchange

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: German federal government

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Germany

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: MDAX

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Mercedes-Benz Group AG

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Prime Standard

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: SAP SE

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: SDAX

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
6th century BCE
Amytis of Media
Babylon
Berossus
Diodorus Siculus
Euphrates River
Mesopotamia
Nebuchadnezzar II
Nineveh suggested as alternate
Philo of Byzantium
Strabo
Wonder of the Ancient World
after 1st century BCE
ancient Greek writings
debated by modern historians
elevated garden platforms
engineering feat
flowers
minimal
mud brick
none archaeologically confirmed
royal pleasure gardens
stone
terraced gardens
tiered structure
trees
vines
water lift system

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
2007-09-24
2019-05-16
22 minutes
279
Amy Farrah Fowler
Barenaked Ladies
Barry Kripke
Bazinga!
Bernadette Rostenkowski
Bill Gates
Bill Nye
Bill Prady
Buzz Aldrin
CBS
Caltech
Chuck Lorre
Chuck Lorre Productions
Dungeons & Dragons
Elon Musk
English
Golden Globe Award
Howard Wolowitz
Howard and Bernadette
Indian
Leonard Hofstadter
Leonard and Penny
Leslie Winkle
MIT
Mrs. Wolowitz
Neil deGrasse Tyson
Pasadena, California
Penny
Pilot
Primetime Emmy Award
Raj Koothrappali
Sheldon Cooper
Sheldon and Amy
Stan Lee
Stephen Hawking
Stuart Bloom
The Adhesive Duck Deficiency
The Bath Item Gift Hypothesis
The Stockholm Syndrome
United States
Warner Bros. Studios, Burbank
Warner Bros. Television
Young Sheldon
aerospace engineer
aspiring actress

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
18 years
1855-09-10
1899
1925-02-04
19th century
20th century
Ancient Architecture
Ancient Mesopotamian studies
Ancient Near Eastern archaeology
Ancient architecture
Archaeologist
Archaeology
Architect
Babylon
Babylonian archaeology
Berlin
Brunswick
Excavating Babylon
German
German Archaeologist
German Empire
German Oriental Society
German archaeology
Germany
Gold Medal for Arts and Sciences
Hanging Gardens evidence
Iraq
Ishtar Gate
Kaiser
Person
Processional Way
Scholar
Stratigraphic excavation
Technical University of Berlin
The Excavations at Babylon
Tower of Babel ruins
Wilhelminian era

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
18th Century BCE
19th Century CE
Akkadian
An Eye for An Eye
Ancient Law
Ancient Mesopotamian
Ancient Near East History
Babylon
Babylonian Empire
Centralized Government
City Walls
Code of Hammurabi
Conquered Larsa
Conquered Mari
Cuneiform
Defeated Elam
Diorite Column
First Babylonian Dynasty
Instructions Carved on Stone
King
King of Babylon
Legal History
Male
Marduk Temple
Mesopotamia
Mesopotamian Polytheism
Old Babylonian
One of Earliest Lawgivers
Person
Promoted Agriculture
Shamash
Sin-Muballit
Stele
Unified Babylonia
c. 1750 BCE
c. 1792 BCE
c. 1810 BCE

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
20
40
Babylon
Babylonian Map of the World
Cyrus Cylinder
Early Neo-Babylonian Archive
Enuma Elish festival
Enûma Eliš
Esagila
Esarhaddon
Etemenanki complex
Etemenanki ziggurat
Koldewey 1911
Marduk
Mesopotamia
Mesopotamian architecture
Nebuchadnezzar II
Neo-Babylonian period
Tower of Babel
Xerxes I
burned brick
cella with antechambers
east
mudbrick
temple

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+964
.iq
1932
43000000
43500000
438317
Abdul Latif Rashid
Akkad
Arab League
Arabic
Asia
Assyria
Babylon
Babylonia
Baghdad
Euphrates
Federal parliamentary republic
Hanging Gardens of Babylon
Iran
Iraqi Dinar
Islam
Jordan
Kurdish
Kuwait
Mesopotamia
Mohammed Shia' Al Sudani
Mount Halgurd
OPEC
Oil-based
Saddam Hussein
Saudi Arabia
Shia Islam
Sumer
Sunni Islam
Syria
Tigris
Turkey
UTC+3
United Kingdom
United Nations
Ur
country
right

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
"An eye for an eye"
1754 BC
1901
282
Accountable for shoddy work
Akkadian language
As property
Babylon
Babylonian
Contract regulations
Diorite stele
Divorce rights
Earliest complete law code
Facial statutes
Family property
For assault
For theft
Free consent required
Hammurabi
Included women
Landlords and tenants
Legal code
Legal decisions
Lex talionis
Louvre Museum
Minimum wage
Mosaic Law
Over 7 feet tall
Physicians
Previous city-state laws
Public justice
Responsibility
Roman Law
Social status considerations
Sumerian laws
Survived to present
Susa
Testimony
Veterinarians
Widows

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1899
1st millennium BCE
689 BCE
6th century BCE
7th century BCE
Administrative functions
Akitu
Akitu festival
Alexander the Great
Altars
Ancient Near East
Approximately 15 meters
Archaeological site
Archaeology
Assyrian kings
Assyriology
Babylon
Babylon ruins
Babylonian
Babylonian Chronicles
Babylonian Empire
Babylonian captivity
Baked brick
Berossus
Bitumen
Brick laying
Cardinal directions
Chief god's temple
Community gathering
Coronation
Cosmic center
Courtyards
Cuneiform texts
Cylinder seals
Cyrus the Great
Decorated
Destroyed
Divine authority
Early 20th century
Economic center
Enuma Elish
Esarhaddon
Etemenanki
Extensive
Gateways
Glazed bricks
Herodotus
Historical records
Housing Marduk's statue
Inscriptions

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
1987-12-30
1988-07-01
2021-09-20
30 companies
40 companies
Adjusted to maintain continuity
Automotive
BaFin
Benchmark for German stock performance
Blue-chip
Börsen-Zeitung Index
Chemicals
DAX
Deutsche Börse
Deutscher Aktienindex
Developed market
Diverse
EUR
Economic indicator
Equities
Eurex
Every second
Finance
Frankfurt Stock Exchange
Frankfurt am Main
Free-float market capitalization
From 30 to 40
From 9:00 to 17:30 CET
German
German Stock Index
German blue-chip companies
German companies
German economy
Germany
Globally
Healthcare
High
In financial media
Leading
MDAX
Market capitalization
No
Performance index
Prime Standard
Quarterly
Regulated Market
SDAX
Stock market index
TecDAX

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
425 BC
484 BC
Ancient Greek
Babylon
Battle of Marathon
Battle of Salamis
Battle of Thermopylae
Black Sea
Carian city
Classicists
Conflict between Greeks and Persians
Ctesias
Cyrus the Great
Darius I
Egypt
Egyptians
Father of History
Greco-Persian Wars
Greek
Halicarnassus
Historian
Homer
Inquiry
Leonidas I
Narrative
Persian Empire
Persians
Scythia
Suda
The Histories
Themistocles
Thucydides
Thurii
Xerxes I
beginning of Western historiography
controversial
first to treat historical subjects systematically
frequently cited by later historians
many languages
nine books
oral accounts
prose
research for his history
sometimes
the most Homeric
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
10000
120
14
188898
1902
1930
2
2315
30
575 BC
Adad
Akkadian
Babylon
Babylonian
Berlin
Book of Daniel
German Oriental Society
Germany
Iraq
Ishtar
Marduk
Mesopotamia
Nebuchadnezzar II
Nebuchadnezzar king of Babylon
Nebuchadnezzar's inscriptions
Neo-Babylonian Empire
New Year procession
Pergamon Museum
Processional Way
Robert Koldewey
Tell Babil
Vorderasiatisches Museum
Walter Andrae
archaeological site
aurochs
blue
bulls
ceremonial entrance
city gate
cuneiform
divine protection
dragons
glazed bricks
goddess Ishtar
lapis lazuli blue
lions
mushussu
silicate
walking

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2 Chronicles 36
2 Kings 24-25
538 BCE
582 BCE
586 BCE
597 BCE
70 years
Abednego
Achaemenid Empire
Aramaic language adoption
Assyrian captivity
Babylon
Babylonia
Babylonian Chronicles
Babylonian calendar influence
Babylonian court records
Babylonian exile
Biblical accounts
Book of Daniel
Book of Ezekiel
Book of Jeremiah
Books of Kings
Cyrus Cylinder
Cyrus the Great
Daniel
Daniel 1-6
Egyptian Empire
Ezekiel
Ezekiel 1-48
Ezra
Hebrew Bible
Iron Age
Iron Age IIC
Jehoiachin
Jehoiachin's Ration Tablets
Jeremiah
Jeremiah 39-52
Jerusalem
Jewish diaspora
Jewish fast days
Jewish history
Jewish people
Kingdom of Judah
Lachish letters
Lamentations
Meshach
Nebuchadnezzar II
Nebuchadnezzar II's conquest of Judah
Nebuzaradan
Nehemiah

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1st century CE
24th century BCE
Adapa myth
Afro-Asiatic
Aramaic
Aramaic loanwords
Assyrian
Atra-Hasis
Babylonian
Babylonian Map of the World
Chronicle P
Code of Hammurabi
Cuthean Legend of Naram-Sin
Descent of Ishtar
Dialogue of Pessimism
Dynastic Chronicle
East Semitic
Elamite loanwords
Enuma Elish
Epic of Gilgamesh
Erra Epic
Esagil Chronicle
Etana myth
Greek loanwords
Hebrew
Hittite loanwords
Hurrian loanwords
Late Babylonian
Ludlul bēl nēmeqi
MUL.APIN
Mesopotamia
Middle Babylonian
Neo-Assyrian
Neo-Babylonian
Nergal and Ereshkigal
Old Akkadian
Old Assyrian
Old Babylonian
Persian loanwords
Poor Man of Nippur
SOV
Sargon Legend
Semitic
Semitic language
Standard Babylonian
Sumerian
Sumerian loanwords
The Babylonian Theodicy
Uruk List of Kings and Sages
Weidner Chronicle

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1 Corinthians
1 John
1 Peter
1189
2 Corinthians
2 John
2 Peter
27
3 John
31102
3566480
39
40+
66
700+
783137
Approximately 1500 BC to 100 AD
Approximately 1600 years
Aramaic
Bible
Biblical Hebrew
Biblical studies
By millions worldwide
Catholic Canon
Christian churches
Christianity
Codex Sinaiticus
Covenant
Daniel
Deuterocanonical books
Ecclesiastes
English Standard Version
Epistle
Exodus
Extensively
Ezekiel
Foundational for Christianity
Galatians
Genesis
Genesis 1-2
Genesis 6-9
Gospel
Greek
Hebrew
Hebrews
History
In religious services
Isaiah
James
Jeremiah

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
425 BCE
484 BCE
5th century BCE
Achaemenid Empire
Alexandrian Scholars
Ancient Egypt
Ancient Greek Historian
Ancient Persia
Arabian Geography
Athenian Colonization of Thurii
Athenian Democracy
Athenian Triremes
Athens
Autopsy
Babylon
Babylonian Architecture
Babylonian Customs
Babylonian Hanging Gardens
Battle of Marathon
Battle of Plataea
Battle of Salamis
Battle of Thermopylae
Black Sea region
Croesus
Cultural Insights
Cyrus the Great
Darius I
Distinguish Between Myth and History
Dryo
Egypt
Egyptian Chariots
Egyptian Irrigation
Egyptian Mummification
Egyptian Nomes
Egyptian Pyramids
Egyptian Religion
Ethiopian People
Ethnographic Details
Eyewitness Accounts
Father of History
Geographical Descriptions
Greco-Persian Wars
Greek Colonization
Greek Gods
Greek Hoplites
Greek Poleis
Halicarnassus
Hecataeus of Miletus
Heroic Legends
Historical Scope

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1753
1759
1852
1997
2000
92,000 square meters
Assyrian reliefs
Benin Bronzes
Board of Trustees
British Library
British Museum Press
Camden
Collection online
Department for Culture, Media and Sport
Department of Ancient Egypt and Sudan
Department of Asia
Department of Coins and Medals
Department of Greece and Rome
Department of Prehistory and Europe
Department of Prints and Drawings
Department of the Middle East
Egyptian mummies
Egyptian sculpture
Elgin Marbles
Facebook
Goodge Street
Great Court
Great Russell Street
Greek Revival
Hartwig Fischer
Holborn
Instagram
Lewis Chessmen
London
Ming: 50 years that changed China
Neil MacGregor
Norman Foster
Parthenon Marbles
Rosetta Stone
Round Reading Room
Russell Square
Sir Hans Sloane
Sir Robert Smirke
Sutton Hoo helmet
Tottenham Court Road
Tutankhamun
Twitter
UNESCO Memory of the World
United Kingdom
WC1B 3DG

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12 tablets
1872
19th century
Akkadian
Akkadian language
Akkadian literature
Akkadian verse
Ancient Mesopotamia
Ancient Mesopotamian literature
Ancient Near Eastern studies
Ancient Near Eastern text
Anu
Assyriology
Austen Henry Layard
Babylonian
Biblical flood narrative
British Museum
Civilization vs. nature
Classical literature
Clay tablets
Creation of Enkidu
Cuneiform script
Death of Enkidu
Divine intervention
Ea
Early Dynastic period ruler
Enkidu
Enlil
Epic poem
Epic poetry
Films and television
Flood myth
Flood story
Foundation of Mesopotamian identity
Fragmentary
Friendship
Friendship between Gilgamesh and Enkidu
George Smith
Gilgamesh
Gilgamesh of Uruk
Gilgamesh's grief
Gilgamesh's tyranny in Uruk
Heroic journey
Humbaba
Important for understanding ancient Mesopotamia
Influenced Homeric epics
Ishtar
Key text from Library of Ashurbanipal
Key text in comparative mythology
Later Mesopotamian literature

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1750 BC
1792 BC
18th Century BC
1901
282
Agriculture
Akkadian
Akkadian Traditions
Amarna Letters
Amorite
Amorites
Army
Assyria
Assyriologists
Babylon
Babylonian Empire
Babylonian Ruler
Bible
Bronze Age
Canals
Centralized Administration
City-States
Clay Tablets
Code of Hammurabi
Commercial Law
Cuneiform
Diorite
Egypt
Elamites
Eshnunna
Eye for an eye principle
Family Law
First Babylonian Dynasty
Fortifications
Governors
Great Lawgiver
Herodotus
His Death
Historians
Human
Imperial Administration
Iraq
Irrigation
Ishme-Dagan I
Ishtar
Judges
King
King of Babylon
King of Sumer and Akkad
Labor Law

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Adad
Administrative systems
Agriculture
Akkadian dialect influence
Akkadian texts
Akkadians
Alalakh
Amorites
Amurru in Akkadian
Anatolia
Ancient Near Eastern civilization
Ancient Near Eastern studies
Ancient Semitic-speaking people
Architectural styles
Assyrian culture
Assyrians
Assyriology
Babylon
Babylonian culture
Biblical archaeology
Biblical texts
Bridge between Sumerian and Babylonian civilizations
Bronze Age
City-states
Clay tablets
Code of Hammurabi
Contributed to biblical history
Contributors to Mesopotamian cultural synthesis
Cuneiform tablets
Dagan
Deuteronomy
Ebla
Ebla tablets
Egypt
Egyptians
Elamites
Establishing Babylonian dynasties
Execration texts
Fortified cities
From Syrian desert to Mesopotamia
Genesis 10:16
Hammurabi
Hill dwellers
Hittites
Important Bronze Age civilization
Influenced subsequent Mesopotamian cultures
Ishtar
Joshua
Kassites
Kingdoms

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1539 AD
1st century BC
40 books
Agyrium, Sicily
Alexander the Great
Ancient Greek
Ancient Greek Historian
Ancient Historians
Annalistic
Argonauts
Atlantis
Better for Contemporary Events
Bibliotheca historica
Books 1-5, 11-20
Byzantine Manuscripts
Celtic Peoples
Chronological Errors
Chronological Organization
Classical Scholars
Clear and Readable
Compilation
Comprehensive Scope
Cultural History
Cultural Practices
Diadochi Wars
Diodorus of Sicily
Educational
Egypt
Egyptian History
English
Entertaining
Ephorus
Ethnographic Information
Europe
FGrHist
Fragmentary
French
Geographical Descriptions
German
Greek
Greek Historiography
Greek Intellectual
Greek Mythology
Hellenistic Period
Heracles
Herodotus
Historian
Historical Compilation
Historical Methodology
Important for Sicilian History

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1754 BCE
18th Century BCE
1901
2.25 meters
282
Adoption
Adultery
Akkadian Language
An eye for an eye
Ancient Near Eastern History
Assault
Assyrian Law
Awilum
Babylonian
Blessings for Obeyers
Builder Liability
Burden of Proof
Centralize Authority
Code of Lipit-Ishtar
Code of Ur-Nammu
Commercial Law
Comparative Law
Could Engage in Business
Could Own Property
Criminal Law
Crop Damage
Cuneiform
Cuneiform Studies
Curses for Violators
Death Penalty
Debt
Department of Near Eastern Antiquities
Diorite Stele
Divine Sanction
Divorce
English
Establish Justice
Family Law
France
French
French Archaeological Mission
German
God of Justice
Hammurabi
Hammurabi receiving laws from Shamash
Hammurabi's Achievements
Harvard Law School
Hittite Law
Influenced Later Legal Systems
Inheritance

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
32
323 BC
336 BC
356 BC
Achaemenid Empire
Achilles
Alexander IV of Macedon
Alexander Mosaic
Alexander Romance
Alexander Sarcophagus
Alexandria
Alexandria Eschate
Alexandria on the Caucasus
Ancient Greek
Ancient Greek Religion
Antigonus I Monophthalmus
Aristotle
Arrian
Babylon
Balkan Campaign
Battle of Gaugamela
Battle of Granicus
Battle of Issus
Battle of the Hydaspes
Bucephala
Bucephalus
Cassander
Cavalry Charge
Companion Cavalry
Conquest of the Persian Empire
Craterus
Darius III
Diodorus Siculus
Ecbatana
Egypt
Fever
Founding of Hellenistic Kingdoms
From Greece to India
Gordium
Hammer and Anvil
Hegemon of the Hellenic League
Hellenistic Period
Hephaestion
Heracles
Heracles of Macedon
Human
Hypaspists
Illness
Indian Campaign
Iskandar in Persian literature

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1st millennium BCE
Akkadian
Akkadian traditions
Amel-Marduk
Assyrian King List
Assyriologists
Assyriology
Babylon
Babylonia
Babylonian King List A
Babylonian King List B
Babylonian King List C
Babylonian kings
British Museum
Burnaburiash
Chaldean dynasty
Dynastic Chronicle
Dynasty of E
Egyptian king lists
Evil-Merodach
First Dynasty of Babylon
First Sealand dynasty
Hammurabi
Hellenistic period
Hittite king lists
Istanbul Archaeology Museums
Kassite dynasty
Kurigalzu
Marduk-apla-iddina II
Mesopotamia
Nabonidus
Nabopolassar
Nebuchadnezzar II
Neo-Babylonian Empire
Neo-Babylonian period
Nippur
Persian conquest
Samsu-iluna
Second Dynasty of Isin
Sumerian King List
Sumerian traditions
Uruk
Uruk King List
Vorderasiatisches Museum Berlin
academic publications
ancient Mesopotamian document
ancient Near Eastern studies
archaeological reports
archaeologists
biblical genealogies

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12 days
200 meters
Akitu
Akitu House
Akītu
April 1
Ashur
Assyria
Assyrian community
Assyrians
Babylon
Babylonian Chronicles
Babylonians
Bit Akitu
Bronze Age
Christian Easter
Egyptian Opet festival
Enlil
Enuma Elish
Esagila temple
Greek Thesmophoria
Iraq
Iron Age
Jewish Passover
Marduk
Mesopotamia
Mesopotamian festival
Mesopotamian mythology
Mesopotamian religion
Nabu
Neo-Assyrian period
Neo-Babylonian period
New Year festival
Nisan
Nowruz
Procession Street
Resh Shattim
Roman Saturnalia
Sumer
Sumerians
Tashritu
Zagmuk
agricultural renewal
ancient Near Eastern festivals
ancient historians
artifacts
autumn
autumn equinox
beginning of planting season
celebration of creation

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2800 kilometers
356 cubic meters per second
500000 square kilometers
Abu Kamal
Agriculture
Al-Adhamiyah
Al-Akkad
Al-Amara
Al-Amiriyah
Al-Asharah
Al-Assur
Al-Babylon
Al-Baladiyat
Al-Bayaa
Al-Bukamal
Al-Ctesiphon
Al-Diwaniyah
Al-Dora
Al-Dura-Europos
Al-Eridu
Al-Ghazaliya
Al-Harthiya
Al-Haswah
Al-Hatra
Al-Hay
Al-Hillah
Al-Hindiya
Al-Hurriyah
Al-Isin
Al-Iskandariyah
Al-Jadriyah
Al-Jami'a
Al-Kadhimiya
Al-Karbala
Al-Karkh
Al-Karrada
Al-Khalidiya
Al-Kifl
Al-Kish
Al-Kut
Al-Larsa
Al-Latifiyah
Al-Mada'in
Al-Mahawil
Al-Mahmudiya
Al-Mahmudiyah
Al-Mansour
Al-Mari
Al-Mashtal
Al-Mayadin

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
562 BC
605 BC
Amel-Marduk
Amyitis
Assyria
Babylon
Babylonia
Babylonian Chronicles
Babylonian Empire
Bible
Biblical figure
Book of Daniel
Book of Jeremiah
Book of Kings
Carchemish
Chaldean dynasty
Egypt
Etemenanki
First Temple
Hanging Gardens of Babylon
Herodotus
Jerusalem
Jews
Kingdom of Judah
Kingdom of Judah inhabitants
Marduk
Mesopotamia
Mesopotamia to Levant
Nabopolassar
Nebuchadnezzar Chronicle
Necho II
Neo-Babylonian Empire
Neo-Babylonian period
battle of Carchemish
c. 634 BC
cuneiform inscriptions
cuneiform tablets
defense walls
destroying Jerusalem temple
imperial
king
person
promoted Marduk worship
unknown
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1899
1899-1917
300 feet
300 feet square
43 years
4th century BCE
562 BCE
605 BCE
6th century BCE
7
91 meters
91 meters square
Alexander the Great
Ancient Near East
Babylon
Babylonian texts
Esagila Tablet
Esagila complex
German Oriental Society
Greek historians
Herodotus
Iraq
Iraqi national monument
Marduk
Mesopotamia
Mesopotamian
Nabonidus
Nebuchadnezzar II
Nebuchadnezzar's inscriptions
Neo-Babylonian Empire
New Year festival
Robert Koldewey
Strabo
Tell Amran ibn Ali
Tower of Babel
Tower of Babel story
after Persian conquest
archaeological studies
astronomical observations
baked brick
baked brick exterior
biblical accounts
biblical archaeology
bitumen
bitumen layers
blue
brick stamps
buttressed walls
cardinal directions
central to Babylonian religion

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1990 Euphrates Agreement
2800
356
500000
Agriculture in Iraq
Ancient Irrigation Systems
Ancient Mesopotamia
Ancient Trade
Arabs
Asia
Assyrian Empire
Atatürk Dam
Babylon
Babylonian Empire
Baghdad
Balikh River
Bible
Border Between Syria and Iraq
Climate Change
Confluence with Tigris at al-Qurnah
Date Palms
Desertification
Drought
Eastern Turkey
Epic of Gilgamesh
Euphrates Basin
Fallujah
Fertile Crescent
Fish
Herodotus
Hydropower
Iraq
Irrigation
Karasu River
Khabur River
Kurds
Limited
Mesopotamian Civilization
Millions of People
Murat River
Nasiriyah
Perennial River
Persian Gulf
Purattu
Raqqa
River
Seasonal
Shatt al-Arab
Snowmelt-Dependent Flow
Sumerian Culture

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Akitu
Akkadian
Akkadians
Ancient Assyrians
Ancient Near East
Anu
Armenia
Ashur
Ashurbanipal
Assur
Assyria
Assyrian Church of the East
Assyrian Empire
Assyrian Law Code
Assyrian Neo-Aramaic
Assyrian New Year
Assyrian architecture
Assyrian dialect of Akkadian
Assyrian flag
Assyrian folk music
Assyrian genocide
Assyrian lion weights
Assyrian struggle for independence
Australia
Baklava
Black Obelisk of Shalmaneser III
Canada
Chaldean Catholic Church
Chaldean Neo-Aramaic
Christianity
City walls
Cuneiform
Cylinder seals
Davul
Dolma
Dur-Sharrukin
Ea
Enlil
Enuma Elish
Epic of Gilgamesh
Esarhaddon
Ethnic group
Fall of Nineveh
France
Gate guardians
Georgia
Germany
Hatra
Iran
Iraq

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2000 BCE
50
Akitu
Akkadian religion
Assyrians
Babylon
Babylonian Chronicles
Babylonian New Year
Babylonian god
Babylonian hegemony
Babylonians
Bel
Borsippa
Bēl
Code of Hammurabi
Damkina
Ea
Enlil
Enlil of the gods
Enuma Elish
Esagila
Etemenanki
Hammurabi
Imhullu
Jupiter
Lord
Mesopotamia
Mesopotamian deity
Nabu
Nanshe
Nebuchadnezzar II
Nippur
Persian conquest
Sarpanitu
Sumerian religion
Tablet of Destinies
Tiamat's defeat
Zeus
biblical themes
creation of humanity
creator deity
god of agriculture
god of storms
justice
king of the gods
mušḫuššu
patron deity of Babylon
protection of kings
spade
standing on mušḫuššu

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
24 years
681 BC
705 BC
705 BC to 681 BC
8th-7th centuries BC
Akkadian
Akkadian speakers
Ancient Mesopotamian records
Ancient Mesopotamian religion
Ancient Near Eastern rulers
Aqueduct at Jerwan
Aramaic
Ashur
Assassinated by his sons
Assassination
Assur
Assyria
Assyrian military
Assyrian reliefs
Babylon
Babylonian rebellion
City of Babylon
City walls of Nineveh
Egyptian influence in Levant
Elam
Esarhaddon
Grand construction projects
Heavy tribute from conquered regions
Hebrew Bible
Human
Iron Age
Ishtar
King
King of Assyria
King of Babylon
Large armies
Later Assyrian rulers
Massive building projects in Nineveh
Mesopotamia
Military campaigns in Levant
Neo-Assyrian Empire
Neo-Assyrian period
Nineveh
Royal Palace at Nineveh
Royal inscriptions
Sargon II
Siege of Jerusalem
Southwest Palace at Nineveh
Taylor Prism
Taylor Prism inscriptions

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+964
.iq
100 kilometers south of Baghdad
104
2003 Iraq War affected area
230V/50Hz
51001
Al-Hilla
Al-Hilla Grand Mosque
Al-Hilla News
Al-Hilla Public Park
Al-Hilla SC
Al-Hilla Stadium
Al-Hilla TV
Al-Hilla Teaching Hospital
Arab majority
Arabia Standard Time
Arabic
Babil Governorate
Babylon
Babylon Hotel
Babylon International Festival
Babylon Museum
Babylon Research Center
Babylon designated UNESCO World Heritage Site
Babylon ruins
Baghdad International Airport
Bank of Baghdad branch
Battle of Hillah (1920)
Camp Babylon
Carrefour Hillah
Central Library of Hillah
Euphrates River
Euphrates River source
Governor of Babil
Hanging Gardens site
Hillah Central Bus Station
Hillah Cultural Center
Hillah Fire Department
Hillah Mall
Hillah Museum
Hillah National Theater
Hillah Police Directorate
Hillah Souq
Hillah Technical College
Hillah Tourism Directorate
Iraq
Iraqi Army bases
Iraqi Dinar
Iraqi visa required for most foreigners

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1876
7
Akitu festival
Akkadian language
Ancient Mesopotamian text
Anshar
Apsu
Assyrian period
Assyrian versions exist
Assyriology
Babylonian
Babylonian creation myth
British Museum
Epic poem
Genesis creation story
George Smith
Imhullu
Kishar
Lahamu
Lahmu
Library of Ashurbanipal
Marduk
Marduk vs Tiamat
Marduk's kingship
Mummu
New Year festival ritual
Nineveh
Old Babylonian period
Sumerian creation myths
Sumerian mythology
Tablet of Destinies
Tiamat
Tiamat's consort
When on High
available online
become heavens and earth
biblical literature
blood of Kingu
calendar
central theme
circa 18th-16th century BCE
clay tablets
comparative mythology
constellations
cosmogony
creation of Babylon
critical texts available
cuneiform
dating and origins
divine combat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
669 BC
670 BC, Egypt subdued
680 BC
7th century BC
81st
Absolute monarchism
Akitu festival observance as per custom
Ashurbanipal
Ashurbanipal got Assyria, Shamash-shum-ukin got Babylon
Assyrian involvement in Egypt
Babylon
Builder of gates at Nineveh
Clay foundation tablets
Cuneiform tablets trace actions and laws
Described in palace inscriptions
Economic dependencies between regions enacted
Egypt
Great-grandfather was Sargon II
Human
Integrated conquered Levantine states
King
King of Assyria
King of Babylon
Letters to provincial governors instruct duties
Married to Esharra-hammat
Naqi'a
Neo-Assyrian Empire
Neo-Assyrian records
Nineveh's temples damaged or aging earlier
Reestablish control of Assyrian periphery
Restorer of Babylon
Royal Annals
Rule lasted approximately 12 years
Sargonid dynasty
Seat of power was Nineveh
Sennacherib
Shamash-shum-ukin
Sons jointly ruled after his passing
Treaty with Median rulers
Under him, alliances with Babylonia remained
Use of eunuchs in court positions
Victory Stele of Esarhaddon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
323 BC
336 BC
356 BC
Alexander IV
Alexander Mosaic
Alexandria
Alexandria Eschate
Argead dynasty
Aristotle
Arrian
Asia
Babylon
Battle of Gaugamela
Battle of Issus
Battle of the Granicus
Battle of the Hydaspes
Bucephala
Bucephalus
Craterus
Darius III
Egypt
Gedrosian Desert
Gymnosophists
Hellenistic culture spread
Hephaestion
Hydaspes
India
Indian Campaign
Indus
King
King Porus
King of Kings
Macedonian King
Multan
Olympias
Opis
Oracle of Siwa
Oxyartes
Parmenion
Parysatis
Pella
Persia
Persian
Persian Campaign
Persian Empire
Philip II of Macedon
Philip III Arrhidaeus
Plutarch
Ptolemy
Roxana

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
20th century finds
Acceptance of mortality
Akkadian
Akkadian culture
Ancient Mesopotamia
Ancient Mesopotamian literature
Ancient Near Eastern literature
Ancient texts
Atrahasis
Austin Henry Layard
Bull of Heaven
Civilization vs wilderness
Clay tablets
Cuneiform
Cuneiform tablets
Death of Enkidu
English
Enkidu
Epic poem
Flood narratives
Flood story in Genesis
Fragmentary
Friendship
George Smith
Gilgamesh
Gilgamesh and Agga
Gilgamesh's tyranny
Historical Gilgamesh
Homeric epics
Humbaba
Ishtar
Library of Ashurbanipal
Meeting with Utnapishtim
Mesopotamia
Moral instruction
Mortality
Museums
Mythological epic
Nineveh
Oldest known epic
Over 200 tablets
Plant of youth
Poetic
Quest for immortality
Scholarly editions
Seeking eternal life
Shamash
Siduri
Sin-liqe-unninni

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1200 BCE to 100 CE
13th century
16th century
27
3000 languages
39
4th century CE
66
Ancient Israelites
Apostles' ministry
Aramaic
Biblical Hebrew
Christian theology
Christianity
Chronicles
Corinthians
Creation story
David
Dead Sea Scrolls
Deuteronomy
Ecclesiastes
Epistle
Exodus
Ezekiel
Galatians
Genesis
Hebrew
Hebrew Bible
Historical narrative
Inspired by God
Isaiah
Jeremiah
Jesus Christ
Jewish law
Job
John
Judaism
King James Version
Koine Greek
Leviticus
Life of Jesus
Luke
Luther Bible
Mark
Matthew
Michelangelo's Sistine Chapel
Middle East
Mosaic Covenant
Moses
New Covenant

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Technology
To maintain relevance
Trading volume
Yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Iraq
Iron Age
Key site
Kingship
Large
Large complex
Later temples
Legitimizing rule
Major temple
Marduk
Marduk's dwelling
Mesopotamia
Mesopotamian
Mortar use
Mudbrick
Nabopolassar
Nabu
Near Hillah
Nebuchadnezzar II
Neo-Babylonian era
Neo-Babylonian period
New Year
New Year festival
Ornate
Partial
Persian conquest
Prayers
Priests
Reliefs
Religious
Religious center
Religious hub
Robert Koldewey
Royalty
Ruined
Sacrifices
Sanctuary
Sennacherib
Statues
Stone
Storage
Sumerian architecture
Symbol of Babylonian power
Tablets
Tax collection
Temple
Urban
Votive offerings
Wood
World Heritage

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19th century
360-degree circle
60-minute hour
Akkadian
Akkadian Empire
Alexander the Great
Anatolia
Ancient Greek
Arid
Ashurbanipal
Assyria
Assyrian
Assyrian Empire
Astronomy
Babylon
Babylonia
Babylonian
Babylonian Empire
Babylonian astrology
Barley
Base-60 number system
Beer
Between Tigris and Euphrates rivers
Bread
British Museum
Bronze
Bronze Age
Calendar
Chariots
City-states
Clay tablets
Code of Hammurabi
Composite bow
Contracts
Cradle of civilization
Cubit
Cuneiform
Cylinder seals
Enlil
Enuma Elish
Epic of Gilgamesh
Eridu
Euphrates River
Fertile Crescent
Flood management
Fraction/sixths
Gilgamesh
Goat
Gold
Hammurabi

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Neo-Babylonian Empire
Second Temple construction
Second Temple period
Shadrach
Sheshbazzar
Solomon's Temple
Tel Abib
Tisha B'Av
Zedekiah
Zerubbabel
agriculture
along Chebar River
ancient Near Eastern history
approximately 70 years
beginning of Second Temple leadership
biblical archaeology
biblical literature
campaigns in Judah
codification of religious laws
compilation of Hebrew scriptures
craftsmanship
creation of Jewish communities abroad
destruction of First Temple
development of Judaism
development of prayer services
development of synagogues
divine punishment
emphasis on Sabbath observance
emphasis on monotheism
end of Davidic monarchy
exile period
forced labor
foundation for modern Judaism
generally permitted
historical event
hope for restoration
importance of written law
influence on Christianity
messianic expectations
multiple
parts of Psalms
psalms of exile
siege of Jerusalem
significant population displacement
some achieved high positions
strengthening of Jewish identity
thousands
trade
turning point in Jewish history
varied from slavery to high office

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Ishtar
Jordan
Kebab
Kha b-Nisan
Khigga
Kleicha
Lachish Reliefs
Lamassu
Lebanon
Library of Ashurbanipal
Marduk
Mesopotamia
Netherlands
Nimrud
Nineveh
Oud
Pacha
Palace reliefs
Peshmerga
Qanun
Russia
Sargon of Akkad
Semitic people
Sennacherib
Shalmaneser III
Shara
Sheikhani
Siege warfare
Simele massacre
Star of Shamash
Sweden
Syria
Syriac Christianity
Syriac Orthodox Church
Tiamat
Tiglath-Pileser III
Tree of Life
Turkey
Turoyo
United Kingdom
United States
Winged sun disk
Ziggurat
Zurna

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Börsen-Zeitung Index

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: BaFin

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: DAX

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Deutsche Börse

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Deutscher Aktienindex

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Eurex

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Frankfurt Stock Exchange

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Germany

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: German Stock Index

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Frankfurt am Main

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: MDAX

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Regulated Market

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Prime Standard

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: SDAX

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: TecDAX

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Homer
Indian Customs
Inquiry
Ionian Revolt
Ionic Greek
Italy
Later Greek Historians
Libyan Tribes
Lydian Coinage
Lydian Empire
Lyxes
Macedonian Kingdom
Median Empire
Mythological Elements
Narrative Style
Nile River
Nine Books
Oracle of Delphi
Oral Tradition
Panyassis
Pella
Pericles
Persia
Persian Customs
Persian Immortals
Persian Religion
Persian Royal Road
Persian Satrapies
Persian Taxation
Phoenician Navigation
Phoenician Triremes
Plutarch
Scythia
Scythian Burial Mounds
Scythian Customs
Scythian Horse Archers
Scythian Nomadism
Scythian Warfare
Socrates
Sophocles
Spartan Phalanx
Spartan Society
Systematic Historical Investigation
The Histories
Thracian Culture
Thucydides
Thurii
Xerxes I

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
astrophysicist
catchphrase 'Bazinga!'
comic book collecting
comic books
experimental physicist
fashion-conscious
geek culture
high voice
highly intelligent
intelligent
kind-hearted
knocking three times
ladies' man
lives with his mother
microbiologist
multi-camera
nerdy
neurobiologist
obsessive-compulsive
outgoing
pharmaceutical researcher
pharmaceutical sales representative
science
selective mutism around women
sitcom
socially awkward
superheroes
sweet but firm
television series
theme song by Barenaked Ladies
theoretical physicist
video games
waitress

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Temple treasury in Babylon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Legal traditions
Levant
Mari
Mari archives evidence
Mari tablets
Martu in Sumerian
Mercenary service
Mesopotamia
Mixed pastoral-agricultural economy
Nomadic camps
Nomadic pastoralist origins
Nomadic to urban transition
Old Assyrian merchants
Old Babylonian period
Pastoralism
Patriarchal society
Persian Gulf
Polytheistic
Pottery
Seals
Semitic languages
Shamshi-Adad I
Sumerian city-states
Sumerian texts
Sumerians
Syria
Tell Hariri
Tell Leilan
Tent dwellers
Third Dynasty of Ur
Trade
Tribal confederations
Tribal hierarchy
Tribal warfare
Ugarit
Various Mesopotamian states
Villages
Weapons
West Semitic languages
Westerners in Mesopotamian texts
Yamhad
Zimri-Lim
c. 1600 BCE
c. 2000-1600 BCE

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Information on Hellenistic Kingdoms
Later Compilers
Loeb Classical Library
Mediterranean
Moralizing
Multiple Recensions
Mythological times to 60 BC
Near East
OCD
Olympic Games
Persian Wars
Polybius
Posidonius
Preservation of Fragments
Reign of Augustus
Reign of Julius Caesar
Renaissance Historians
Rhetorical Training
Roman Empire
Roman Republic
Roman Subject
Rome
Seven Wonders
Siculus
Source Analysis
Source for Egyptian Chronology
Source for Lost Works
Teubner
Textual Criticism
Thematic Sections
Theseus
Thucydides
Timaeus
Uncritical Use of Sources
Universal History
Variable by Section
Writer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
accusative
administration
ancient Near East
ancient language
astronomical texts
astronomy
circa 2500 BCE to 100 CE
city of Akkad
cuneiform
diplomatic language
dual
economic records
emphatic consonants
epics
feminine
fusional
genitive
guttural consonants
language
law
legal codes
letters
lingua franca
literature
masculine
mathematical texts
mathematics
medical texts
medicine
myths
nominative
nominative-accusative
omen texts
past
plural
prefix conjugation
present
preterite
religion
royal inscriptions
school texts
science
singular
suffix conjugation
thousands of tablets
thousands of words
vowel harmony

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Jesus Christ
Jewish synagogues
Job
John
John 3:16
Judaism
Jude
King James Version
Kingdom of God
Koine Greek
Law
Luke
Mark
Matthew
New International Version
New Testament
Old Testament
Orthodox Canon
Poetry
Profound impact on Western culture
Prophecy
Protestant Canon
Proverbs
Psalm 117
Psalm 118
Psalm 119
Psalms
Records ancient Near Eastern history
Redemption
Religious text
Revelation
Romans
Salvation
Septuagint
Significantly
Thousands
Wycliffe Bible
Yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
YouTube
antiquities
available
available for schools
available online
britishmuseum.org
coins and medals
ethnography
family activities
for personal use
free
glass and steel
late night openings
lectures and talks
millions of pounds
museum
national public museum
non-departmental public body
ongoing
over 1,000
over 500
over 6 million
over 6.7 million in 2019
over 8 million objects
over 90
prints and drawings
prohibited
regularly held
restricted
two million years of history
welcomed
with universities
worldwide
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Siege of Tyre
Sogdian Rock
Stateira
illness
military genius
unknown

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Larsa
Later Legal Systems
Law Code Stele
Legal Code
Legal Precedent
Legal Scholars
Louvre Museum
Marduk
Mari
Mari Tablets
Mediterranean Sea
Mesopotamia
Old Babylonian Period
Persian Gulf
Proclamation by Gods
Protection of Property
Retributive Justice
Rim-Sin I
Royal Inscriptions
Samsu-iluna
Shamash
Shamshi-Adad I
Sin-Muballit
Slavery Regulations
Social Hierarchy
Standardized Weights and Measures
Stele
Stele of Hammurabi
Successful Conqueror
Sumerian Laws
Susa
Taxes
Temples
The kinsman is a healer
Trade
Urban Development
Zimri-Lim

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
cleansing of temples
common people
cosmic order
cuneiform tablets
determination of fates
display of power
divine statues
ensuring fertility
ensuring good harvest
feasting
first month of Babylonian calendar
from Esagila to Bit Akitu
honoring gods
humiliation of king
inscriptions
king
kingship legitimacy
legitimization of ruler
priests
procession of gods
public celebrations
public feasting
purification rituals
reading of Enuma Elish
reaffirmation of divine order
rebirth
reinforcement of social hierarchy
reinstatement of king
religious festival
renewal
renewal of cosmos
renewal of kingship
return of gods to temples
royal inscriptions
royal participation
sacred boat
sacred marriage
sacrifices
spring
spring equinox
statues of gods
temple remains
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
18th century BCE
539 BCE
6th century BCE
Achaemenid Empire
Administrative records
Agricultural based
Agricultural produce
Akkadian
Akkadian Empire
Akkadian culture
Algebraic methods
Ancient Mesopotamian religion
Ancient empire
Appointed governors
Arid
Assyria
Assyrian Empire
Astronomy
Babylon
Babylon ruins
Babylonian Captivity
Base-60 numeral system
Basis for time measurement
Bazaars
Borsippa
Cereal cultivation
Class-based society
Clay tablets
Code of Hammurabi
Cuneiform writing
Cyrus the Great
Divination
Donkey caravans
Elam
Enuma Elish
Epic of Gilgamesh
Etemenanki ziggurat
Euphrates
Exacted from conquered regions
Exchanged envoys
External invasions
Fertile Crescent
Glazed brick
Grain
Granaries
Hammurabi
Hanging Gardens
Hereditary
Impact on Western astronomy
Influenced later Mesopotamian cultures

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Interest Rates
Iran
Irrigation Rights
Jacques de Morgan
King as Intermediary
Labor Law
Laws of Eshnunna
Legal Code
Legal History Landmark
Lex Talionis
Louvre Museum
Marriage
Medical Malpractice
Mesopotamia
Monetary Compensation
Murder
Mushkenum
Nearly Complete
Oldest Complete Legal Code
Paris
Perjury
Physical Retaliation
Presumption of Innocence
Price Controls
Priests Subject to Code
Primary Source for Babylonian Society
Property Law
Protect the Weak
Sb 8
Shamash
Ship Captain Liability
Slavery
Standardize Legal System
Subject to Husband's Authority
Sun God
Susa
Temple as Legal Entity
Theft
Three-tiered
Unify Empire
United Nations Headquarters
Wage Regulations
Wardum
Well-preserved

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Syria
Syrian Desert
Tabqa Dam
Tigris River
Tigris-Euphrates River System
True
Turkey
Ur
Water Management Conflicts

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Justin
King
King of Macedon
Lord of Asia
Lysimachus
Macedon
Macedonian
Macedonian Phalanx
Military Commander
Military tactics and strategy
Olympias
Oracle of Siwa
Parysatis II
Pella
Perdiccas
Persepolis
Persian Campaign
Pharaoh of Egypt
Philip II of Macedon
Philip III of Macedon
Plutarch
Porus
Ptolemy I Soter
Quintus Curtius Rufus
Roxana
Seleucus I Nicator
Shahanshah of Persia
Siege Warfare
Siege of Tyre
Sikandar in Indian literature
Spread of Greek Culture
Stateira II
Studied at Mieza
Susa
Tutored by Aristotle
Zeus

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Ishhtar Gate replica
Lion of Babylon statue
Mesopotamia
Nebuchadnezzar II Palace ruins
Radio Hillah
Shia Muslim majority
Shia shrines
Tower of Babel site
University of Babylon
Zain, AsiaCell, Korek
agriculture
approximately 30 meters above sea level
associated with Babylonian kings
available
barley
buses and minibuses
check travel advisories
city
connected by highway to Baghdad
dates
desert climate
dishdasha for men, abaya for women
food processing
high
limited
masgouf, kubba, dolma
medieval period
multiple cinemas
multiple pharmacies
multiple primary and secondary schools
municipal
municipal collection
national grid
near ancient Babylon
no major airport
on Euphrates River
over 500,000
proximity to Babylon excavations
right
served by Hillah Railway Station
small Christian community
textile manufacturing
traditional Iraqi cuisine
wheat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
chronological order
chronological studies
clay tablets
cultural memory
cuneiform script
dating events
document history
dynastic information
dynastic succession
epithets
fall of Babylon
for Mesopotamian history
for ancient chronology
for understanding kingship
from antiquity to Hellenistic period
genealogical information
historians
historical analysis
historical chronology
historical document
historical kings
historical research
in dynastic sequences
in reign lengths
king list
legitimize rulers
list format
local historiography
museums
mythological kings
political ideology
reconstructing history
record chronology
regnal years
reign lengths
religious beliefs
royal titles
tabular arrangement
textual criticism
to cities
to gods
to temples
understanding politics
with other sources

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Al-Musaib
Al-Musayyib
Al-Muthanna
Al-Najaf
Al-Nasiriyah
Al-Nimrud
Al-Nineveh
Al-Nippur
Al-Qa'im
Al-Qadisiyah
Al-Qaim
Al-Rusafa
Al-Sadr City
Al-Samawah
Al-Saydiya
Al-Seleucia
Al-Shaab
Al-Shu'ala
Al-Shuruppak
Al-Suwaira
Al-Taji
Al-Tell Beydar
Al-Tell Brak
Al-Tell Leilan
Al-Thawrah
Al-Ur
Al-Uruk
Al-Utaifiya
Al-Yusufiyah
Al-Za'franiya
Al-Zawra
Ana
Arid
Assyria
Atatürk Dam
Babylon
Baghdad
Bible
Deir ez-Zor
Drinking
Drought
Fallujah
Haditha
Haditha Dam
Hit
Hydroelectric Power
Iraq
Karbala
Marshlands
Mayadin

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
continuous
corbeled vaulting
cuneiform tablets
daily offerings
deep
drained resources
erosion
external staircases
forced labor
foundation cylinders
glazed bricks
immense
imported timber
larger than other ziggurats
later ziggurats
limited
link between heaven and earth
local clay
looting
minimal due to instability
multi-phase
none successful
observing planets
older ziggurat
one of the most famous ziggurats
ongoing
part of Babylon World Heritage Site
processions
regular attendants
religious temple
restricted
ritual vessels
royal architects
ruins
shrine
skilled craftsmen
statues of Marduk
sun-dried brick core
symbol of royal power
terraced levels
thousands
tracking stars
triple staircase
ziggurat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Library of Ashurbanipal
Meeting with Utnapishtim
Mesopotamia
Monsters and guardians
Mortality
Multiple versions exist
National epic of Mesopotamia
Nineveh
Novels and retellings
Old Babylonian version
Oldest known epic poem
Operas and musical works
Plant of rejuvenation
Power and kingship
Quest for immortality
Quest to Cedar Forest
Rejection of Ishtar
Return to Uruk
Reveals ancient Mesopotamian worldview
Royal ideology text
Shamash
Shamhat
Slaying of Humbaba
Snake steals plant
Standard Babylonian version
Sumerian
Sumerian literature
Sumerian poems about Gilgamesh
Sumerian versions
Tablet-based narrative
Test of staying awake
Third Dynasty of Ur
Translations in many languages
Uruk
Utnapishtim
Yes
c. 2100 BCE

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Slaying Humbaba
Sumerian
Sumerian King List
Tablets
Underworld garden
Urshanabi
Uruk
Utnapishtim
Utnapishtim's story
Widely studied
circa 1800 BCE
circa 2100 BCE
mid-19th century

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
divine hierarchy
divine kingship
dragon combat
dying god
early creation narrative
elects Marduk
execution
exist
fragmentary
fresh water
generational war among gods
geocentric universe
given to Marduk
humanity
later Near Eastern religions
legitimize Babylonian supremacy
monster army
multiple
multiple languages
multiple revisions
national epic of Babylon
net
ongoing
poetic parallelism
present
primordial chaos
prologue and seven tablets
recited annually
reinforce state religion
rise of Babylon
royal library findings
salt water
seasons
serve gods
study of ancient epics
temple ceremonies
themes present
theomachy
understanding Mesopotamian religion
universe
winds
with constellation creation
world literature courses

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1
1966-07-06
2004
203 cm
25 Hours a Day
Actor
Adventure Time
AllMusic
Alternative comedy
Alternative comedy scene
American
American River College
Anxiety
Atheist
Bearded
Bob Odenkirk
Brendon Small
Cancer research
Collecting toys
Comedian
Comedy Central
Comedy specials
Comic books
Community
David Cross
Depression
Dungeons & Dragons
Fart and Wiener Jokes
Gaming
Grammy nomination
Grandpa Metal
Guitar
Heavy metal
Heavy metal music
Human
IMDb
Instagram
International comedy tours
Just Shoot Me!
Liberal
Live In: Nerd Rage
Los Angeles, California
Melanie Truhett
Mental health awareness
Metal fan
Metalocalypse
Mr. Show with Bob and David
Musician
Nationwide comedy tours
Nerd Poker

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
1987-12-30
1999-06-19
50
50 small-cap companies
BaFin
Benchmark for small-cap German stocks
DAX
DAX 100
DAX family of indices
DE0008467412
Deutsche Börse
Deutsche Börse AG
Deutsche Börse website
EU Benchmarks Regulation
Euro
European Union
Frankfurt Stock Exchange
Free-float market capitalization
Germany
High
High with MDAX
Higher than DAX
Higher volatility
Investors
Less than DAX
MDAX
Market capitalization and trading volume
Minimum 10%
Minimum trading volume
Moderate
Performance index
Portfolio diversification
Prime Standard
Quarterly
Real-time
Reinvested
SDAXI
Since inception
Small to mid
Stock market index
TecDAX
Third tier
Total return
Various sectors
iShares SDAX UCITS ETF

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
New Testament
Numbers
Old Testament
Paul
Poetry
Prophecy
Proverbs
Psalm 117
Psalm 119
Psalms
Religious Text
Revelation
Romans
Salvation
Ten Commandments
Torah
Vulgate
Western literature
over 5 billion

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1
1.85 meters
1929-09-05
1958
1960
1963-01-12
1969
1993
2002
2006
2013
2024-07-18
3
4
6
Abe Lincoln vs. Madison Avenue
Actor
Album of the Year
American
American Comedy Awards Lifetime Achievement Award
Bachelor of Science
Bel Air, Los Angeles
Bernard
Best Comedy Performance
Best New Artist
Bob
Bob Elliott
Bob Hartley
Bob Newhart Faces Bob Newhart
Buddy's Father
Business Management
Catch-22
Catholic
Children's Hospitals
Comedian
Corporal
Deadpan
Desperate Housewives
Dick Loudon
ER
Elf
Film Actor
George David Newhart
Ginny Newhart
Golf
Hollywood Boulevard
Hollywood Walk of Fame Star
Horrible Bosses
I Shouldn't Even Be Doing This!
In & Out

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Amy Farrah Fowler

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Barry Kripke

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Barenaked Ladies

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Bernadette Rostenkowski

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Bill Gates

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Bill Nye

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Bill Prady

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Buzz Aldrin

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: CBS

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Caltech

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Chuck Lorre

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Chuck Lorre Productions

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Dungeons & Dragons

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Golden Globe Award

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Elon Musk

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Howard Wolowitz

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Howard and Bernadette

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Leonard Hofstadter

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Leonard and Penny

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

Your task is to produce **as many factual triples as possible** about the given subject entity.  
Each fact must be represented as a JSON triple: (subject, predicate, object) and include a **calibrated confidence score** in [0.0, 1.0].

---

### Guidelines

- Produce a large set of concise, factual triples.
- For *famous or well-documented* subjects, aim facts** (50–100+ preferred).
- For moderately known subjects, 30–50 facts.
- For lesser-known subjects, provide as many as possible (≥5 if any are known).
- If you do **not** know the subject, return an empty list.
- Always include at least one triple with predicate `"instanceOf"`.
- Keep each triple atomic — split multiple objects into separate triples.
- Avoid duplicates or verbose descriptions.
- Be generous but realistic; do not invent implausible details.
- The confidence should reflect your certainty:
  - **0.95–1.00** → universally established fact  
  - **0.70–0.94** → likely correct, generally reported  
  - **0.40–0.69** → plausible, but some uncertainty  
  - **<0.40** → speculative or doubtful — *omit such triples*

---

### Output format (STRICT JSON only)

Return JSON only, no markdown fences, no commentary.

{
  "facts": [
    { "subject": "...", "predicate": "...", "object": "...", "confidence": 0.0 }
  ]
}

---

Subject: Leslie Winkle

Now respond with **valid JSON only**.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1.85
1928-09-19
1960s Batman icon
1970-02-17
1994
2003
2012-04-05
2017-06-09
2017-06-10
6
Actor
American
American Cancer Society
Back to the Batcave
Bat-Signal tribute
Batman
Batman (TV series)
Batman: The Animated Series
Batman: The Movie
Bruce Wayne
Burgess Meredith
Burt Ward
Camp humor
Camp style in television
Catherine West
Catman
Caucasian
Cesar Romero
Christian
Comic-Con
Deadpan delivery
Dragon Con
Family Guy
Fantasy Island
Fishing
Frank Gorshin
Himself
Hollywood Walk of Fame Star
Holy [something], Batman!
Human
Hunter West
Iconic portrayal of Batman
Jonah West
Julie Newmar
Ketchum, Idaho
Lee Meriwether
Lego Batman 3: Beyond Gotham
Leukemia
Los Angeles, California
Marcelle Tagand Lear

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1998
BaFin
Bund futures
CME Group
DAX options
DB1:GR
Deutsche Börse AG
Eurex Group
Europe
Federal Financial Supervisory Authority
Frankfurt
Germany
MiFID II
clearing services
derivatives trading
electronic trading platform
equity index derivatives
financial exchange
futures contracts
global derivatives market
high
innovative products
interest rate derivatives
options contracts
risk management
trading fees
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2002
Annual Report
Anti-money laundering supervision
Approximately 2,500
Asset management companies
Bank resolution
Banking sector
Banks
Bonn
Bundesanstalt für Finanzdienstleistungsaufsicht
Bundesaufsichtsamt für das Kreditwesen
Bundesaufsichtsamt für das Versicherungswesen
Bundesaufsichtsamt für den Wertpapierhandel
Business restrictions
Climate risk assessment
Combating financial crime
Conduct supervision
Consolidated financial supervision
Consumer protection enhancement
Consumer protection in financial services
Cross-border supervision coordination
Cybersecurity supervision
Deutsche Bundesbank
Digital financial services regulation
Digital transformation adaptation
ESG integration supervision
EU financial supervision leader
Effective financial supervision
Emergency measures implementation
Emerging risks monitoring
Enforcing financial regulations
European Banking Authority
European Central Bank
European Insurance and Occupational Pensions Authority
European Securities and Markets Authority
European System of Financial Supervision
European financial supervision cooperation
Federal Financial Supervisory Authority
Federal Ministry of Finance (Germany)
Federal agency
FinTech supervision
Financial Stability Board
Financial conglomerates
Financial crisis management
Financial innovation accommodation
Financial markets
Financial regulatory authority
Financial services providers
Financial stability
Fines

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1978-03-03
Aarti Majmudar
Actor
American
Bones
Connecticut
Dr. Priya Koothrappali
Grey's Anatomy
Heroes
Human
Indian-American
NCIS
Priya Koothrappali
Royal Pains
The 5th Quarter
The Arrangement
The Big Bang Theory
The Exes
The Flight Attendant
The Good Doctor
The Good Wife
The Last Airbender
The Mentalist
The Mindy Project
The Office
The Protector
The Resident
The Rookie
The Sorcerer's Apprentice
United States
Voice Actor

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2007
45 seconds
Amazon Music
Barenaked Ladies
Desperation Records
Ed Robertson
English
Spotify
Steven Page
The Big Bang Theory
The History of Everything
apollo
aqueduct
atoms
bang
beat
beginning
berlin wall
big bang
brain
branes
cell phone
chance
dark matter
destiny
dinosaurs
earth
egypt
einstein
eleven dimensions
end
everything
fate
fire
flintstones
galileo
glory
gravity
ham radio
harmony
heart
iTunes
idea
intelligence
internet
life
luck
m-theory
mastodon
mechanics

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1988
40
DAX
DAX futures
Deutsche Börse
First published 1988
Frankfurt Stock Exchange
German
German stock index
Germany
Reuters bulletins
STOXX Ltd
basis points
benchmark for German stock market
financial index
free float methodology
high 40 largest listed companies
impact on Eurozone economy
market capitalization weighted
performance index
real time
stock market index
tracking major German companies
www.dax-indices.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1955-08-04
A Family Thing
A Simple Plan
Academy Award for Best Adapted Screenplay
Academy Award nomination for Best Actor
Actor
Adam Goldberg
All the Pretty Horses
Allison Tolman
American
Ana de la Reguera
Angelina Jolie
Armageddon
Bad News Bears
Bad Santa
Bandits
Bill Paxton
Billy Burke
Bruce Dern
Colin Hanks
Connie Angland
Cynda Williams
Daddy and Them
David Morse
Dennis Quaid
Drums
Dwight Yoakam
Eagle Eye
Earl Scruggs
Fargo
Faster
Film Director
Frances McDormand
Friday Night Lights
Garrett Hedlund
Goliath
Graham Greene
Guitar
Harold Perrineau
Henry Thomas
Hot Springs, Arkansas
Human
Intolerable Cruelty
J.D. Souther
J.K. Simmons
Jackson Browne
Jayne Mansfield's Car
Jena Malone
Jimmy Webb
John Carroll Lynch

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Yes
Ziggurat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1776
1949-02-02
1991
2001-06-11
2021
Actor
All-Star Superman
American
American Dad!
Avengers Assemble
B-4
Batman Beyond
Batman: The Animated Series
Ben 10: Omniverse
Cheers
Codename: Kids Next Door
Danny Phantom
Data
Dr. Okun
Drama
Dude, Where's My Car?
Emmy Award
Family Guy
Fresh Hell
Friends
Gargoyles
Gates McFadden
Guardians of the Galaxy
Houston, Texas
Hulk and the Agents of S.M.A.S.H.
Human
Independence Day
Independence Day: Resurgence
Jackson Spiner
John de Lancie
Jonathan Frakes
Justice League Unlimited
Kim Possible
Law & Order: Criminal Intent
LeVar Burton
Lilo & Stitch: The Series
Lore
Loree McBride
Mad About You
Marina Sirtis
Michael Dorn
Mighty Morphin Power Rangers
Night Court
Noonien Soong
Ol' Yellow Eyes Is Back

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1979
2019
30s
Academic-focused
Agnostic
American
Arts
Bazinga
Bernadette Rostenkowski
Bill Prady
Blunt
Brown
Caltech
Chuck Lorre
Classical
Co-developed Super Asymmetry
Conservative
Documentaries
Dry
Engaged in Season 10
Fictional Character
First meeting with Sheldon
Formal
Glasses
Glendale, California
Harvard University
Howard Wolowitz
Indian Food
Intelligent
Jewish
Knitting
Leonard Hofstadter
Liberal
Literal-Minded
Loyal
Married
Married in Season 11
Married to Sheldon Cooper
May 24, 2010
Mayim Bialik
Minimal
Modest Clothing
Mr. Fowler
Mrs. Fowler
Neurobiologist
Neurobiology
Nobel Prize acceptance speech
Nobel Prize in Physics
None
None mentioned

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1960
1960-06-07
1990-present
2
2001
@billprady
ABC
American
Bill_Prady
CBS
California
Caroline in the City
Chuck Lorre
Comedy
Comic-Con
Comic-Con panel
Critics' Choice Television Award
Dharma & Greg
Dream On
Fox
Gilmore Girls
IMDb
Los Angeles
Married... with Children
NBC
New York
New York City
New York University
People's Choice Award
Person
Primetime Emmy Award
Q&A sessions
Rebecca Rand
Screenwriter
Sitcom
Star Trek: Voyager
Television
Television Critics Association Award
Television producer
Television writer
The Big Bang Theory
The Big Bang Theory App
The Big Bang Theory Podcast
The Big Bang Theory merchandise
The Big Bang Theory: The Game
The CW
The Nanny
Twitter
United States
Warner Bros. Television

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
"The Maternal Instinct: A Neurobiological Investigation"
"The Narcissism of Minor Differences"
"The Neurobiology of Collaboration"
"The Neurobiology of Communication"
"The Neurobiology of Compassion"
"The Neurobiology of Dependability"
"The Neurobiology of Emotional Regulation"
"The Neurobiology of Giving"
"The Neurobiology of Happiness"
"The Neurobiology of Learning and Memory"
"The Neurobiology of Parent-Child Attachment"
"The Neurobiology of Peak Performance"
"The Neurobiology of Psychiatric Disorders"
"The Neurobiology of Psychopathology"
"The Neurobiology of Purpose"
"The Neurobiology of Romantic Love"
"The Neurobiology of Security"
"The Neurobiology of Social Attachment"
"The Neurobiology of Stress and Coping"
"The Neurobiology of Trauma"
"The Neurochemistry of Affection"
"The Neuropsychology of Adolescent Romance"
"The Neuroscience of Altruism"
"The Neuroscience of Cognitive Development"
"The Neuroscience of Cooperation"
"The Neuroscience of Decision Making"
"The Neuroscience of Depression"
"The Neuroscience of Emotion"
"The Neuroscience of Healing"
"The Neuroscience of Human Bonding"
"The Neuroscience of Influence"
"The Neuroscience of Life Satisfaction"
"The Neuroscience of Predictability"
"The Neuroscience of Protection"
"The Neuroscience of Psychotherapy"
"The Neuroscience of Social Behavior"
"The Neuroscience of Success"
"The Neuroscience of Trust"
"The Neuroscience of Understanding"
"The Psychodynamics of Achievement"
"The Psychodynamics of Caring"
"The Psychodynamics of Consistency"
"The Psychodynamics of Dialogue"
"The Psychodynamics of Family Relationships"
"The Psychodynamics of Fulfillment"
"The Psychodynamics of Human Motivation"
"The Psychodynamics of Leadership"
"The Psychodynamics of Partnership"
"The Psychodynamics of Recovery"
"The Psychodynamics of Safety"

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
$1.8 million per episode
$10 million
178 cm
1965-09-03
1973-present
1995-09-03
1996-11-09
2002-06-15
2006-03-30
2008-05-30
2011-03-07
2011-05-02
2015-11-17
2015-12-16
Actor
Adonis DNA
Alcohol
American
Anger Management
Ashton Kutcher
Bob Sheen
Brooke Mueller
Bud Fox
Cadence
Carlos Irwin Estévez
Cassandra Sheen
Charges filed
Charlie Harper
Chris Taylor
Cocaine
Denise Richards
Donna Peele
Eight Men Out
Emilio Estévez
Ferris Bueller's Day Off
Filed
Film Producer
Golden Globe Award
Good Advice
Hispanic
Hot Shots!
Human
Irish
Janet Templeton
Lola Sheen
Lucas
Major League
Martin Sheen
Max Sheen
Money Talks

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
124 acres
1891
39
3:1
Academic buildings
Administrative offices
Allen Telescope Array with SETI Institute
Alumni
Amos G. Throop
Approximately 1,300
Approximately 2,200
Approximately 300 professorial faculty
Approximately 4%
Approximately 900
Association of American Universities
Athletic fields
Avery House
Bachelor of Science
Barbara McClintock
Beavers
Beckman Auditorium
Blacker House
Botanical gardens
Cahill Center for Astronomy and Astrophysics
California Institute of Technology
Caltech Archives
Caltech Beavers
Caltech Submillimeter Observatory
Carver Mead
Dabney House
David Baltimore
Ditch Day
Division of Biology and Biological Engineering
Division of Chemistry and Chemical Engineering
Division of Engineering and Applied Science
Division of Geological and Planetary Sciences
Division of Humanities and Social Sciences
Division of Physics, Mathematics and Astronomy
Doctor of Philosophy
Engineering & Science
Faculty
Fleming House
Frances Arnold
Frank Capra
Gates-Thomas Laboratory
Gordon Moore
Harvard University
Highly selective admissions
Jet Propulsion Laboratory
Jet Propulsion Laboratory with NASA

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
American
Boston accent
Caltech
Howard Wolowitz
John Ross Bowie
Leonard Hofstadter
MIT
Pasadena, California
Raj Koothrappali
Sheldon Cooper
Susan Kripke
The Big Bang Theory
ambitious
arrogant
blackjack
board games
card games
chess
comic books
competitive
condescending
confident
crosswords
experimental physics
fantasy
fantasy LARPing
fantasy MMA
fantasy anime cons
fantasy artificial intelligence cons
fantasy astronomy cons
fantasy baseball
fantasy basketball
fantasy biology cons
fantasy board games
fantasy boxing
fantasy card games
fantasy chemistry cons
fantasy comic cons
fantasy computer science cons
fantasy conventions
fantasy cosplay
fantasy cricket
fantasy cybersecurity cons
fantasy data science cons
fantasy ecology cons
fantasy engineering cons
fantasy environmental science cons
fantasy esports
fantasy football
fantasy gaming cons

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
155 cm
1956-10-21
2016-12-27
2017
Actor
Actress
Agnostic
American
Austin Powers: International Man of Mystery
Author
Beverly Hills
Beverly Hills, California
Billie Lourd
Bipolar disorder
Brown
Bryan Lourd
Cardiac arrest
Censored Scenes from King Kong
Central School of Speech and Drama
Comedian
Dan Aykroyd
Debbie Reynolds
Delusions of Grandma
Democratic
Drug addiction
Eddie Fisher
Family Guy
Fanboys
Forest Lawn Memorial Park
Gary
George Lucas
Grammy Award
Hannah and Her Sisters
Harvard University
Hollywood industry
Hook
Human
Irene
Lethal Weapon 3
Los Angeles
Los Angeles, California
Mental Health America
Mental health awareness
New York City
Outbreak
Paul Simon
Postcards from the Edge
Princess Leia Organa
Sarah Lawrence College
Saturday Night Live

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1988
Active on Facebook
Active on Instagram
Active on Twitter
All in Good Time
Alternative rock
Andy Creeggan
Barenaked Ladies Are Me
Barenaked Ladies Are Men
Bass guitar
Big Bang Theory theme song
Born on a Pirate Ship
Brian Wilson
Call and Answer
Canadian band
Collaborated with Chantal Kreviazuk
Collaborated with Sarah McLachlan
Desperation Records
Detour de Force
Disc One: All Their Greatest Hits
Drums
Ed Robertson
Everything to Everyone
Fake Nudes
Features vocal harmonies
Folk rock
Gordon
Grammy Award nomination
Grinning Streak
Guitar
Has a dedicated and loyal following
If I Had $1000000
Influenced by The Beatles
Influenced by The Kinks
Influenced by They Might Be Giants
It's All Been Done
Jim Creeggan
Juno Award for Best Pop Album
Kevin Hearn
Kevin Hearn and Thinbuckle
Keyboards
Known as BNL fans
Known for family-friendly and accessible music
Known for humorous and witty lyrics
Last Summer on Earth Tour
Late Show with David Letterman
Maroon
Maybe You Should Drive
Multiple albums certified platinum in Canada
Offers music and concert DVDs

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1930-01-20
1947-1972
1954-12-29
1963
1966-11-11
1969-07-16
1969-07-20
1971
1974
1975
1978
1988-02-14
2
2 hours 31 minutes
2012
289
30 Rock
5 hours 30 minutes
66
7 hours 52 minutes
Air Force Distinguished Service Medal
Air Medal
Aldrin
Aldrin cycler
American
Andrew Aldrin
Apollo 11
Apollo 8
Astronaut
Beautiful view
Beverly Van Zile
Big Bang Theory
Buzz
Buzz Aldrin Enterprises
Colonel
Distinguished Flying Cross
Doctor of Science in Astronautics
Dr. Rendezvous
Edwin Eugene Aldrin Jr.
Edwin Eugene Aldrin Sr.
Encounter with Tiber
Engineer
Expertise in orbital rendezvous
F-86 Sabre
Fighter Pilot
Gemini 12
Glen Ridge, New Jersey
Gustavus Adolphus College
Human
In the Shadow of the Moon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
20s-30s during series
American
Amy Farrah Fowler
Bernie
Blonde hair
Catholic
Cheesecake
Cheesecake Factory
Competitive
Debbie Wolowitz
Dinner parties
English
Fictional Character
From sweet to more assertive
Game nights
Halley Wolowitz
High-pitched
Higher than Howard Wolowitz
House with Howard Wolowitz
Howard Wolowitz
Leonard Hofstadter
Main friend group
Married
Melissa Rauch
Microbiologist
Mike Rostenkowski
Mrs. Rostenkowski
Neil Michael Wolowitz
Oh, honey
Older sister
Pasadena, California
Penny Hofstadter
PhD in Microbiology
Pharmaceutical company
Pharmaceuticals
Polish-American
Raj Koothrappali
Sarcastic
Scientist
Season 3
Season 5
Seriously?
Sheldon Cooper
Short stature
Singing
Stuart Bloom
Sweet-natured
The Big Bang Theory
United States
Waitress

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1080i HDTV
1927
1931
1950s
1951
2019
48 Hours
60 Minutes
ABC
Academy Awards
All in the Family
America's Most Watched Network
Asia
Blue Bloods
CBS
CBS All Access
CBS Evening News
CBS Media Ventures
CBS News
CBS Sports
CBS Studios
CBS Sunday Morning
CBS This Morning
CBSA
CNN
CSI: Crime Scene Investigation
Canada
Chicago
Columbia Broadcasting System
Columbia Phonograph Company
Criminal Minds
David Letterman
Edward R. Murrow
Emmy Awards
English
Europe
Face the Nation
Fox
Fox News
George Cheeks
Golden Globe Awards
I Love Lucy
Latin America
Leslie Moonves
M*A*S*H
MSNBC
NBC
NCAA basketball
NCIS
NFL

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
178 cm
1955-10-28
1994-01-01
2021-08-02
60 Minutes
Agnostic
Agricultural development
American
Antitrust lawsuit
Art collection
Assembly
Author
BASIC
BBC
Berkshire Hathaway
Bill
Bill & Melinda Gates Foundation
Blue
Bower Award for Business Leadership
Breakthrough Energy
Bridge
Brown
Business @ the Speed of Thought
Businessperson
Cambridge University
Cascade Investment
Climate Change
Co-founding Microsoft
Democratic
Diet Coke
Education
Factfulness
Frequent global travel
Global Health
Global forums
Global health initiatives
Harvard College
Harvard University
High-tech home
His parents
How to Avoid a Climate Disaster
Human
Inside Bill's Brain
Instagram
Internet Explorer
Investor
Jennifer Gates
Kristianne Gates
Lakeside School
Lasker-Bloomberg Public Service Award

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
100 Greatest Discoveries
1955-11-27
1970s
1993-1998
2014-02-04
American
Bachelor of Science in Mechanical Engineering
Ballet pointe shoe
Bill
Bill Nye Saves the World
Bill Nye the Science Guy
Bill Nye: Science Guy
Boeing
CEO of The Planetary Society
Carl Sagan
Comedy Central
Consider the following
Cornell University
Dancing with the Stars
Disney
Disney Channel
Emmy Award
Everything All at Once
Facebook
Fox
Inside Amy Schumer
Instagram
Ken Ham
National Science Board Public Service Award
Neil deGrasse Tyson
Netflix
Nye
P.T. Flea in A Bug's Life
PBS
Peabody Award
Science Rules! with Bill Nye
Science rules!
The Big Bang Theory
The Eyes of Nye
The Planetary Society
The Story of Science
Twitter
US Patent 4898022
US Patent 4926508
US Patent 5038658
US Patent 5056202
US Patent 5088164
US Patent 5123197
US Patent 5142936
US Patent 5154023

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Historical region
Indus Valley
Invention of writing
Iran
Iraq
Irrigation systems
Ishtar
Kuwait
Land between rivers
Lapis lazuli
Law codes
Library of Ashurbanipal
Lunar calendar
Marduk
Mathematics
Middle East
Monarchy
Mud-brick
Neolithic Revolution
Neolithic to Iron Age
Nineveh
Oman
Persians
Plow
Polytheistic
Pottery
Relief sculptures
Royal Game of Ur
Sailboat
Sargon of Akkad
Seleucid Empire
Sheep
Sickle
Slave trade
Standard of Ur
Sumer
Sumerian
Syria
Temple economy
Tigris River
Turkey
Ur
Uruk
Wheel
Yale Babylonian Collection
Ziggurat
Ziggurat of Ur

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2002
AntiMoney Laundering Efforts
Asset Management Companies
Banks
Bonn
Conducting OnSite Inspections
Consumer Protection
Deutsche Bundesbank
European System of Financial Supervision
Federal Financial Supervisory Authority
Federal Institute
Federal Ministry of Finance
Federal Republic of Germany
Financial Stability
Fintech Companies
Frankfurt
German Banking Act
German Insurance Supervision Act
German Securities Trading Act
Germany
Imposing Sanctions
Industry Levies
Insurance Companies
Investment Firms
Investment Risk
Issuing Licenses
Mark Branson
Over 2,500
Payment Services
Securities Trading
Wirecard
www.bafin.de

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Börsen-Zeitung newspaper
Euro
German equity market performance
German financial regulation
German stock index
German stock market
Germany
actively maintained
available through financial data providers
benchmark for German market performance
comparable with other German indices
composite index
diversified basket of stocks
equities
financial index
financial professionals
investment reference
investors
market index
market performance indicator
market volatility
multiple industries
performance of German companies
public data reporting
publicly available
published by Börsen-Zeitung
regular
stock market index
variable market risk

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
111481
1865
37.4 billion euros
6.6 billion euros
7.7 billion euros
78.6 billion euros
78.8 billion euros
Africa
Agricultural Solutions
Antwerp, Belgium
Asia Pacific
BAS
BASF Afghanistan
BASF Argentina
BASF Australia
BASF Bahrain
BASF Bangladesh
BASF Bhutan
BASF Brazil
BASF Brunei
BASF Cambodia
BASF Canada
BASF Chile
BASF China
BASF Colombia
BASF Corporation
BASF East Timor
BASF Egypt
BASF Fiji
BASF French Polynesia
BASF India
BASF Indonesia
BASF Iraq
BASF Japan
BASF Jordan
BASF Kuwait
BASF Laos
BASF Lebanon
BASF Malaysia
BASF Maldives
BASF Mexico
BASF Morocco
BASF Myanmar
BASF Nepal
BASF New Caledonia
BASF Nigeria
BASF Oman
BASF Pakistan
BASF Papua New Guinea
BASF Peru

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1.3 trillion EUR
1870
25 billion EUR
28.6 billion EUR
4.2 billion EUR
5.7 billion EUR
90000
Aktiengesellschaft
Alexander Wynaendts
Asset Management
Audi
BASF
BMW
Bankers Trust
Bayer
Berlin
Berliner Bank
Blue Bird Corporation
Christian Sewing
Collins Industries
Corbeil Bus Corporation
Corporate Bank
DAF
DB
DBK
DE0005140008
DWS Group
Daihatsu
Daimler-Benz
Deutsche Bank AG Hong Kong
Deutsche Bank AG London
Deutsche Bank AG Singapore
Deutsche Bank AG Tokyo
Deutsche Bank Securities Inc.
Deutsche Bank Trust Company Americas
Ford
Frankfurt
Frankfurt Stock Exchange
Freightliner
General Motors
Germany
Girardin Minibus
Hino
Hoechst
Honda
Hyundai
IC Bus
Investment Bank
Isuzu
Iveco

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1949
1954 FIFA World Cup
21.915 billion euros
61728
ADS
Accessories
Adidas Copa Mundial
Adidas Gazelle
Adidas Innovation Team facilities
Adidas Originals
Adidas Originals stores
Adidas Performance
Adidas Performance stores
Adidas Predator
Adidas Samba
Adidas Stan Smith
Adidas Superstar
Adidas Ultraboost
Adolf Dassler
Aktiengesellschaft
Apparel
Arsenal FC
Asia-Pacific
Athletic shoes
Basketball
Beyoncé
Bjørn Gulden
Black
Boost cushioning technology
Brother of Puma founder
Calendar year
China
Combination of Adolf Dassler's nickname
Damian Lillard
David Beckham
Europe
FC Bayern Munich
FIFA World Cup
Fair Labor Association member
First screw-in studs for football boots
Football
Footwear
Form follows function
Frankfurt Stock Exchange
Gebrüder Dassler Schuhfabrik
German engineering tradition
Global manufacturing network
Herzogenaurach, Germany
Impossible is Nothing
Indonesia

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
09:00-17:30 CET
10%
1000
1987-12-30
1988-07-01
20% of free float capital
2008 financial crisis
2009-2015
2020 COVID-19 pandemic
30
Adidas AG
Airbus SE
Allianz SE
Approximately 8% long-term
Approximately 80% of German stock market
BASF SE
BMW AG
Bayer AG
Below 1000 points
Consumer discretionary
DAX
DAX Steering Committee
DAX futures
DAX indices
DAX options
DE0008469008
Daimler Truck Holding AG
Deutsche Bank AG
Deutsche Börse
Deutsche Börse AG
Deutsche Post AG
Deutsche Telekom AG
Deutscher Aktienindex
E.ON SE
Eurex
Euro
Every second
FTSE Developed Europe
Financial services
Frankfurt Stock Exchange
Free float
Free-float market capitalization
Fresenius SE & Co. KGaA
German Stock Index
German economic data
German equity funds
Germany
HDAX
High with European indices
Industrials

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+49
.de
16
1871-01-18
1990-10-03
357588
4.5 trillion USD
54000 USD
83200000
Adidas
Albert Einstein
Allianz
Angela Merkel
Audi
Austria
BASF
BMW
Belgium
Berlin
Berlin Wall
Boris Becker
Bosch
Brandenburg Gate
Bundesadler
CET
Checkpoint Charlie
Christmas
Cologne
Cologne Cathedral
Czech Republic
Das Lied der Deutschen
Denmark
Dresden Frauenkirche
Easter
Einigkeit und Recht und Freiheit
Euro
Europe
European Union
Federal Chancellor
Federal President
France
Frankfurt
Franz Beckenbauer
G20
G7
German
Günter Grass
Hamburg
Haribo
Heidelberg Castle

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
134000
1970
1972
1974
2017
3D printing applications
64 billion euros
A300
A330 MRTT
A400M Atlas
AIR
AS9100
Aerospace Valley test centers
Air France
Airbus A220
Airbus A320
Airbus A330
Airbus A350
Airbus A380
Airbus Atlantic
Airbus Central Research & Technology
Airbus Commercial Aircraft
Airbus Defence and Space
Airbus Digital Design and Manufacturing
Airbus Flight Academy
Airbus Foundation
Airbus Helicopters
Airbus Operations SAS
Airbus Training Center
Airbus UpNext
Airbus Ventures
Ariane 5
Ariane 6
Beluga transport aircraft
BelugaXL transport aircraft
Boeing
Bombardier
Broughton, United Kingdom
Delta Air Lines
EASA certifications
Embraer
Emirates
Eurofighter Typhoon
Euronext Paris
European Aeronautic Defence and Space Company
FAA certifications
France
Frankfurt Stock Exchange
Galileo satellites
General Electric

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1.1 trillion EUR
15 billion USD
150000
152.7 billion EUR
1890
2006
38
70 countries
85 million customers
90 billion EUR
AA-
AGF
ALV
AXA
Allianz AG
Allianz Arena
Allianz Climate Solutions
Allianz Digital Labs
Allianz Environmental Foundation
Allianz Foundation
Allianz Global Corporate & Specialty
Allianz Global Investors
Allianz Life
Allianz Management Institute
Allianz Partners
Allianz University
Allianz Versicherungs-AG
Allianz X
Allianz. The Power On Your Side.
Asia Pacific
BMW
BaFin
Berlin, Germany
Carl von Thieme
Christof Mascher
Cornhill Insurance
DE0008404005
December 31
Dresdner Bank
English
Euro
European Central Bank
Fireman's Fund Insurance Company
Fitch Ratings
Formula E
Fortune Global 500 company
France
Frankfurt Stock Exchange
Freshfields Bruckhaus Deringer
Generali

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Mesopotamia
Middle East
Mount Ararat
Najaf
Overuse
Persian Gulf
Pollution
Quran
Ramadi
Raqqa
River
Shatt al-Arab
Sumer
Syria
Tabqa Dam
Tigris River
Turkey

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1
10
100
1992
1999
2
2%
20
200
2002
2009
5
50
500
AfterAmount
Ages and Styles of Europe
Andorra
Austria
Austrian Schilling
Belgian Franc
Belgium
Bosnia and Herzegovina Convertible Mark
Bulgarian Lev
CFA Franc
Cape Verdean Escudo
Cent
Christine Lagarde
Comma
Common Reverse
Copper-Nickel
Cotton Fiber
Croatia
Currency
Cyprus
Deutsche Mark
Dutch Guilder
EUR
Economic and Monetary Union
Estonia
Europa Series
European Central Bank
European Debt Crisis
European Integration
Eurosystem
Eurozone
Finland
Finnish Markka
First Series
Floating
France

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+49
.de
1949-05-23
2021-12-08
ARD
Alliance 90/The Greens
Angela Merkel
Baden-Württemberg
Bavaria
Bellevue Palace
Berlin
Black-red-gold tricolor
Brandenburg
Bremen
Bundesanzeiger
Bundesrat
Bundestag
Bundeswehr
CEST
CET
DE
Das Lied der Deutschen
Deutsche Bundesbank
Deutsche Presse-Agentur
Deutsche Welle
Euro
European Union
Federal Archives
Federal Cabinet
Federal Chancellery
Federal Constitutional Court
Federal Criminal Police Office
Federal Eagle
Federal Foreign Office
Federal Intelligence Service
Federal Ministry for Digital and Transport
Federal Ministry of Defence
Federal Ministry of Education and Research
Federal Ministry of Finance
Federal Ministry of Health
Federal Ministry of Justice
Federal Ministry of the Interior
Federal Police
Federal Statistical Office
Frank-Walter Steinmeier
Free Democratic Party
G20
G7
Gerhard Schröder
German

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1993
360 Treasury Systems
360T
9:00-17:30 CET
Aktiengesellschaft
Asia
BaFin
Börse Frankfurt
CDAX
Clearstream
Clearstream Banking
Commerzbank's custody business
DAX
DAX 50 ESG
DAX index
DAX indices
DB1
Deutsche Börse Market Data + Services
Deutsche Terminbörse
ESG
ETFs
Eurex
Eurex Clearing
Euro
Euronext
Europe
European Energy Exchange
European Securities and Markets Authority
Federation of European Securities Exchanges
Frankfurt
Frankfurt Stock Exchange
Frankfurter Wertpapierbörse
General Standard
German
Germany
Google Cloud
IT & Infrastructure
International Securities Exchange
London Stock Exchange
London Stock Exchange Group
MDAX
Market Data & Services
Microsoft
NASDAQ
North America
Prime Standard
Qatar Exchange
SIX Group
STOXX indices
Scale

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Internal strife
Irrigation canals
Irrigation-based farming
Ishtar
Ishtar Gate
Jerusalem
Jews
Legal contracts
Lunar calendar
Lunisolar
Marduk
Mathematics
Medes
Mesopotamia
Metals
Metalworking
Monarchy
Mudbrick
Nabonidus
Nebuchadnezzar II
Neo-Babylonian
Neo-Babylonian Empire
Nippur
Nisan
Northern Babylonia
Old Babylonian
On Hebrew culture
Patriarchal system
Persian Empire
Planetary observations
Pottery
Professional army
River boats
Shamash
Siege warfare
Sin
Sin-Muballit
Sippar
Southern Babylonia
Sumerian
Sumerian city-states
Sumerian culture
Sumu-abum
Temple of Marduk
Temple rituals
Textiles
Tigris
Trade-oriented
Ur
Uruk

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1996
60 largest designated companies after DAX
Deutsche Boerse
German stock market
Germany
Track
Xetra
also measure balance sheet calculation past
market capitalization calculation
second tier equity market segment
stock index

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1998
APIs
Agricultural Derivatives
Alerts
Algorithmic Trading
Analytics
Auction Services
Audit Trails
B3
BaFin
Benchmark Administration
Block Trading
Bobl Futures
Bond Trading
Bund Futures
Business Continuity
Business Resilience
Buxl Futures
Certification Programs
Clearing Services
Co-Location Services
Collateral Management
Collateral Optimization
Commodity Derivatives
Compliance Checks
Compliance Tools
Connectivity Solutions
Consulting Services
Crisis Management
Cross-Margining
Customization Options
Cybersecurity Services
DAX Futures
Dashboard
Data Feeds
Derivatives Exchange
Desktop Applications
Deutsche Börse
Disaster Recovery
Dividend Derivatives
Dividend Futures
Documentation Services
ESMA
ETF Options
Emissions Derivatives
Equity Index Derivatives
Eurex Bonds
Eurex Clearing
Eurex Repo
Eurex T7

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Nerd comedy
Nerd culture
Nerd persona
Netflix
New Girl
New Wave Dynamics
Posehn
Relapse Records
Robots
Sacramento City College
Sacramento, California
Sarah Silverman
Scott Aukerman
Screenwriter
Self-deprecating humor
Stand-up comedian
Steven Universe
Surf's Up
Tall
Teen Titans Go!
The Benson Interruption
The Big Bang Theory
The Comedians of Comedy
The Devil's Rejects
The Dwarves
The Fartist
The Five-Year Engagement
The Iron Giant
The Sarah Silverman Program
The Simpsons
Twitter
Uncle Nick
Voice actor
Wikipedia
Writer
brianposehn.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 430.2s → outputs in runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231623/batches
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
2003
2003-03-24
30
ASK Industries
Aixtron
Carl Zeiss Meditec
DAX
DAX family of indices
DE
DE0007203275
Deutsche Börse
Deutsche Börse AG databases
FTSE World Technology Index
Frankfurt Stock Exchange
Frankfurter Allgemeine Zeitung
Fuchs Petrolub
German Technology Index
German tech stocks
Germany
Infineon Technologies
Information Technology
Laspeyres formula
MDAX
Nemax 50
No
SAP
SDAX
TDXP
US NASDAQ
biotechnology
for Tech All-Share Index
global technology indices
high-risk
included
investors
leading German tech index
liquidity
market capitalization
mid-cap
quarterly
real-time
semiconductors
software
stock market index
technology
telecommunications
via ETFs

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[bench] OK: runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251029_231623
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_231623
[crawler] seeded: ancient city of Babylon
[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: ancient city of Babylon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
100% renewable energy in production
142.6 billion EUR
149475
1916
2.5 million vehicles annually
200000 motorcycles annually
24 Hours of Le Mans
50 billion EUR
50% electric vehicle sales by 2030
Alpina
Audi
BMW
BMW 3 Series
BMW 3/15
BMW 5 Series
BMW 7 Series
BMW Digital Key
BMW Financial Services
BMW Intelligent Personal Assistant
BMW K 1600
BMW M
BMW R 1250 GS
BMW R32
BMW S 1000 RR
BMW X3
BMW X5
BMW i
BMW i3
BMW i4
BMW i7
BMW i8
BMW iX
BMW.DE
BMWYY
Bayerische Motoren Werke
ConnectedDrive
DTM
Daimler AG
Dingolfing, Germany
Ford
Formula E
General Motors
Goodwood, UK
Gustav Otto
Honda
Hyundai
Intel
Karl Rapp
MINI
MINI Cooper

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
107000
1972
ABAP
Accenture
Africa
Amazon Web Services
Ariba
Ariba for $4.3 billion
Asia Pacific
Capgemini
Christian Klein
Claus Wellenreuther
Concur Technologies
Concur for $8.3 billion
DAX
DE0007164600
December 31
Deloitte
Dietmar Hopp
Dow Jones Sustainability Index
Euro Stoxx 50
Europe
Europe's largest software company
European Company (Societas Europaea)
FTSE4Good Index
FWB: SAP
Fieldglass
German company
Google
Hans-Werner Hector
Hasso Plattner
IBM
Internet of Things
Java
JavaScript
KPMG
Klaus Tschira
Latin America
Microsoft
Middle East
NYSE: SAP
North America
Oracle Corporation
Python
Qualtrics
Qualtrics for $8 billion
SAP Analytics Cloud
SAP AppHaus
SAP Ariba
SAP Business One

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Briefly
Briefly Dated
Caltech
Coffee Shop Hangouts
Experimental Physicist
Fictional Character
Group of Leonard and Sheldon
High
Leonard Hofstadter
Multiple Episodes
Pasadena, California
Physics
Sara Rue
Sarcastic
Scientific Theories
Scientists
Season 1
Sheldon Cooper
Strong-Willed
The Big Bang Theory

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
09:00-17:30 CET
1585
1945
1997
Allianz
BASF
BaFin
Bloomberg
Bonds
Bull and Bear statues
Börse Frankfurt
Börsenplatz 4, 60313 Frankfurt am Main
CET
Certificates
Clearstream
Currency exchange for trade fairs
DAX
Deutsche Börse
Deutsche Börse AG
Deutsche Börse Group
ETFs
EU regulations
Eurex Clearing
Euro
Euronext
Frankfurt
Frankfurt Floor Trading
Frankfurter Wertpapierbörse
General Standard
Germany
High
Iceberg orders
Limit orders
Limited
London Stock Exchange
MDAX
Market orders
MiFID II
Monday to Friday
NYSE
One of the largest
Over 2 trillion euros
Over 200
Over 400
Prime Standard
Public holidays
Reuters
SAP
SDAX
Scale

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Influential Stand-up Comedian
Jack Benny
Julia Pauline Burns
Korean War
Los Angeles, California
Loyola University Chicago
Mark Twain Prize for American Humor
Mary Joan Newhart
Multiple Charitable Causes
Murphy Brown
Natural Causes
Newhart
Oak Park, Illinois
One-sided Conversations
Outstanding Writing for a Variety Program
Paul Newhart
Person
Pioneer of Television Comedy
Professor Proton
Ray Goulding
Reading
Republican
Saint Ignatius College Prep
Sir Walter Raleigh
Stammering Delivery
Stand-up Comedian
Telephone Routines
Television Actor
Television Hall of Fame
The Big Bang Theory
The Bob Newhart Show
The Button-Down Mind Strikes Back!
The Button-Down Mind of Bob Newhart
The Driving Instructor
The Front Page
The Librarian
The Rescuers
The Rescuers Down Under
The Simpsons
The Submarine Commander
The Tonight Show
The Windmills Are Weakening
This Is It!
United States Army
Veterans Organizations
Virginia Quinn
Voice Actor

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
09:00 CET
1000
17:30 CET
1987
1988
30
Börsen-Zeitung-Index
DAX
DAX Steering Committee
December 30, 1987
Deutsche Börse
Deutsche Börse Office in Frankfurt
EUR
Euro
European Securities and Markets Authority
European economic indicator
Frankfurt Stock Exchange
German blue-chip stocks
Germany
MDAX
Prime Standard segment
SDAX
TecDAX
Xetra trading platform
^GDAXI
about 15 percent
among top European indices
annually
economic health of Germany
every 1-2 seconds during trading
free-float market capitalization
futures
high
investment benchmarking
minimum monthly requirements
options
performance index
quarterly
real-time
representative in their industries
stock market index
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1999
B Positive
Bob Hearts Abishola
Broadcast television
CBS
California
Chuck Lorre
Creating successful television comedies
Cybill
Dharma & Greg
Disjointed
Emmy Awards
Grace Under Fire
Los Angeles
Mike & Molly
Mom
Netflix
Private
Roseanne
Since 1999
Sitcom
Television production
Television production company
The Big Bang Theory
The Kominsky Method
Two and a Half Men
United States
Warner Bros. Studios
Warner Bros. Television
Young Sheldon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Mayor Adam West
Mayor of Quahog
Megan West
Murphy Brown
Nell West
NewsRadio
Perrin West
Pop culture symbol
Quick, to the Batmobile!
Robinson Crusoe on Mars
St. Jude Children's Research Hospital
TV Land Award
Television
The Big Bang Theory
The Detectives
The Fairly OddParents
The Girl Who Knew Too Much
The Last Precinct
The Love Boat
The Simpsons
The Simpsons Game
The Young Philadelphia
Thomas Wayne
Twitter
United States Army
United States Army Signal Corps
University of Puget Sound
Voice Actor
Walla Walla, Washington
Whitman College
William West Anderson
Yvonne Craig

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Accountability
Asia
Black Market
Bond Market
Central Bank
Certified Traders
Clearinghouses
Commodity Market
Derivatives Market
Disclosure Requirements
ESMA (European Securities and Markets Authority)
Electronically Traded
Ensure Fair Trading
Ethical Conduct Standards
Europe
Exchanges
FCA (Financial Conduct Authority)
FINRA (Financial Industry Regulatory Authority)
Financial Market
Financial Reporting Standards
Formal Market
Germany
Global Financial System
Government Legislation
HKMA (Hong Kong Monetary Authority)
India
Insider Trading
Institutional Investors
Japan
Laws
Listed Securities
MAS (Monetary Authority of Singapore)
Market Manipulation
North America
OTC Market
Oversight by Regulatory Authorities
Prevent Fraud
Price Surveillance
Protect Investors
Regulations
Retail Investors
SEC (U.S. Securities and Exchange Commission)
Stock Market
Trading Rules
Transparency
United Kingdom
United States

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2007-2019
2009
American
Bill Prady
Caltech
Chuck Lorre
English
Johnny Galecki
Kaley Cuoco
The Big Bang Theory
actress
apartment building
blonde
character
couple
experimental physicist
fictional characters
iconic sitcom couple
main characters
married
multiple
multiple seasons
neighbor
pharmaceutical sales representative
romantic partners
waitress
will-they-won't-they relationship

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
medicine
melody
microwave
mind
moon landing
mummies
neanderthals
nerve
newton
note
nothing
ocean
part
particle
pharaohs
planets
pop rock
probability
pyramids
quantum
rhythm
russian
sanitation
song
sound
space
stars
stock market
story
string theory
supercollider
supercontinent
synapse
telescope
television theme song
theory of relativity
thought
time
uncertainty
universe
vibration
wave
wheel
whole
wonder
word
worlds

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2009
Bernadette
Bill Prady
Cement-o-saurus
Cheesecake Factory
Chuck Lorre
Debbie Wolowitz
Fictional character
First
Girls night
Howard Wolowitz
Lab Researcher
Melissa Rauch
Microbiologist
Microbiology
PhD
Rostenkowski
Season 3
Short
Squeaky
Strip Show
Sweet
The Big Bang Theory
University
Walter Kubichek
Wolcott was Hot!
Wolowitz
Zangen

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Saturn Award
Scream 3
Screenwriter
Shampoo
Shockaholic
Sister Act
Star Wars franchise
Star Wars prequels
Substance abuse recovery
Surrender the Pink
The 'Burbs
The Blues Brothers
The Jed Foundation
The Princess Diarist
The Simpsons
The Thalians
The Wedding Singer
These Old Broads
Todd Fisher
Twitter
When Harry Met Sally...
Wishful Drinking
Writer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Libby Gates
Library
LinkedIn
MS-DOS
Malaria eradication
Mary Maxwell Gates
Medina
Melinda French Gates
Microsoft
Microsoft Office
Microsoft Windows
One of the wealthiest people
Over 100 billion USD
Over 50 billion USD
Padma Bhushan
Paul Allen
Philanthropist
Philanthropy
Philanthropy sector
Phoebe Gates
Pirates of Silicon Valley
Polio eradication
Porsche 959
Poverty Alleviation
Presidential Medal of Freedom
Private jet
Reading
Rory Gates
Sapiens
Seattle
Software Developer
Swimming pool
TED Talks
Technology industry
Tennis
TerraPower
Tesla Model X
The Beatles
The Better Angels of Our Nature
The Daily Show
The Great Gatsby
The Road Ahead
The Triumph of the Nerds
Theater
Trey
Tsinghua University
Twitter
United States
United States v. Microsoft
University commencements

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
John Ritter
Kate Walsh
Kris Kristofferson
Levon Helm
Love Actually
Lucas Black
Maria Bello
Martin Freeman
Marty Stuart
Matt Damon
Melissa Lee Gatlin
Molly Parker
Monster's Ball
Mr. Woodcock
Musician
Nina Arianda
Oliver Platt
Olivia Thirlby
One False Move
Penélope Cruz
Pietra Dawn Cherniak
Primary Colors
Pushing Tin
Ricky Skaggs
Robert Duvall
Sam Elliott
School for Scoundrels
Screenwriter
Sling Blade
Tania Raymonde
The Alamo
The Astronaut Farmer
The Big Bang Theory
The Boxmasters
The Ice Harvest
The Man Who Wasn't There
Tommy Lee Jones
Toni Lawrence
Tony Joe White
Vince Gill
Warren Zevon
William Hurt
Willie Nelson

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
14.8 billion EUR
153.2 billion EUR
172000
1886
1909
1926
2.0 million vehicles annually
2.4 million vehicles annually
20.5 billion EUR
2022
287.6 billion EUR
75 billion EUR
78.9 billion EUR
8
9
Aktiengesellschaft
Asia
Automotive
Automotive company
Automotive financing
Bangalore, India
Beijing, China
Benz & Cie. and Daimler-Motoren-Gesellschaft
Benz Patent-Motorwagen
Bernd Pischetsrieder
BlackRock
Brazil
Buses
China
Commercial vehicles
DE0007100000
Daimler AG
Daimler Truck AG
Daimler-Benz
Das Beste oder nichts
Dominance over land, sea, and air
EQ
Europe
Facebook
Financial services
Frankfurt Stock Exchange
Freightliner
Geely
Germany
Gottlieb Daimler
Hungary
India
Instagram
Institutional investors
Insurance services

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Multiple
Multiple times
Navy SEALs
New York City
No Man's Land
None
Over 10 million
People's Choice Award
Platoon
Positive
Postmortem
Ramón Estévez
Red Dawn
Renée Estévez
Republican
Rick Vaughn
Roman Catholic
Sami Sheen
Santa Monica High School
Scary Movie 3
Scary Movie 4
Scary Movie 5
Shadow Conspiracy
Spin City
TV Land Award
Terminal Velocity
The Arrival
The Big Bang Theory
The Chase
The Execution of Private Slovik
The Three Musketeers
The Wraith
Tiger blood
Topper Harley
Twitter
Two and a Half Men
United States
Wall Street
Winning
Young Guns

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Kavli Nanoscience Institute
Keck Observatory
Kip Thorne
LIGO
LIGO with MIT
Lee Hood
Linde + Robinson Laboratory
Linus Pauling
Lloyd House
MIT
Master of Science
Millikan Library
Murray Gell-Mann
NASA
NCAA Division III
Orange and white
Over $3 billion
Over $300 million annually
Owens Valley Radio Observatory
Page House
Palomar Observatory
Pasadena, California
Pranks
Private research university
Ramo Auditorium
Research laboratories
Researchers
Resnick Sustainability Institute
Richard Feynman
Ricketts House
Robert Millikan
Ruddock House
Schlinger Laboratory
Sherman Fairchild Library
Spalding Laboratory
Stanford University
Steele Laboratory
Student housing
The California Tech
The truth shall make you free
Theodore von Kármán
Thomas F. Rosenbaum
Thomas Laboratory
Top 10 universities worldwide
University
Urban
William Shockley
Winnett Student Center

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
09:00-17:30 CET
1000
1988-07-01
40
Adidas
Airbus
Allianz
Automotive
BASF
BMW
BaFin
Bayer
Beiersdorf
Börsen-Zeitung
CDAX
Chemicals
Consumer
Continental
Covestro
DAX
DE0008469008
Daimler Truck
Delivery Hero
Deutsche Bank
Deutsche Börse
Deutsche Börse AG
Deutsche Börse Indices
Deutsche Post
Deutsche Telekom
Deutscher Aktienindex
E.ON
Eurex
Euro
FDAX
Financial Services
Frankfurt Stock Exchange
Fresenius
Fresenius Medical Care
German blue-chip stocks
German economy
Germany
Hannover Rück
Healthcare
HelloFresh
Henkel
Industrial
Infineon
Linde
MDAX
MTU Aero Engines

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Often includes improvisation and audience interaction
Often incorporates acoustic elements
One Week
Pinch Me
Pioneers of Canadian alternative rock scene
Pop rock
Raisin Records
Reprise Records
Rock Spectacle
Saturday Night Live
Sells branded clothing and accessories
Ships and Dip Cruise
Silverball
Sold millions of albums worldwide
Steven Page
Steven Page Trio
Stunt
The Brothers Creeggan
The Old Apartment
The Tonight Show
Toronto, Ontario, Canada
Tyler Stewart
Vocals
barenakedladies.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
09:00-17:30 CET
10%
1000
1996-01-19
1996-12-30
50
BaFin
Bloomberg
CAC Mid 60
DAX
DE0008467416
December
Deutsche Börse
Deutsche Börse AG
ETFs
EU Benchmarks Regulation
English
Euro
FTSE 250
FactSet
Frankfurt Stock Exchange
German
German Corporate Governance Code
German Securities Trading Act
German mid-cap companies
German mid-cap segment
Germany
IFRS
June
Laspeyres formula
MDAX
MDAXI
March
Mid-Cap DAX
Prime Standard
Refinitiv
Reuters
SDAX
September
TecDAX
Xetra trading system
automotive
broad
chemicals
deutsche-boerse.com
dividends
equity index
every 15 seconds
expanded in 2018
extensive

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Holocaust Memorial
Immanuel Kant
Johann Sebastian Bach
Johann Wolfgang von Goethe
Karl Marx
Lake Constance
Ludwig van Beethoven
Lufthansa
Luxembourg
Marlene Dietrich
Martin Luther
Max Planck
Mercedes-Benz
Michael Schumacher
Munich
Munich Oktoberfest
NATO
Netherlands
Neuschwanstein Castle
Nivea
OECD
October 3
Oktoberfest
Opel
Poland
Porsche
Puma
Reichstag Building
Rhine
Romy Schneider
SAP
Siemens
Steffi Graf
Switzerland
Thomas Mann
United Nations
Volkswagen
Werner Heisenberg
Zugspitze
automotive
beer
black forest cake
black-red-gold tricolor
chemicals
country
electronics
federal parliamentary republic
machinery
manufacturing
pretzels

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
178 cm
1955-11-27
2014-02-04
2017-08-19
American
Atheist
Bachelor of Science in Mechanical Engineering
Bill
Bill Nye Saves the World
Bill Nye the Science Guy
Blue
Boeing
CEO of The Planetary Society
Carl Sagan
Climate Change Awareness
Cornell University
Democratic
Derek Nye
Edwin Darby Nye
Emmy Award
Environmental Engineering
Evolution
Human
Jacqueline Blanche Nye
Ken Ham
Liza Mundy
Mechanical Engineer
Nye
PBS
Piano
Science Communicator
Science Rules
Science Rules! with Bill Nye
Sidwell Friends School
Space Exploration
Stargate: Atlantis
Sun Dial
Television Host
The Big Bang Theory
The Eyes of Nye
The Planetary Society
The Science Guy
Washington, D.C.

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
German
Germany
Giulio Terzariol
Interbrand Best Global Brands
Italy
KPMG
Mercedes-Benz
Michael Diekmann
Moody's
Munich
Munich Re
Munich, Germany
Oliver Bäte
Olympic Games
PIMCO
RAS
Societas Europaea
Standard & Poor's
United Kingdom
United States
Wilhelm Finck
Zurich Insurance Group
asset management
blue
blue and white eagle
business insurance
car insurance
financial services company
health insurance
home insurance
https://www.allianz.com
insurance
insurance company
investment funds
life insurance
life-health insurance
multinational corporation
net-zero emissions target
pension plans
property-casualty insurance
public company
regular dividend payments
travel insurance
true
two-tier board system

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
6/12/2017
American
Apartment 4A
Beverly Hofstadter
Bicycle
Bill Prady
Caltech
Chuck Lorre
Experimental Physicist
Fictional Character
Has Own Chair
Howard Wolowitz
Johnny Galecki
Michael Hofstadter
North Pole
Penny
Ph.D. in Physics
Pilot
Pine Nuts
Princeton University
Raj Koothrappali
Sheldon Cooper
String Theory
Superman
The Big Bang Theory

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Out to Sea
Patrick Stewart
Phenomenon
Roughnecks: Starship Troopers Chronicles
Ruby Spiner
Saturn Award
Star Trek: First Contact
Star Trek: Generations
Star Trek: Insurrection
Star Trek: Nemesis
Star Trek: Picard
Star Trek: The Animated Series
Star Trek: The Next Generation
Star Wars: The Clone Wars
Static Shock
Sunday in the Park with George
Superman/Batman: Apocalypse
Superman/Batman: Public Enemies
Superman: The Animated Series
Superman: Unbound
Teen Titans
The Aviator
The Batman
The Batman vs. Dracula
The Big Bang Theory
The Legend of Tarzan
The Loud House
The Master of Disguise
The New Batman Adventures
The Outer Limits
The Simpsons
The Three Sisters
The Zeta Project
Transformers: Prime
Ultimate Spider-Man
University of Houston
Whoopi Goldberg
Wil Wheaton
Young Justice

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
09:00 - 17:30 local time
09:00 to 17:30 CET
1993
360T in 2015
BaFin
CET
Clearstream
DAX
DAX blue-chip index
DB1
Deutsche Börse Group
Deutsche Börse Systems
ETFs
Eurex
Eurex Clearing
Eurex Frankfurt AG
Euro
Europe
European Union
Federal Financial Supervisory Authority
Financial services
Frankfurt Stock Exchange
Frankfurt am Main
German companies
Germany
MDAX
Six Swiss Exchange for derivatives
Stock exchange
TecDAX
Tradegate Exchange
World Federation of Exchanges
Xetra
bonds
clearing
commodities
corporate
custody
derivatives
false
for capital markets
large-cap
launch of Xetra in 1997
securities trading
settlement
stocks
trading fees
true
via Clearstream
via Qontigo
with London Stock Exchange in 2000

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Pasadena, California
Penny
PhD
Precise
Primates
Prius
Professional success in neurobiology
Published multiple research papers
Purple
Raj Koothrappali
Reading
Regular
Romantic relationship with Sheldon Cooper
Scientific Journals
Scientific Research
Scientific Research Funding
Season 12
Season 3
Sheldon Cooper
Shoulder-Length Brown Hair
Social Behavior
Socially Awkward
Socially isolated
Started dating in Season 4
Tea
The Big Bang Theory
The Big Bang Theory Universe
The Lunar Excitation
The Stockholm Syndrome
University Lecturer
Vegetarian
Wedding to Sheldon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Wikipedia
Wings
accountant
agent
assistant
audio recordings
autograph
billprady.com
contracts
fan mail
http://www.billprady.com
intern
lawyer
manager
multiple
nm0695235
photos
production notes
publicist
scripts
secretary
videos

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
fantasy geology cons
fantasy golf
fantasy hockey
fantasy information technology cons
fantasy machine learning cons
fantasy math cons
fantasy meteorology cons
fantasy oceanography cons
fantasy physics cons
fantasy racing
fantasy role-playing games
fantasy rugby
fantasy sci-fi cons
fantasy science cons
fantasy soccer
fantasy sports
fantasy tech cons
fantasy tennis
fantasy video games
fantasy wrestling
fictional character
gambling
intelligent
manipulative
opportunistic
physicist
playing poker
poker
puzzles
rhotacism
role-playing games
roulette
sarcastic
science fiction
slot machines
socially awkward
sports
sports betting
sudoku
trivia
video games

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Frankfurt
French Franc
Germany
Greece
Greek Drachma
High
Hologram
Ireland
Irish Pound
Italian Lira
Italy
Latvia
Lithuania
Low
Luxembourg
Luxembourg Franc
Maastricht Treaty
Malta
Mixed
Monaco
National Obverse
Netherlands
No
Period
Portugal
Portuguese Escudo
Possible
Raised Print
Robert Kalina
San Marino
Security Thread
Slovakia
Slovenia
Spain
Spanish Peseta
Vatican City
Watermark
Wim Duisenberg
Yes
€

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
National Amusements
New York City
PGA Tour
Paramount Global
Paramount+
Peabody Awards
Robert Bakish
SEC football
Shari Redstone
Showtime Networks
Star Trek
Stephen Colbert
Survivor
The Amazing Race
The Big Bang Theory
The Bold and the Beautiful
The CW
The Early Show
The Good Wife
The Late Late Show
The Late Show
The Masters
The Price Is Right
The Talk
The Twilight Zone
The Young and the Restless
UEFA Champions League
United States
Viacom
Walter Cronkite
William S. Paley
billions of USD
broadcasting
broadcasting company
cbs.com
dozens
entertainment
hundreds
leading in comedy
leading in drama
media
most-watched network
radio network
television network
thousands
top-rated in news

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
08:00 CET
10
1585
22:00 CET
3
A0DWW4
Adidas
Advanced economy market
Allianz
BASF
BMW
BaFin
Bayer
Bonds
Börsenplatz
CEO Deutsche Börse
COVID-19
Certificates
Clearstream
DAX
Deutsche Bank
Deutsche Börse
Deutsche Telekom
Developed market
ETFs
Electronic
Equities
Eurex Clearing
Euro
Euro Stoxx 50
Euronext
European Securities and Markets Authority
European Union market
FWB
Frankfurt
Frankfurter Wertpapierbörse
Funds
General Standard
German
German economy
German public holidays
Germany
London Stock Exchange
MDAX
Major
MiFID II
Open Market
Prime Standard
SAP
SDAX

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Watching romantic comedies
Wine
Working-class
Zangen

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
American
Bernadette Rostenkowski
Caltech
Debbie Wolowitz
Footprints on the Moon
Halley Wolowitz
International Space Station
Jet Propulsion Laboratory
Jewish
Josh Wolowitz
MIT
Mars rover toilet seat
Master's in Engineering
Pasadena, California
Simon Helberg
Star Trek
Star Wars
Stuart Bloom
The Big Bang Theory
United States of America
Vanessa Wolowitz
Waste Allocation Load Lifter-Reference
aerospace engineer
affirmative
astronaut
comic books
electronics
fictional character
robotics
satellites
scooter
sings
skills in magic
spacecraft
speaks Klingon
speaks Mandarin
turtleneck sweaters
video games

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Frankfurt am Main
Funded by industry levies
German
German Banking Act
German Insurance Supervision Act
German Payment Services Supervision Act
German Securities Trading Act
Germany
Imposing sanctions
Insolvency proceedings supervision
Insurance companies
Insurance sector
International Organization of Securities Commissions
International cooperation strengthening
International financial regulation cooperation
Investigating financial misconduct
License revocations
Licensing financial institutions
Management bans
Market confidence maintenance
Market integrity
Market supervision
National financial supervision
Payment institutions
Pension funds
Pension scheme supervision
Proportional supervision
Prudential supervision
Resolution planning
Respected financial regulator
Risk-based supervision
Securities sector
Securities trading
Single Supervisory Mechanism
Statistical reports
Supervising financial institutions
Supervisory notices
Warning notices
Withdrawing licenses
www.bafin.de

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
German education system
German healthcare system
German social security system
German tax system
Germany
Hamburg
Helmut Kohl
Helmut Schmidt
Hesse
Konrad Adenauer
Kurt Georg Kiesinger
Lower Saxony
Ludwig Erhard
Mecklenburg-Vorpommern
Military Counterintelligence Service
NATO
North Rhine-Westphalia
OECD
Olaf Scholz
Rhineland-Palatinate
Saarland
Saxony
Saxony-Anhalt
Schleswig-Holstein
Social Democratic Party
Thuringia
Traffic light coalition
United Nations
Villa Hammerschmidt
Willy Brandt
ZDF
bundesregierung.de
federal parliamentary republic
government
right

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
International Space Hall of Fame
James Michael Aldrin
Janice Aldrin
Joan Archer
Korean War
Legion of Merit
Lois Driggs Cannon
Lunar Module Pilot
Magnificent Desolation
Magnificent desolation
Marion Moon
Mars Colonization
Massachusetts Institute of Technology
Men from Earth
Michael Collins
NASA
NASA Astronaut Group 3
NASA Distinguished Service Medal
NASA Exceptional Service Medal
National Aviation Hall of Fame
Neil Armstrong
Presbyterian
Presidential Medal of Freedom
Return to Earth
ShareSpace Foundation
Space Exploration
The Return
The Simpsons
The Wonder of It All
Transformers: Dark of the Moon
U.S. Astronaut Hall of Fame
United States Air Force
United States Military Academy
University of Michigan
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
US Patent 5163254
US Patent 5167181
US Patent 5174037
US Patent 5182996
US Patent 5185931
US Patent 5195226
Washington, D.C.
William Sanford Nye
YouTube
actor
astronomy
author
billnye.com
climate science
comedian
comedian in Seattle
creationism vs evolution
engineer at Boeing
evolution
has glasses
himself in Stargate SG-1
himself in The Simpsons
hydraulic resonance suppressor tube
mechanical engineer
mechanical engineering
person
science communication
science communicator
science education
science educator
scientist
secular humanist
supports climate change action
supports evolution education
supports science education
television host
television presenter
undergraduate
wears bow ties
white lab coat
writer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
"The Psychodynamics of Sharing"
"The Psychodynamics of Sibling Rivalry"
"The Psychodynamics of Therapeutic Relationships"
"The Psychology of Clinical Practice"
"The Psychology of Defense"
"The Psychology of Empathy"
"The Psychology of Excellence"
"The Psychology of Generosity"
"The Psychology of Gift-Giving"
"The Psychology of Human Development"
"The Psychology of Maternal Behavior"
"The Psychology of Meaning"
"The Psychology of Mental Health"
"The Psychology of Personality Development"
"The Psychology of Persuasion"
"The Psychology of Reliability"
"The Psychology of Resilience"
"The Psychology of Social Cognition"
"The Psychology of Stability"
"The Psychology of Teamwork"
"The Psychology of Well-being"
"The Psychopathology of Anxiety Disorders"
"The Psychopathology of Everyday Parenting"
"The Psychopathology of Family Dynamics"
"The Psychopathology of Interpersonal Relationships"
"The Psychopathology of Mood Disorders"
Alfred Hofstadter
Christine Baranski
Leonard Hofstadter
The Big Bang Theory
author
fictional character
neuroscientist
psychiatrist
television character

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Influential in hip-hop culture
James Harden
Juventus FC
Kanye West
Known for durable products
Kylian Mbappé
Lionel Messi
Manchester United
Nike, Inc.
North America
Olympic Games
Operates in over 160 countries
Outdoor
Parley for the Oceans
Paula Radcliffe
Pharrell Williams
Popular in streetwear fashion
Primeknit upper material
Public company
Puma SE
Real Madrid CF
Reebok
Running
Runtastic
Second largest sportswear manufacturer
Sports apparel
Sports equipment
Sportswear
Sportswear manufacturer
Stella McCartney
TaylorMade
Tennis
Three bars logo
Three stripes
Three stripes logo
Training
Trefoil logo
UEFA Champions League
Under Armour
Use only recycled polyester by 2024
Vietnam
White
Wholesale and retail channels
Y-3
adidas-group.com
adidas.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
BASF Philippines
BASF Qatar
BASF Samoa
BASF Saudi Arabia
BASF Singapore
BASF Solomon Islands
BASF South Africa
BASF South East Asia
BASF Sri Lanka
BASF Syria
BASF Thailand
BASF United Arab Emirates
BASF Vanuatu
BASF Venezuela
BASF Vietnam
BASF Yemen
Badische Anilin- und Soda-Fabrik
Chemicals
Europe
Frankfurt Stock Exchange
Freeport, Texas, USA
Friedrich Engelhorn
Geismar, Louisiana, USA
Hans-Ulrich Engel
Industrial Solutions
Kuantan, Malaysia
Ludwigshafen, Germany
Martin Brudermüller
Materials
Nanjing, China
North America
Nutrition & Care
Schwarzheide, Germany
Societas Europaea
South America
Surface Technologies
Tarragona, Spain
chemical company
chemicals
crop protection products
https://www.basf.com
oil and gas
performance products
plastics
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Infineon Technologies AG
Largest German companies by market capitalization
Linde plc
Lyxor DAX UCITS ETF
MDAX
MSCI Europe
MTU Aero Engines AG
Market capitalization
Mercedes-Benz Group AG
Merck KGaA
Moderate to high
Moderate with US indices
Multiple sectors
Münchener Rückversicherungs-Gesellschaft AG
Over 18000 points
Performance index
Porsche Automobil Holding SE
Prime Standard
Puma SE
Qiagen N.V.
Quarterly
RWE AG
Real-time
SAP SE
SDAX
STOXX Europe 600
Sartorius AG
Siemens AG
Siemens Energy AG
Stock market index
Symrise AG
TecDAX
Technology
Trading volume
Volkswagen AG
Vonovia SE
Xetra trading system
Xtrackers DAX UCITS ETF
Zalando SE
iShares Core DAX UCITS ETF
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Kia
Krupp
MAN
Mack Trucks
Mannesmann
Mazda
Mercedes-Benz
Micro Bird
Mid Bus
Mitsubishi
Morgan Grenfell
Navistar
New York Stock Exchange
Nissan
Norisbank
Opel
Orion Bus Industries
Paccar
Porsche
Postbank
Private Bank
Renault Trucks
Rheinmetall
Sal. Oppenheim
Scania
Siemens
Starcraft Bus
Sterling Trucks
Subaru
Suzuki
Thomas Built Buses
Thyssen
Toyota
Volkswagen
Volvo
Western Star
bank
banking
financial institution
financial services
https://www.db.com
public company

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Germany
Guillaume Faury
H135
H145
H160
Hamburg, Germany
ISO 14001
ISO 9001
Leiden, Netherlands
Lufthansa
MetOp satellites
Mobile, Alabama, USA
NH90
Pratt & Whitney
Premium Aerotec
Qatar Airways
Rolls-Royce
Safran
Sentinel satellites
Seville, Spain
Singapore Airlines
Skywise platform
Societas Europaea
Spain
Stelia Aerospace
Tianjin, China
Tiger
Toulouse, France
United Airlines
United Kingdom
ZEROe hydrogen aircraft program
aerospace
aerospace company
approximately 50% of commercial aircraft market
automated assembly lines
commercial airliners
community engagement initiatives
composite materials manufacturing
defense
employee volunteer programs
environmental sustainability programs
flight test centers
global supplier network
helicopters
just-in-time manufacturing
military aircraft
satellites
space systems
wind tunnel facilities

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
236155.0
6608.0
ASNT/WIUY
American
BBS|WS
Beth Abrahams
Bill
CBS
California
ChuckLorre
Circle_frame.svg
Dharma&Greg
Dream On
English
Free_content.svg
Friends
Go On
Mid
Prady
StarTrek:DeepSpaceNine
StarTrek:Voyager
Veronica's Closet
WikiProductTelevision
WikiProject Biography
WikiProject United States
Wikimediaproject
Wikipedia:WikiProject_Television#participants
YesDear
creator of The Big Bang Theory
httpsmeta.wikimedia.org
human
intentionally blured
learnedLeague
male
primetimeEmmyAward
producer
television
television production
televisionProducer
televisionWriter
writer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1.5 billion USD
1971-06-28
307 million USD (Zip2)
Aerospace
Afrikaans
American
Artificial Intelligence
Austin, Texas, USA
Automotive
Bachelor of Science in Economics
Bachelor of Science in Physics
Canadian
Chairman of SolarCity (formerly)
Chief Executive Officer
Damian Musk
English
Errol Musk
Full Self-Driving
Griffin Musk
Human
Hyperloop concept
Justine Musk
Kai Musk
Kimbal Musk
Making humanity a multi-planetary species
Male
Maye Musk
Neuralink
OpenAI
Over 100 billion USD
Pretoria, South Africa
Queen's University, Kingston, Ontario
Renewable Energy
Saxon Musk
South African
Space Colonization
SpaceX
SpaceX Falcon rockets
Starlink satellite internet
Sustainable Energy
Talulah Riley
Technoking of Tesla
Technology
Tesla electric vehicles
Tesla, Inc.
The Boring Company
Tosca Musk
Twitter
University of Pennsylvania
University of Pretoria

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Weaving
Zodiac concepts

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Settlement & Custody
Shanghai Stock Exchange
Stoxx
T7 trading system
TecDAX
Theodor Weimer
Tradegate Exchange
Trading & Clearing
World Federation of Exchanges
Xetra trading platform
auction
billions of euros
blockchain
bonds
clearing
clearing fees
collateral management
continuous trading
data fees
derivatives
deutsche-boerse.com
digital assets
electronic trading
financial services
floor trading
index licensing
index licensing fees
issuer services
leading in Germany
market data
market supervision
one of the world's largest
over 10000
public limited company
securities lending
settlement
settlement fees
significant in Europe
stock exchange
stocks
sustainability
trading
trading fees

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
124 acres
1891
1893
39
3:1
6
8
Amos G. Throop
Approximately 1,300
Approximately 3-4%
Approximately 300 professorial faculty
Approximately 900
Bachelor of Science only
Beavers
CIT
Ditch Day
Division of Biology and Biological Engineering
Division of Chemistry and Chemical Engineering
Division of Engineering and Applied Science
Division of Geological and Planetary Sciences
Division of Humanities and Social Sciences
Division of Physics, Mathematics and Astronomy
English
GRAIL
Houses
Jet Propulsion Laboratory
Jet Propulsion Laboratory management
Kavli Nanoscience Institute
Kepler space telescope
LIGO
Mars Rover missions
Mediterranean Revival
Molecular Observatory
Most selective in U.S. higher education
NCAA Division III
Nonsecular
Orange
Over $3 billion
Palomar Observatory
Pasadena, California
Private research university
Robert A. Millikan
SCIAC
Science and engineering education
Sherman Fairchild Library
Suburban
Tectonics Observatory
The Honor Code
The truth shall make you free
Thomas F. Rosenbaum

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Eurex US
Euro Stoxx 50 Futures
Exchange
FX Derivatives
Fee Structures
Frankfurt
Fraud Detection
Futures
Germany
High-Frequency Trading
Incentive Programs
Incident Management
Index Licensing
Index Options
Integration Tools
Interest Rate Derivatives
Interest Rate Options
Korean Exchange
Liquidity Programs
Liquidity Services
Margin Calculators
Market Data Services
Market Making
Market Surveillance
Membership Services
Mobile Access
Monitoring Tools
Natural Gas Derivatives
Notifications
OTC Clearing
Options
Order Types
Performance Metrics
Portfolio Compression
Position Limits
Post-Trade Services
Power Derivatives
Regulatory Reporting
Regulatory Updates
Repo Clearing
Reporting Services
Reporting Tools
Risk Controls
Risk Management
Scalability
Schatz Futures
Securities Lending
Settlement Services
Simulation Environment
Single Stock Options

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Siemens
Stock exchange
Stocks
Stop orders
Strict
Stringent
TecDAX
Theodor Weimer
Top 10
Volkswagen
Warrants
Weekends
Xetra
Yes
www.boerse-frankfurt.de

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2018
American
Bernadette Rostenkowski
Bill Prady
Blonde hair
Caltech
Chuck Lorre
Cinnamon
Dave Gibbs
December 17, 1979
Driver's license
Fake Nobel Prize
FictionalCharacter
Flourishing with Penny
Girls' night
Glendale, California
Harry Potter
Harvard University
Howard Wolowitz
Humanities Medal recipient
If I Didn't Have You
Intelligent
Leonard Hofstadter
Mayim Bialik
Mrs. Fowler
Neurobiology
Neurobiology conference
Neuroscience
Neuroscientist
Northrop Grumman neurotech team
Only child
Pasadena, California
Penny
PhD
Primates
Princeton University
Raj Koothrappali
Scientific podcast
Season 3
Sheldon Cooper
Sheldon Cooper's girlfriend
Sheldon Cooper's wife
Sheldon's tie
Shoney's
Smart car
SociallyAwkward
The Alien Parasite Hypothesis
The Big Bang Theory
Wil Wheaton nemesis

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (20); stopping.
[crawler] finished in 289.0s → outputs in runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251029_231623
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+1 sword
1974
Advanced Dungeons & Dragons
Dave Arneson
Dragonlance
Dungeon Master's Guide
Dungeons & Dragons (2000)
Dungeons & Dragons 3rd Edition
Dungeons & Dragons 4th Edition
Dungeons & Dragons 5th Edition
Dungeons & Dragons: Honor Among Thieves
Eberron
Forgotten Realms
Gary Gygax
Greyhawk
Keep on the Borderlands
Monster Manual
Original Dungeons & Dragons
Player's Handbook
TSR
The Lord of the Rings
Tomb of Horrors
Wizards of the Coast
beholder
chaotic evil
character level
charisma
cleric
constitution
dexterity
dice rolling
dragon
dwarf
elf
experience points
fantasy
fantasy literature
fighter
goblin
halfling
human
intelligence
lawful good
mind flayer
orc
potion of healing
rogue
role-playing game
role-playing games
strength

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] output_dir: runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] seeded: The TV Series Big Bang Theory
[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: The TV Series Big Bang Theory

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
$14.3 billion
1080i HDTV
1927
1927-09-18
241 stations
480i widescreen SDTV
60 Minutes
720p HDTV
America's Most Watched Network
Arthur Judson
Autodesk
Black Rock
CBS
CBS Building
CBS Entertainment
CBS Evening News
CBS Mornings
CBS News
CBS News and Stations
CBS Owned & Operated Stations
CBS Radio Network (1927-2007)
CBS Sports
CBS Television Distribution
CBS Television Network Affiliates
CNET
Columbia Phonographic Broadcasting System
December 4, 2019
Eagle Independent Syndicate
English
George Cheeks
Google wideWine DRM standard
Kelly Kahl
March Madness
Margaret Cronan
NFL on CBS
National Amusements
New York City
Paramount Global
Paramount Media Networks
Paramount Pictures
Paramount+
Public company
Robert Bakish
Showtime Networks
Television network
Terrestrial radio
The Eye Network
The Late Show with Stephen Colbert
The NFL Today
The Price Is Right

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
SAP Concur
SAP ERP
SAP Fieldglass
SAP Foundation
SAP HANA
SAP R/1
SAP S/4HANA
SAP Social Sabbatical
SAP SuccessFactors
SAP University Alliances
SAP Young Thinkers
SAP.iO venture studio
Salesforce
SuccessFactors
SuccessFactors for $3.4 billion
Sybase
Sybase for $5.8 billion
Systemanalyse Programmentwicklung
Walldorf, Germany
Weinheim, Germany
Workday
artificial intelligence
blockchain
carbon neutral by 2023
cloud computing
enterprise software
financial accounting system
in-memory computing
machine learning
net-zero emissions by 2030
over 180 countries
over 40%
over 400000
over €4 billion annually
public company
sap.com
software company
world's third-largest independent software manufacturer
€150 billion
€27.8 billion
€3.4 billion
€39.3 billion
€4.7 billion
€68.4 billion

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
MINI Electric
Mercedes-Benz
Mobileye
MotoGP
Mountain View, USA
Munich, Germany
Oliver Zipse
Oxford, UK
Rolls-Royce Motor Cars
Rolls-Royce Phantom
Shanghai, China
Shenyang, China
Spartanburg, USA
Tesla
Tokyo, Japan
Toyota
Volkswagen
aircraft engine production
aircraft engines
automobile manufacturer
automobiles
automotive
blue and white propeller
carbon neutrality by 2050
efficient dynamics
electric vehicles
financial services
financing
iDrive infotainment system
insurance
kitchen appliances production
leasing
luxury vehicles
motorcycle manufacturing
motorcycles
public company
sheer driving pleasure
ultimate driving machine
xDrive all-wheel drive
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
#GoldenGlobes
1944
2021
81st Golden Globe Awards
Best Actor – Motion Picture Drama
Best Actor – Television Series Drama
Best Actress – Motion Picture Drama
Best Actress – Television Series Drama
Best Animated Feature Film
Best Director
Best Foreign Language Film
Best Motion Picture – Drama
Best Original Score
Best Original Song
Best Screenplay
Best Supporting Actor – Motion Picture
Best Supporting Actress – Motion Picture
Best Television Series – Drama
Cecil B. DeMille Award
Golden Globe Award
Golden Globe Awards ceremony
Golden Globes
Hollywood
Hollywood Foreign Press Association
Hollywood Foreign Press Association members
January
NBC
Pacific Time Zone
The Beverly Hilton
Twitter
United States
about 90
allegations of bias
annual
award
early January
film
golden globe on a pedestal
goldenglobes.com
precursor to Academy Awards
prestigious
recognize excellence in film and television
television
trophy
vote by HFPA members
winner's name

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
100 billion dollars
1955-10-28
1975
1994-01-01
2021-08-02
3
Altair BASIC
American
American Academy of Arts and Sciences
Barack Obama
Berkshire Hathaway
Bill
Bill & Melinda Gates Foundation
Bower Award for Business Leadership
Breakthrough Energy
Business @ the Speed of Thought
CEO of Microsoft
Cascade Investment
Corbis
DOS
Democratic
GAVI
Gates
Gates Ventures
Harvard University
IBM
Lakeside School
MS-DOS
Medina, Washington
Melinda French Gates
Microsoft
Microsoft BASIC
Microsoft Windows
Microsoft stock
Paul Allen
Presidential Medal of Freedom
Reddit AMA
Seattle
TIME Person of the Year
TerraPower
The Giving Pledge
The Road Ahead
United States
University of Washington
Warren Buffett
William Henry Gates III
World Health Organization
articles
artificial intelligence
billionaire

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+49
.de
0.947
16
1871-01-18
1949-10-07
1954
1957-03-25
1973-09-18
1974
1990
1990-10-03
2012
235
2962
357592
4082460000000
48598
5.7
84270625
Alps
Austria
Baden-Württemberg
Bavaria
Belgium
Berlin
Brandenburg
Bremen
CET
Chancellor
Cologne
Czech Republic
DE
Danube
Denmark
Deutsche Bahn
Elbe
Euro
Europe
France
Frank-Walter Steinmeier
Frankfurt
Frankfurt Airport
German
Hamburg
Hesse
Lower Saxony
Luxembourg
Mecklenburg-Vorpommern
Munich

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Vaccine development
Warren Buffett
Waseda University
Washington
William H. Gates Sr.
William Henry Gates III
Xanadu 2.0
gatesnotes.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
"From music to television"
1952-10-18
8 Primetime Emmy Awards
American
Bill Prady
CBS
Charles Michael Levine
Chuck Lorre Productions
Collaborated with Charlie Sheen
Composer
Created Bob Hearts Abishola
Created Cybill
Created Dharma & Greg
Created Grace Under Fire
Created Mike & Molly
Created Mom
Created Roseanne
Created The Big Bang Theory
Created The Kominsky Method
Created Two and a Half Men
Created Young Sheldon
Defining 2000s-early 2010s network TV comedy
Exceeding $600 million
Executive produced with Warner Bros. Television
Family comedy
Guitarist for touring acts
James Madison High School
Lead characters often flawed
Lee Aronsohn
Los Angeles
Married multiple times
Mentored other writers
Most watched (live+7) comedy 2010–2019
Musician in early career
Musician transition to comedy writer
Net worth partially from backend deals
New York City
Person
Private personal life
Relationship comedy
Screenwriter
Sitcom
Steven Molaro
Television Academy Hall of Fame inductee
Television director
Television producer
Television syndication
The Big Bang Theory finale (2019-05-16)
Vanity card creator
Vanity cards hold philosophical musings

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2010
5 feet 5 inches
Aerospace engineer
American
Aries
Bernadette earns more
Caltech
Cheesecake Factory
Cheesecake Factory waitress
Comic book store
Debbie Wolowitz
English
Fictional couple
Financial stress
Footprints on the Moon
French
Froot Loops
Halley Wolowitz
Hebrew
Howard's mother's house
Howie
ISS
Jewish
Judaism
Keyboard
Klingon
Las Vegas
Leonard Hofstadter
Los Angeles
MIT
Mandarin
Married
Masters in Engineering
Melissa Rauch
Microbiologist
Microbiology
Mike Rostenkowski
Mrs. Rostenkowski
Mullet
Neil Michael Wolowitz
Penny
Penny's Halloween party
PhD in Microbiology
Pharmaceutical company
Pharmaceutical research
Pilot episode
Polish-American
Raj Koothrappali
Robotics
Science

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
112
1792
1815
1866
1929
2022
248.31
50.1109° N, 8.6821° E
51500
6
60306-60599
733000
794
90+
Anne Frank
Bethmännchen
Birmingham
Brothers Grimm
Budapest
Börse Frankfurt
CET
Cairo
City
City council
Commerzbank Tower
Commerzbank-Arena
DE
Deutsche Bundesbank
Dezhou
Eintracht Frankfurt
Eiserner Steg
Eschersheimer Tor
Eskişehir
Euro
European Central Bank
Evangelical Church
F
FFM
FRA
Frankfurt
Frankfurt (Oder)
Frankfurt Airport
Frankfurt Book Fair
Frankfurt Cathedral
Frankfurt Central Station
Frankfurt Rhein-Main
Frankfurt Stock Exchange
Frankfurt skyline
Frankfurter
Frankfurter Messe

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Mercedes-Benz Group
Merck KGaA
Munich Re
Porsche
Puma
Qiagen
RWE
SAP
SDAX
Sartorius
Siemens
Symrise
TecDAX
Technology
Telecommunications
Utilities
VDAX
Volkswagen
Vonovia
Xetra trading system
Zalando
around 15
around 3%
based on market capitalization and turnover
billions of euros daily
blue-chip index
broad
extensive
free on financial websites
free-float market capitalization
generally positive long-term
global
high
high with other European indices
many German equity funds
one of the largest
over 18000 points
over 70% of German stock market
performance index
quarterly
real-time
significant during financial crises
stock market index
top 10 by market capitalization
true
under 1000 points

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
financial news
financial services
free float
free float market capitalization
futures
growing importance
healthcare
high
higher than DAX
included in performance index
increasing
index funds
industrial
institutional investors
market capitalization
medium
mid-cap companies
minimum trading volume
moderate
options
performance index
price index
publicly available
quarterly
real estate
real-time
regular
regulated benchmark
retail
retail investors
rights issues
stock market index
stock splits
strict
structural changes in 2021
structured products
technology
trading volume
variable
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1899
200,000 people
2nd century AD
3rd century BC
900 hectares
Akkadian
Alexander the Great
Amorites
Ashurbanipal
Assyrian culture
Assyrians
Babylon ruins
Babylonian Empire
Babylonian astronomy
Babylonian mathematics
Babylonian mythology
Bible
Borsippa
Code of Hammurabi
Esagila temple
Esarhaddon
Etemenanki ziggurat
Euphrates River
Hammurabi
Hammurabi's reign
Hanging Gardens
Herodotus' Histories
Hittites
Iraq
Ishtar Gate
Kish
Marduk
Mesopotamia
Nebuchadnezzar II
Neo-Babylonian Empire
Persian Empire
Persians
Processional Way
Robert Koldewey
Sennacherib
Sippar
Tower of Babel
World Heritage Site
advanced urban planning
ancient city
astronomical observations
cuneiform
double walls
early legal code
eight main gates

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
right
rye bread
sauerkraut
sausages
schnitzel

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Karl Benz
Kuwait Investment Authority
Lewis Hamilton
Li Shufu
LinkedIn
Luxury vehicles
MBG
MEA
Mercedes-AMG
Mercedes-AMG Petronas Formula One Team
Mercedes-Benz
Mercedes-Benz AG
Mercedes-Benz B-Class Electric Drive
Mercedes-Benz Bank AG
Mercedes-Benz Drive Pilot
Mercedes-Benz Financial Services
Mercedes-Benz Mobility AG
Mercedes-Maybach
Mexico
Michael Schumacher
Nico Rosberg
North America
Ola Källenius
Setra
Silver
Sindelfingen, Germany
South Africa
Spain
Stuttgart, Germany
Sunnyvale, California
The best or nothing
Three-pointed star
Twitter
United States
Vietnam
YouTube
https://www.mercedes-benz.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 417.9s → outputs in runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251029_231623
[crawler] seeded: DAX 40 Index
[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 40 Index

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1988
Acoustic elements prominent
All in Good Time
Alternative rock
Appeared in various TV shows
Bass guitar
Big Bang Theory
Brian Wilson
Canada
Canadian band
Chantal Kreviazuk
Did theme for Big Bang Theory
Drums
Ed Robertson
Everything to Everyone
Frequency
Gordon
Grinning Streak
Guitar
If I Had $1000000
Jim Creeggan
Kevin Hearn
Keyboards
Maroon
One Week
Pinch Me
Pop rock
Reprise
Rock band
Sarah McLachlan
Scarborough
Sire
Steven Page
Stunt
The Beatles
Toronto
Tyler Stewart
Vocals
War Child Canada
Witty lyrics
Won multiple Juno Awards

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
with London Stock Exchange in 2017
www.deutsche-boerse.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
STOXX
Scale
Siemens
Swiss Exchange
T7
TecDAX
Theodor Weimer
Volkswagen
Warrants
World Federation of Exchanges
Xetra
Yes
https://www.boerse-frankfurt.de
over 1 trillion euros
over 1000
over 1000 billion euros
over 10000
stock exchange
top 10 globally

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Throop University
Top 10 in world university rankings
www.caltech.edu

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Vivian Jenna Wilson
X AE A-XII Musk
X Corp.
X.com
Zip2

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Smart Order Routing
Support Services
Swaption
Tax Reporting
Testing Tools
Trade Repository
Trading Interfaces
Trading Technology
Training Programs
VSTOXX Futures
Volatility Derivatives
Web Portal

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The Talk
United Independent Broadcasters
United States
Viacom
ViacomCBS
Wendy McMahon
Westinghouse Electric Corporation
approx. 13,000
cbs.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
video games
wargaming
wisdom
wizard

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
1987-12-30
1988
40
Bloomberg
CAC 40
DAXperformanceindex
DE0008469008
Destatis
Deutsche Börse
Deutscher Aktienindex
Euro
Euro Stoxx 50
FTSE 100
Frankfurt Stock Exchange
German Stock Index
German blue-chip stocks
Germany
MDAX
Nikkei 225
Stoxx Ltd
TecDAX
daily
forty companies' share prices
free-float market capitalization
none outside EUR possibly
real-time
stock market index
true
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Netherlands
North Rhine-Westphalia
Olaf Scholz
Poland
President
Rhine
Rhineland-Palatinate
Saarland
Saxony
Saxony-Anhalt
Schleswig-Holstein
Switzerland
Thuringia
USD
Zugspitze
automotive
chemicals
country
federal parliamentary republic
jürgen klopp
machinery
people per square kilometer
right
social market economy
square kilometers
true
vehicles

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
businessman
charitable causes
documentary films
education
global health
global philanthropy
global vaccine programs
human
malaria
none
personal computer revolution
philanthropist
polio eradication
reading
renewable energy
richest person in the world
software
software developer
some college
tech entrepreneurs
technology advisor
technology leaders

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12 days 1 hour 52 minutes
149-32-7154
178 cm
1930-01-20
1966-11-11
1969-07-20
1971-03-01
2
2 hours 31 minutes
21.5 kg
5 hours 30 minutes
66
7 hours 52 minutes
77 kg
Air Force Distinguished Service Medal
Air Medal
Alcoholism
Aldrin
Aldrin cycler
Andrew John Aldrin
Apollo 11
Apollo 11 Lunar Module Pilot
Apollo Lunar Module
Astronaut
Astronautics
Barack Obama
Beautiful view
Beverly Van Zile
Blue
Brown
Buzz
Colonel
Congressional Gold Medal
Dancing with the Stars
Depression
Doctor of Science in Astronautics
Dr. Rendezvous
Edwin Eugene Aldrin Sr.
Encounter with Tiber
Engineer
F-86 Sabre
Fay Ann Aldrin
Fighter Pilot
Gemini 12
Glen Ridge, New Jersey
Gustavus Adolphus College
Human
International Space Hall of Fame
James Michael Aldrin
Janice Ross Aldrin

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Sheldon Cooper
Simon Helberg
Singer
Sweet but competitive
That's my spot
The Big Bang Theory
The Classified Materials Turbulence season 3
Tight pants and turtlenecks
University
Yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
later Mesopotamian civilizations
mathematical achievements

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Won Primetime Emmy Award
Writee of TV Guide article
Wrote for Teenage Mutant Ninja Turtles
Wrote for animation (first credits)
chucklorre.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Frankfurter Würstchen
Free Imperial City
French forces
Gateway to the World
German
German Confederation
German Film Museum
German city
Germany
Goethe University Frankfurt
Gothic
Granada
Hesse
Holy Roman Empire
International Motor Show
Kraków
Leipzig
Lord Mayor
Lyon
Main
Mainhattan
Messeturm
Mike Josef
Milan
Nidda
Oceanic
Palmengarten
Philadelphia
Prague
Prussia
RMV
Rhein-Main-Verkehrsverbund
Roman Catholic
Römer
Römerberg
S-Bahn
SPD
Saint Bartholomew
Senckenberg Nature Museum
Städel Museum
Toronto
U-Bahn
Waldstadion
apple tree
approximately 50%
chemicals
finance
football club
https://en.wikipedia.org/wiki/Frankfurt
public

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 442.0s → outputs in runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251029_231623
[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Akkadian

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Alexander the Great

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Amorites

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Ashurbanipal

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Assyrians

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Babylonian Empire

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bible

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Borsippa

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Code of Hammurabi

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Esagila temple

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Esarhaddon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Etemenanki ziggurat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hammurabi

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Euphrates River

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Herodotus' Histories

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hanging Gardens

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Iraq

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Kish

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Ishtar Gate

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hittites

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[crawler] output_dir: runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231623
[crawler] seeded: ancient city of Babylon
[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: ancient city of Babylon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
1988
2021
40
846900
9:00-17:30 CET
Adidas
Airbus
Allianz
BASF
BMW
BaFin
Bayer
CFDs
Continental
DAX
DAX 30 Index
DAX indices
DE0008469008
Deutsche Bank
Deutsche Börse
Deutsche Börse AG
Deutsche Telekom
E.ON
ETFs
Euro
European Union
Frankfurt Stock Exchange
Fresenius
German blue-chip stocks
Germany
Henkel
Infineon
Linde
MDAX
Mercedes-Benz Group
Munich Re
Porsche
RWE
SAP
SDAX
Siemens
TecDAX
Volkswagen
every 15 seconds
fast-entry
fast-exit
free-float market capitalization
futures
institutional investors

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Joan Archer
Korean War
Left-handed
Lois Driggs Cannon
Lunar Module Pilot
Madeline Aldrin
Magnificent desolation
Marion Moon
Mars colonization
Mass Effect 3
Massachusetts Institute of Technology
Men from Earth
Mental health struggles
NASA
NASA Ambassadors of Exploration Award
NASA Distinguished Service Medal
National Space Society
Person
Postage stamp
Presbyterian
Presidential Medal of Freedom
Republican
Return to Earth
STEM education
Satellite Beach, Florida
Scuba diving
ShareSpace Foundation
Skeet shooting champion at West Point
Space exploration
Test Pilot School
The Return
The Simpsons
Time magazine cover
Transformers: Dark of the Moon
True
U.S. Astronaut Hall of Fame
United States
United States Air Force
United States Military Academy
Walter Wrigley

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1854
Akkadian
Babylon
Babylonia
Babylonian
Babylonian Chronicles
Birs Nimrud
Borsippa province
Esagila Tablet
Ezida
Henry Rawlinson
Herodotus
Iraq
Mesopotamia
Nabu
Nebuchadnezzar II
Neo-Babylonian period
Parthian period
Seleucid period
Strabo
Sumerian
ancient city
astronomical
cuneiform texts
literary
mathematical
scribal god

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
5th century BCE
6th century BCE
Babylon
Babylonian religion
Babylonian religious complex
Etemenanki ziggurat
Herodotus' Histories
Marduk
Mesopotamian
Mesopotamian temple
Nebuchadnezzar II
New Year festival
Old Babylonian period
Robert Koldewey
Xerxes I
Zarpanitu
baked brick
cuneiform tablets
divine marriage ceremony
early 20th century
main temple of Marduk
modern Iraq
mud brick
religious center of Babylon
religious ceremonies
site of Akitu festival
southern Babylon
statue procession
stone
temple

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
275 BC
6th century BC
Babylon ruins
Babylonia
Babylonian Empire
Babylonian astronomy
Babylonian captivity
Babylonian mathematics
Bible
Code of Hammurabi
Cyrus the Great
Esarhaddon
Etemenanki ziggurat
Euphrates River
Hammurabi
Hanging Gardens of Babylon
Iraq
Ishtar Gate
Marduk temple
Mesopotamia
Nebuchadnezzar II
Robert Koldewey
Sennacherib of Assyria
World Heritage Site
ancient Near East
ancient city
c. 1000 AD
c. 2300 BC
cuneiform writing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1912
1923
3000 BCE
Agga
Akkadian Empire
Babylon
Bronze Age
Early Dynastic
Early Dynastic Period
Epic of Gilgamesh
Ernest de Sarzec
Etana
Euphrates
Henri de Genouillac
Iraq
King of Kish
Mesilim
Mesopotamia
Nippur
Stephen Langdon
Sumer
Sumerian
Sumerian King List
Tell al-Uhaymir
Ubaid period
Ur
Uruk period
ancient city
cuneiform tablets
early Mesopotamian kingship
early Mesopotamian urban center
palace ruins
temple remains
ziggurat remains

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
urban district

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (16); stopping.
[crawler] finished in 329.8s → outputs in runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251029_231623
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] seeded: The TV Series Big Bang Theory
[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: The TV Series Big Bang Theory

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1200 BCE
1600 BCE
19th century
Aegean civilizations
Anatolia
Ancient Egypt
Assyria
Battle of Kadesh
Bible
Bronze Age
Bronze Age Collapse
Bronze Age empire
Egyptian records
Hattusa
Hittite
Hittite laws
Hurrian culture
Indo-European
Mesopotamia
Mesopotamian culture
Mitanni
Muwatalli II
Neo-Hittite states
Ramesses II
Suppiluliuma I
Treaty of Kadesh
Turkey
World Heritage Site
Yazılıkaya
agriculture
ancient civilization
archaeologists
bridge between East and West
chariot warfare
cuneiform
first peace treaty
fortified cities
influenced Iron Age cultures
iron smelting
ironworking
later Anatolian cultures
major Bronze Age power
monarchy
polytheistic
professional army
rock reliefs
sculpture
trade

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2nd millennium BCE
3rd millennium BCE
Adad
Akkadian texts
Amorite language
Amorite language influence on Akkadian
Amurru
Ancient Near East
Arameans
Assyrian expansion
Babylon
Bronze Age
Canaanite culture
Canaanites
Dagan
Ebla
Ebla tablets
Egyptian texts
Hammurabi
Hebrew Bible
Hittite expansion
Ishtar
Levant
Mari
Mari tablets
Martu
Mesopotamia
Mesopotamian culture
Qatna
Semitic languages
Sumerian texts
Syrian Desert
Tell Leilan
Yamhad
ancient Semitic-speaking people
chariot warfare
collapse of Ur III dynasty
enemies of Israelites
horse domestication
legal traditions
merchants
nomadic pastoralists
pre-Israelite inhabitants of Canaan
religious practices
urban development
warriors
westerners

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
14 meters
1902
1902-1914
1930
30 meters
6th century BCE
Babylon
Babylon ruins
Babylon site
Babylonian mythology
Berlin
German Oriental Society
Iraq
Iron Age
Ishtar
Mesopotamian architecture
Mesopotamian civilization
Mushussu
Nebuchadnezzar II
Neo-Babylonian
Neo-Babylonian Empire
New Year festival
Pergamon Museum
Processional Way
Robert Koldewey
Vorderasiatisches Museum
Walls of Babylon
World Heritage Site
ancient Near Eastern art
ancient wonder
arched gateway
aurochs
baked mud bricks
blue
bulls
city fortification
city gate
cuneiform
decorative friezes
dragons
glazed bricks
glazed brickwork
historical records
lapis lazuli blue
lions
major Mesopotamian artifact
permanent exhibition
religious procession

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19th century
627 BC
668 BC
Akkadian
Ashur-etil-ilani
Asnappar
Assyrian king
Assyrian reliefs
Assyrian scholarship
Austen Henry Layard
Babylon
Bible
British Museum
Elam
Esarhaddon
Iraq
King of Assyria
King of Sumer and Akkad
Kuyunjik
Library of Ashurbanipal
Mesopotamia
Neo-Assyrian Empire
Neo-Assyrian period
Nineveh
North Palace of Nineveh
Royal Annals
Shamash-shum-ukin
Sumerian
after his death
ancient library founder
bureaucratic reforms
clay tablets
conquest of Egypt
cuneiform inscriptions
cuneiform script
cuneiform tablets
last great Assyrian king
lion hunt reliefs
lion hunting
palace construction
priest of Ashur
royal seals
scholarly training
stone reliefs
suppression of Babylonian rebellion
temple restoration
war with Elam
with Shamash-shum-ukin

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1750 BC
1792 BC
1901
2.25 meters
282 laws
Akkadian
Babylon
Babylonia
Babylonian king
Bible
Bronze Age
Code of Hammurabi
Eshnunna
First Babylonian Dynasty
Iraq
Jacques de Morgan
Larsa
Louvre Museum
Marduk
Mari
Mesopotamia
Middle Assyrian Laws
Samsu-iluna
Shamash
Sin-Muballit
Susa
Ur-Nammu
ancient Near East
ancient law
awilum
canals
commercial law
criminal law
cuneiform
diorite stele
eye for an eye
family law
irrigation systems
law code
lawgiver
legal systems
lex talionis
mushkenum
oldest legal code
property law
southern Mesopotamia
stone pillar
temples
wardum

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 402.7s → outputs in runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251029_231623
[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Babylonia

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Babylonian Empire

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bible

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Code of Hammurabi

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Cyrus the Great

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Esarhaddon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Euphrates River

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Etemenanki ziggurat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hammurabi

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Hanging Gardens of Babylon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Iraq

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Ishtar Gate

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Mesopotamia

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Robert Koldewey

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Sennacherib of Assyria

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Nebuchadnezzar II

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[crawler] output_dir: runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231623
[crawler] seeded: DAX 40 Index
[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 40 Index

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
100 CE
19th century
1st century CE
24th century BCE
2500 BCE
Afro-Asiatic
Akkadian Empire
Arabic
Aramaic
Assyria
Assyrian
Assyriology
Babylonia
Babylonian
Code of Hammurabi
East Semitic
Edward Hincks
Enuma Elish
Epic of Gilgamesh
Hebrew
Henry Rawlinson
Mesopotamia
SOV
Semitic
Semitic language
Sumerian
accusative
administration
ancient Near Eastern studies
ancient language
biblical studies
city of Akkad
clay tablets
cuneiform
cylinder seals
diplomacy
emphatic consonants
genitive
guttural consonants
influenced Aramaic
influenced Hebrew
language
later Semitic languages
literature
loanwords in other languages
nominative
prefix conjugation
research institutions
science
stone inscriptions

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
18th century BCE
539 BCE
6th century BCE
Achaemenid Empire
Akkad
Akkadian
Akkadian Empire
Alexander the Great
Anatolia
Assyrian Empire
Assyrian culture
Babylon
Bible
Code of Hammurabi
Egypt
Enuma Elish
Epic of Gilgamesh
Euphrates
Greek astronomy
Hammurabi
Hanging Gardens of Babylon
Hebrew culture
Hittites
Indus Valley
Iraq
Ishtar Gate
Jewish people
Kassites
Marduk
Medes
Mesopotamia
Mesopotamian polytheism
Middle Babylonian period
Middle East
Nebuchadnezzar II
Neo-Babylonian Empire
Old Babylonian period
Persian culture
Silk Road
Sumer
Sumerian civilization
Tigris
Tower of Babel
agriculture
ancient empire
architecture
astronomy
base-60 numeral system
cuneiform
cuneiform writing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
669 BC
681 BC
Akkadian
Anatolia
Ancient Mesopotamian religion
Ancient Near East
Armory Palace
Ashur
Ashurbanipal
Assyria
Assyrian
Assyrian Empire
Assyrian king
Assyrian-Egyptian wars
Babylon
Babylonian temples
Bible
Book of Ezra
Cimmerians
Egypt
Harran
Iron Age
Ishtar
King of Assyria
King of Babylon
King of Sumer and Akkad
Kushite dynasty
Levant
Manasseh of Judah
Marduk
Medes
Memphis
Mesopotamia
Neo-Assyrian Empire
Neo-Assyrian period
Nineveh
Scythians
Sennacherib
Shamash-shum-ukin
Taharqa
building projects
conquest of Egypt
empire
empire builder
imperial administration
military campaigns
monarch
priesthood
rebuilding Babylon
royal inscriptions

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
2007
2019
22 minutes
279
Aarti Mann
Adam West
Alice Amter
Amy Farrah Fowler
Bernadette Rostenkowski
Bill Nye
Bill Prady
Bob Newhart
Brent Spiner
Brian George
Brian Posehn
CBS
California
California Institute of Technology
Carrie Fisher
Christine Baranski
Chuck Lorre
Chuck Lorre Productions
Courtney Henggeler
Critics' Choice Television Award
Elon Musk
English
George Takei
Golden Globe Award
HBO Max
HDTV
Howard Wolowitz
James Earl Jones
Jim Parsons
John Ross Bowie
Johnny Galecki
Joshua Malina
Kaley Cuoco
Kate Micucci
Kevin Smith
Kevin Sussman
Kunal Nayyar
Laura Spencer
Laurie Metcalf
LeVar Burton
Leonard Hofstadter
Los Angeles
Mark Hamill
Mayim Bialik
Melissa Rauch

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
leading German stock index
major European index
market capitalization
options
performance index
quarterly
retail investors
stock market index
trading volume
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19th century
20th century
2nd century BCE
6th century BCE
Amytis of Media
Babylon
Babylonian architecture
Berossus
Diodorus Siculus
Euphrates River
Greek historians
Greek texts
Hill of Babylon
Iraq
Nebuchadnezzar II
Nineveh theory
Philo of Byzantium
Sennacherib attribution
Seven Wonders of the Ancient World
Strabo
World Heritage Site candidate
ancient engineering
ancient engineering achievement
ancient history
ancient wonder
approximately 75 feet
archaeological interest
archaeological remains
archaeology
architectural marvel
art
attribution
botanical gardens
botanical history
chain pumps
construction methods
cultural symbol
cuneiform tablets
earthquakes
educational destination
educational topic
elaborate irrigation system
engineering history
existence
existence debated
exotic plants
film
garden design
historical site
influenced landscape architecture

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Adidas

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Airbus

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Allianz

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: BMW

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: BASF

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: BaFin

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bayer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Continental

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 30 Index

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Bank

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Börse

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: E.ON

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Börse AG

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Telekom

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Frankfurt Stock Exchange

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: European Union

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Euro

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Fresenius

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Germany

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
5th century BCE
6th century BCE
91 meters
Babylon
Esagil Tablet
Esagil temple complex
Marduk
Mesopotamia
Nebuchadnezzar II
The Rassam Cylinder
Tower of Babel
Xerxes I
seven
ziggurat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Balikh River
Bible
Euphrates Valley
Iraq
Islamic eschatology
Khabur River
Mesopotamia
Mesopotamian civilization
Middle East
Mount Ararat
Persian Gulf
Quran
Shatt al-Arab
Syria
Tabqa Dam
Tigris River
Tigris-Euphrates river system
Tishrin Dam
Turkey
ancient Babylon
ancient Sumer
approximately 2,800 km
river
since ancient times

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
669 BCE
681 BCE
Arabian Peninsula
Ashurbanipal
Assyrian
Assyrian king
Babylon
Cimmerians
Egypt
Elam
Manasseh of Judah
Naqi'a
Neo-Assyrian Empire
Nimrud
Nineveh
Scythians
Sennacherib
Shamash-shum-ukin
Sidon
Tyre
king
modern Lebanon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1932
2003
438,317
Arab League
Arabia Standard Time
Arabic
Asia
Babylon
Baghdad
Euphrates
Iran
Iraq War
Iraqi dinar
Islam
Jordan
Kurdish
Kurdistan Region
Kuwait
Mesopotamia
Middle East
Nineveh
OPEC
President of Iraq
Prime Minister of Iraq
Saudi Arabia
Shia Islam
Sunni Islam
Syria
Tigris
Turkey
United Kingdom
United Nations
United States
Ur
among largest globally
country
over 40 million
parliamentary republic

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
66
American Bible Society
Arabic
Aramaic
Beatitudes
Catholic
Chinese
Christian theology
Christianity
Codex Sinaiticus
Codex Vaticanus
Dead Sea Scrolls
English
Exodus
French
Genesis
Gideons International
God
Gospels
Great Awakenings
Greek
Hebrew
Hebrew Bible
Jesus Christ
Jewish tradition
Judaism
King James Version
Latin Vulgate
Lord's Prayer
New Testament
Old Testament
Orthodox
Protestant
Psalms
Reformation
Revelation
Septuagint
Sermon on the Mount
Spanish
Ten Commandments
United Bible Societies
Western civilization
Wycliffe Bible Translators
apocalyptic literature
art
audio
biblical archaeology
biblical scholars
biblical scholarship
biblical studies

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
6th century BCE
Amytis of Media
Babylon
Berossus
Diodorus Siculus
Euphrates River
Herodotus
Iraq
Nebuchadnezzar II
Seven Wonders of the Ancient World
Strabo
arched substructure
artificial mountain
botanical collection
brick
debated
elaborate irrigation system
exotic trees
flower gardens
hydraulic system
layered terraces
neobabylonian Dynasty
ornamental shrubs
pleasure garden
royal retreat
scant
terraced garden
unknown
wonder

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1750 BC
1754 BC
1901
2.25 meters
282 laws
Akkadian language
Assyrian law
Assyriology
Babylon
Babylonia
Babylonian
Code of Lipit-Ishtar
Code of Ur-Nammu
French archaeological expedition
Gustave Jéquier
Hammurabi
Hebrew law
Hittite laws
Laws of Eshnunna
Louvre Museum
Mesopotamia
Old Babylonian period
Susa
UNESCO Memory of the World
adoption
ancient Near Eastern studies
animal husbandry
awilum
bas-relief of Hammurabi
black diorite
blessings for future rulers
building construction standards
burden of proof
civil law
commercial law
contracts
criminal law
cuneiform script
curses for those who alter laws
death penalty
debt slavery
describes Hammurabi's achievements
diorite stele
displayed at Louvre since 1902
divine authority
divorce
establish justice
eye for an eye
family law
flood control

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
1988
2021
30 to 40 companies
40 major German companies
9:00–17:30 CET
Airbus
Allianz
BASF
BMW
DAX 30 Index
Daimler Truck
Deutsche Bank
Deutsche Börse
Deutsche Telekom
E.ON
Frankfurt Stock Exchange
German stock market
Germany
Mercedes-Benz Group
RWE
SAP
Siemens
Volkswagen
free-float market capitalization
market capitalization
quarterly
stock market index
trading volume

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
2007
2019
22 minutes
279
Amy Farrah Fowler
Barenaked Ladies
Bernadette Rostenkowski
Bill Prady
CBS
California
Caltech
Chuck Lorre
Emmy Award
English
Howard Wolowitz
Jim Parsons
Johnny Galecki
Kaley Cuoco
Kunal Nayyar
Leonard Hofstadter
Los Angeles
May 16, 2019
Mayim Bialik
Melissa Rauch
Pasadena, California
Penny
Rajesh Koothrappali
Sheldon Cooper
Simon Helberg
TBS
Warner Bros. Television
Young Sheldon
apartment building
astrophysicist
engineer
friendship
geek culture
highest-rated comedy series
multi-camera
physicist
science
sitcom
television
television series
university
waitress

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1855
1899
1917
1925
Assur
Babylon
Berlin
Berlin Institute of Technology
Blankenburg
German
German Oriental Society
Greece
Iraq
Ishtar Gate
Italy
Nineveh
Royal Museums of Berlin
The Excavations at Babylon
Turkey
advancement of Near Eastern archaeology
archaeologist
archaeology
architect
architecture
discovery of the Ishtar Gate
early 20th century
excavation of Babylon
late 19th century
reconstruction of ancient Babylonian architecture
stratigraphic excavation

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1915
3-4 million
612 BCE
Akitu
Akkadians
Ancient Assyrians
Aramaic
Arameans
Ashur
Ashurbanipal
Assur
Assyrian Academic Society
Assyrian Church of the East
Assyrian Democratic Organization
Assyrian Empire
Assyrian Museum
Assyrian National Archive
Assyrian Star
Assyrian Universal Alliance
Assyrian Youth Federation
Assyrian architecture
Assyrian calendar
Assyrian costume
Assyrian cuisine
Assyrian cultural centers
Assyrian flag
Assyrian folk dance
Assyrian genocide
Assyrian homeland
Assyrian language schools
Assyrian music
Assyrian national anthem
Assyrian reliefs
Assyrian rights advocacy
Assyrian sports clubs
Australia
Babylonians
Bahra Magazine
Chaldean Catholic Church
Christianity
Dur-Sharrukin
Ephrem the Syrian
Epic of Gilgamesh
Esarhaddon
Germany
Gilgamesh
Iran
Iraq
Ishtar
Kha b-Nisan

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
704-681 BCE
Akkadian
Assyrian king
Babylon
Babylonia
Babylonian campaign
Bible
Book of Chronicles
Book of Isaiah
Book of Kings
Elamites
Esarhaddon
Jerusalem
Judah
Lachish reliefs
Levant
Neo-Assyrian ruler
Nineveh
Phoenicia
Sargon II
Sargonid dynasty
Sennacherib's Annals
Southwest Palace at Nineveh
Taylor Prism
aqueduct at Jerwan
conquest of Lachish
his sons
monarch
siege of Jerusalem

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
early law codes
lunar calendar
mathematics
trade
ziggurats
zodiac

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1754 BC
1901
2.25 meters
282
Akkadian language
Ancient Near East
Babylon
Babylonian Empire
Gustave Jéquier
Hammurabi
Hammurabi and Shamash
Louvre Museum
Sumerian law
Susa
ancient Mesopotamian law
black diorite
casuistic law
civil law
commercial law
contracts
criminal law
cuneiform
diorite stele
eye for an eye
inheritance
justification by gods
key ancient legal document
legal code
lex talionis
marriage and family law
one of earliest legal codes
property rights
slavery
vertical columns
well-preserved

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
32
323 BC
336 BC
356 BC
Alexander IV
Alexander Romance
Alexandria
Alexandria Eschate
Alexandria in Arachosia
Alexandria in Egypt
Alexandria on the Indus
Anatolia
Aristotle
Arrian
Babylon
Battle of Gaugamela
Battle of Issus
Battle of the Granicus
Battle of the Hydaspes
Bucephala
Bucephalus
Classical antiquity
Companion cavalry
Craterus
Darius III
Diadochi kingdoms
Diodorus Siculus
Egypt
Greece to India
Greek culture
Hegemon of the Hellenic League
Hellenistic civilization
Hellenistic period
Hephaestion
Indian campaign
King Porus
King of Macedon
Levant
Lord of Asia
Macedonia
Macedonian phalanx
Mesopotamia
Mieza
Olympias
Oracle of Siwa
Parmenion
Parysatis
Pella
Persian Empire
Persian campaign

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Neil deGrasse Tyson
Netflix
Pasadena, California
Penny
People's Choice Award
Primetime Emmy Award
Raj Koothrappali
Reggie Lee
Riki Lindhome
Sara Gilbert
Sheldon Cooper
Simon Helberg
Stan Lee
Stephen Hawking
Teen Choice Award
Warner Bros. Television
Warner Bros. Television Distribution
Wil Wheaton
Young Sheldon
comic books
friendship
geek culture
multi-camera
romance
science
scientific concepts
sitcom
stereo
television series
video games

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
14 meters
1902
1930
575 BCE
Adad (bull)
Akitu festival
Babylon
Berlin
Germany
Iraq
Ishtar
Marduk (dragon)
Mesopotamian architecture
Nebuchadnezzar
Nebuchadnezzar II
Neo-Babylonian
Pergamon Museum
Processional Way
Robert Koldewey
Walls of Babylon
archaic crenellations
arched opening
baked brick groundwork
blue glazed bricks
bulls
city gate
cuneiform tablets
dark blue
dedication cuneiform
dragons
entrance route
excavation authority
goddess of love and war
largest exhibit portal
monumental mud brick
north
ruined 4th century BCE

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
suffix conjugation
three cases
three numbers
two genders
universities worldwide

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
530 BC
559 BC
Achaemenid Empire
Babylon
Babylonians
Bardiya
Battle of Opis
Bible
Cambyses I
Cambyses II
Croesus
Cyrus Cylinder
King of Kings
Kurush
Lydia
Lydian Empire
Mandane of Media
Median Empire
Messiah
Neo-Babylonian Empire
Pasargadae
Persian
Persian Empire
Sardis
Susa
Tomb of Cyrus the Great
circa 600 BC
founder
government systems
grand prince
king
military leader
public works
religion
religious tolerance
royal road system

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
inspired modern gardens
limited
literature
location
mud brick
reminder of homeland
royal pleasure garden
ruins
screw pumps
stone
subject of artistic works
symbol of power
terraced gardens
theme parks
tiered structure
tourist attraction
various interpretations
video games

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2800 kilometers
356 cubic meters per second
500000 square kilometers
Akkad
Assyria
Atatürk Dam
Babylon
Balikh River
Bible
Birecik
Deir ez-Zor
Eastern Turkey
Ebla
Epic of Gilgamesh
Euphrates-Tigris basin agreements
Fallujah
Fertile Crescent
Haditha Dam
Herodotus
Iraq
Karasu River
Karbala
Khabur River
Mari
Mesopotamia
Mesopotamian Marshes
Middle East
Murat River
Najaf
Nasiriyah
Persian Gulf
Pleistocene
Purattu
Quran
Ramadi
Raqqa
Shatt al-Arab
Sumer
Syria
Syrian Desert
Tabqa Dam
Tigris River
Turkey
Uruk
agriculture
ancient
ancient Greek literature
ancient Roman literature
ancient irrigation systems
ancient mythology

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
43 years
562 BC
587 BC
605 BC
Akkadian
Amel-Marduk
Amytis of Media
Babylon
Babylonian religion
Battle of Carchemish
Book of Daniel
Book of Jeremiah
Book of Kings
Chaldean dynasty
Egypt
Esagila
Etemenanki ziggurat
First Temple
Hanging Gardens of Babylon
Hebrew Bible
Ishtar Gate
Jerusalem
Judahite prophecy
Judeans to Babylon
King of Babylon
Kingdom of Judah
Marduk
Mesopotamia
Nabopolassar
Nebuchadnezzar cylinder
Neo-Babylonian Empire
conquest of Judah
king
largest city of ancient world

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
27
39
66
Adam
Ancient Israel
Apocalypse
Aramaic
Catholicism
Christianity
Creation
David
Eve
Exodus
Genesis
God
Gospels
Greek word biblia
Hebrew
Jesus Christ
John
Judaism
Koine Greek
Luke
Mark
Matthew
Middle East
Moses
New Testament
Old Testament
Orthodox Christianity
Paul
Protestantism
Psalms
Renaissance
Solomon
Ten Commandments
Western art
Western law
Western literature
Western music
books
epistle
history
law
many centuries
over 700
poetry
prophecy
religious text
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+964
.iq
1932
1945
2003 invasion of Iraq
2007 AFC Asian Cup champions
438,317 square kilometers
Abdul Latif Rashid
Akkad
Arab League
Arabia Standard Time
Arabic
Arabs
Arba'een
Ashur
Ashura
Asia
Assyria
Assyrians
Babylon
Baghdad
Basra
Battle of Karbala
Ctesiphon
Eid al-Adha
Eid al-Fitr
Epic of Gilgamesh
Erbil
Erbil Citadel
Euphrates
Gulf War
Hammurabi
Hanging Gardens of Babylon
Hatra
Iran
Iran-Iraq War
Iraq War
Iraq national football team
Iraqi cuisine
Iraqi dinar
Islam
Jordan
Kadhimiya
Karbala
Kurdish
Kurdistan Region
Kurds
Kuwait
Mawtini
Mesopotamia

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
18th century BCE
6th century BCE
Achaemenid Empire
Akkadian
Amorites
Assyria
Babylon
Babylon ruins
Babylonian astronomy
Babylonian captivity
Babylonian mathematics
Code of Hammurabi
Elam
Etemenanki
Euphrates
Hammurabi
Hanging Gardens of Babylon
Hittites
Iraq
Ishtar
Ishtar Gate
Judah
Kassites
Marduk
Mesopotamia
Nebuchadnezzar II
Neo-Babylonian Empire
Old Babylonian Empire
Shamash
Sin
Sumu-abum
Tigris
Tower of Babel
ancient civilization
base-60 number system
construction of Ishtar Gate
cuneiform
cuneiform scribes
dates
fall of Babylon
grains
patriarchal
polytheistic
sexagesimal system
textiles
zodiac

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
successful conqueror
succession arrangement
trade routes
tribute
vassal treaties

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
15th century
5th century BCE
6th century BCE
Aegean Sea
Ancient Egypt
Ancient Greece
Ancient Greek
Ancient Near East
Babylonian customs
Battle of Marathon
Battle of Plataea
Battle of Salamis
Battle of Thermopylae
Cambyses II
Croesus of Lydia
Cyrus the Great
Darius I
East-West conflict
Egyptian customs
Father of History
Father of Lies
Greco-Persian Wars
Greco-Persian relations
Greek freedom
Greek worldview
Hellespont
Herodotus
Ionian Revolt
Ionic dialect
Latin
Leonidas I
Miltiades
Nile River
Pausanias
Persian Empire
Persian customs
Persian imperialism
Persian invasion of Greece
Persian perspective
Roman historians
Scythian customs
Themistocles
Thucydides
Western canon
Xerxes I
academically studied
ancient Greek literature
ancient history
anecdotes
archaeological research

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Airbus

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Allianz

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: BASF

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: BMW

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: DAX 30 Index

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Daimler Truck

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Bank

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Börse

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Deutsche Telekom

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: E.ON

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Frankfurt Stock Exchange

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Germany

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Mercedes-Benz Group

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: RWE

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: SAP

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Siemens

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Volkswagen

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1901
282 laws
Akkad
Akkadian language
Ancient Near East
Babylon
Babylonia
Babylonian Empire
Babylonian ruler
Bronze Age
Code of Hammurabi
Eshnunna
First Babylonian Dynasty
Ibal-pi-el II
Larsa
Louvre Museum
Mari
Mesopotamia
Mesopotamian religion
Rim-Sin I
Samsu-iluna
Shamash
Sin-Muballit
Sumer
Susa
Zimri-Lim
ancient jurisprudence
awilum
biblical studies
case law
cuneiform
cuneiform tablets
diorite stele
early law code
eye for an eye principle
irrigation projects
king
later legal systems
lex talionis
mushkenum
proportional justice
receiving laws from Shamash
temple construction
unified Mesopotamia
wardum

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1595 BC
1764 BC
1894 BC
539 BC
597 BC
612 BC
626 BC
Achaemenid Empire
Akkadian
Akkadian Empire
Amorite dynasty
Babylon
Babylonian astronomy
Babylonian captivity
Babylonian mythology
Battle of Carchemish
Bronze Age
Chaldeans
Code of Hammurabi
Cyrus the Great
Euphrates
Hammurabi
Hanging Gardens of Babylon
Iraq
Iron Age
Ishtar
Ishtar Gate
Kingdom of Judah
Marduk
Mesopotamia
Mesopotamian empires
Nabopolassar
Nebuchadnezzar I
Nebuchadnezzar II
Sumer
Tigris
ancient civilization
cuneiform
empire
mushkenu
nobles and priests
sexagesimal system
wardum
ziggurat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Aarti Mann

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Adam West

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Alice Amter

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Amy Farrah Fowler

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bernadette Rostenkowski

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bill Nye

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bill Prady

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Brent Spiner

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Brian George

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bob Newhart

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: CBS

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: California

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Brian Posehn

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: California Institute of Technology

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Christine Baranski

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Chuck Lorre

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Courtney Henggeler

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Carrie Fisher

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Critics' Choice Television Award

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Chuck Lorre Productions

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
60
Akkadian
Ancient Egypt
Ancient Greece
Ancient Greek
Anu
Ashurbanipal
Assur
Assyrian
Babylon
Babylonian
Bronze Age
Enlil
Epic of Gilgamesh
Euphrates River
Fertile Crescent
Hammurabi
Hammurabi's Code
Inanna
Iran
Iraq
Nebuchadnezzar II
Nineveh
Nippur
Persian Empire
Sargon of Akkad
Sumerian
Syria
Tigris River
Turkey
Ur
Uruk
ancient civilization
architecture
astronomy
barley
between rivers
calendar
cattle
cities
code of laws
commoners
cuneiform script
dates
epic poetry
flax
goats
historical region
irrigation
literature

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
billions of people
centuries
chapters
churches
common expressions
covenant
digital
epistles
historical criticism
historical narratives
kingdom of God
law
legal documents
literature
miracles of Jesus
moral teachings
multiple authors
music
other languages
parables of Jesus
people
personal devotion
places
poetry
political speeches
print
prophecies
prophecy
redemption
religious doctrine
religious education
religious text
sacred scripture
salvation
textual criticism
theologians
theology
verses
wisdom literature
world
world literature
worship services
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Amy Farrah Fowler

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Barenaked Ladies

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bernadette Rostenkowski

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Bill Prady

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: CBS

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: California

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Caltech

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Chuck Lorre

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Emmy Award

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Howard Wolowitz

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Johnny Galecki

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Jim Parsons

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Kaley Cuoco

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Leonard Hofstadter

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Kunal Nayyar

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Los Angeles

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Mayim Bialik

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Melissa Rauch

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Penny

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/ICL/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}

Now, given the subject below, produce a JSON list of (subject, predicate, object) triples:
{
  "triples": [
    { "subject": "...", "predicate": "...", "object": "..." }
  ]
}

Subject: Pasadena, California

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2000
2016
2020
2045
Czech Republic
E.ON Czech Republic
E.ON Hungária
E.ON Sverige
E.ON UK
EOAN
Essen
Frankfurt Stock Exchange
Germany
Hungary
Innogy
PreussenElektra
Romania
Slovakia
Sweden
Uniper
United Kingdom
VEBA
VIAG
billions of euros
biomass
customer solutions
electricity distribution
electricity generation
energy
energy company
energy networks
energy retail
energy trading
energy transition
gas distribution
gigawatts
hydroelectric power
millions of customers
over 70000
renewable energy
solar power
thousands of kilometers
wind power
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Library of Ashurbanipal
Mar Addai
Mar Mari
Marduk
Medes
Mesopotamia
Middle Assyrian Laws
Middle Assyrian Period
Narsai
Neo-Assyrian Empire
Nimrud
Nineveh
Old Assyrian Period
Ottoman Empire
Peshitta
Sennacherib
Shalmaneser III
Star of Shamash
Sweden
Syria
Syriac
Syriac Christianity
Syriac Orthodox Church
Tiglath-Pileser III
Turkey
UNPO member
United States
agriculture
aqueducts
astronomy
cavalry
cuneiform
ethnic group
irrigation
lamassu
mathematics
metals
siege warfare
textiles
trade
winged sun

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1&1
1995
1996
Bonn
Central and Eastern Europe
DTE
Deutsche Bundespost
Europe
FC Bayern Munich
Federal Network Agency
Frankfurt Stock Exchange
German government
German national football team
Germany
IT services
Magenta
Magenta Telekom
T-Mobile
T-Mobile US
T-Systems
Telefónica
Timotheus Höttges
United States
Vodafone
active in Germany
approximately 30%
component
digital inclusion
digital transformation
environmental sustainability
expanding across Germany
fixed-line telecommunications
internet services
magenta
millions worldwide
mobile telecommunications
multiple industry recognitions
offers through T-Systems
operates multiple
over 100 billion euros
over 20 million
over 200 million
over 200,000
telecommunications
telecommunications company
telecommunications research

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1993
360T
Aktiengesellschaft
BaFin
Clearstream
DAX
DB1
Deutsche Börse Group
ETFs
Eurex
Eurex Clearing
Euronext
Frankfurt
Frankfurt Stock Exchange
Germany
International Securities Exchange
London Stock Exchange
MDAX
NASDAQ
NYSE
SDAX
TecDAX
Xetra trading platform
banks
bonds
brokerage firms
business days
clearing services
commodities
derivatives
electronic
equities
executive board
financial institutions
financial services
high
large
market data
numerous
settlement services
shareholders
stock exchange
supervisory board
trading fees
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1913
5th century BCE
6th century BCE
7
7th century BCE
91 meters
91 meters square
Akitu festival
Alexander the Great
Babylon
Babylonian
Babylonian art
Babylonian chronicles
Babylonian civilization
Babylonian creation myths
Babylonian empire
Babylonian science
Babylonian texts
Ctesias
Enuma Elish
Esagila temple complex
Euphrates River valley
Greek historians
Hellenistic temple architecture
Herodotus
Iraq
Marduk
Mesopotamia
Mesopotamian polytheism
Mesopotamian studies
Mesopotamian temple architecture
Nabopolassar
Nebuchadnezzar II
Neo-Babylonian Empire
Neo-Babylonian period
Neo-Babylonian renaissance
New Year festival
Robert Koldewey
Strabo
Sumerian ziggurats
Tell Amran ibn Ali
Tower of Babel
Xerxes I
administrative center
ancient Near East
ancient Near Eastern architecture
ancient Near Eastern religion
ancient engineering
ancient world monument
ancient world wonders

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
fully translated
influenced Western legal thought
influenced later legal systems
inheritance
irrigation
key source for Babylonian society
labor law
laws given by god Shamash
legal code
legal history
lex talionis
liability
marriage
medical malpractice
monetary compensation
mushkenum
oldest deciphered legal code
physical mutilation
presumption of innocence
prevent strong from oppressing weak
prices
property rights
receiving laws from Shamash
referenced in legal education
slavery
studied by ancient historians
studied by archaeologists
studied by legal historians
symbol of ancient law
throughout Babylonian empire
wages
wardum
well-preserved
wet nursing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1993
2000
2005
2007
2017
360T
BaFin
Clearstream
DAX
DB1
ETFs
Eurex
Eurex Clearing
Euro
Euro Stoxx 50
Euronext
European Central Bank
European business hours
Frankfurt
Frankfurt Stock Exchange
Germany
International Securities Exchange
London Stock Exchange Group
MDAX
Nasdaq
Stoxx
T7
TecDAX
Xetra trading platform
bonds
clearing
clearing fees
custody
derivatives
equities
financial services
financial services company
large cap
market data
market data sales
over 10000
settlement
stock exchange operator
trading
trading fees

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1870
1999
85000
Adelbert Delbrück
BaFin
Bankers Trust
Christian Sewing
DWS Group
Deutsche Bank AG
European Central Bank
Frankfurt
Frankfurt Stock Exchange
Germany
Ludwig Bamberger
Postbank
asset management
corporate banking
global
investment banking
multinational investment bank
private banking

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1863
1912
1951
2006
2018
Aleve
Alka-Seltzer
Aspirin
BAYN
Barmen
Bayer 04 Leverkusen
Bayer Animal Health
Bayer Consumer Health
Bayer CropScience
Bayer Cross
Claritin
Consumer Health
Coppertone
Crop Science
Dr. Scholl's
Frankfurt Stock Exchange
Friedrich Bayer
Germany
Heroin
IG Farben
Johann Friedrich Weskott
Leverkusen
Miralax
Monsanto
One A Day vitamins
Pharmaceuticals
Schering
animal health products
biotechnology
blue
cardiology
chemicals
climate protection
consumer healthcare products
crop protection products
food security
football club
green
multinational corporation
oncology
ophthalmology
over 100,000
over 50 billion euros
over 80 countries
pharmaceutical company

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
15 seconds
1988
2021
30
40
Adidas
Allianz
BASF
BMW
Bayer
Börsen-Zeitung index
CAC 40
DAX
DAX indices
DE0008469008
Deutsche Bank
Deutsche Börse
Deutscher Aktienindex
Dow Jones Industrial Average
Eurex
Euro
European Central Bank policies
European Securities and Markets Authority
FTSE 100
Frankfurt Stock Exchange
German economic performance
German economy
Germany
MDAX
Mercedes-Benz Group
SAP
SDAX
STOXX Europe 600
Siemens
TecDAX
Volkswagen
automotive
chemicals
consumer goods
energy
finance
free-float market capitalization
futures
global market trends
healthcare
industrial
major European index
market capitalization
options

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
American
Howard Wolowitz
Melissa Rauch
The Big Bang Theory
female person
fictional character
microbiologist
pharmaceutical company

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1937
2015
German Labor Front
Germany
VOW3
Volkswagen Beetle
Volkswagen Golf
Volkswagen Group
Volkswagen ID.3
Volkswagen ID.4
Volkswagen Passat
Volkswagen Passenger Cars
Wolfsburg
automobile manufacturer
automotive
commercial vehicles
large
over 250 billion euros
over 600000
passenger cars

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1993
BaFin
Berlin Stock Exchange
Clearstream
DAX
Deutsche Börse AG
Eurex
Eurex Clearing
Euro
Euronext
Europe
Financial services
Frankfurt
Frankfurt Stock Exchange
Germany
London Stock Exchange Group
Trade Republic
Xetra
stock exchange

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
wisdom literature

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Pharaoh of Egypt
Philip II of Macedon
Philip III Arrhidaeus
Plutarch
Ptolemy
Quintus Curtius Rufus
Roxana
Seleucus
Shahanshah of Persia
Siege of Tyre
Son of Zeus
Stateira
ancient art
ancient historians
ancient world
by Aristotle
changed course of history
combined arms
conquests
created one of largest empires
film
fusion of Greek and Eastern cultures
god
greatest military commanders
into India
king
later conquerors
legendary figure
literature
military commander
military genius
military leaders
military tactics
modern historians
multiple cultures
shock tactics
spread of Greek language
subsequent empires
television
through Asia Minor
through Mesopotamia
through Persia
uncertain
undefeated in battle
youthful achievements

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Mesopotamian Marshes
Middle East
Mohammed Shia' Al Sudani
Mosul
Najaf
Nebuchadnezzar II
Nowruz
OPEC
Organization of Islamic Cooperation
Saddam Hussein
Samarra
Samarra Archaeological City
Sargon of Akkad
Saudi Arabia
Shia Islam
Shia Islam holy sites
Sulaymaniyah
Sumer
Sunni Islam
Syria
Syrian Desert
The Ahwar of Southern Iraq
Tigris
Turkey
Turkmen
Umm Qasr
United Nations
University of Baghdad
University of Basra
University of Mosul
University of Sulaimani
Zagros Mountains
Ziggurat of Ur
astronomy
biryani
calendar
country
desert
dolma
eagle of Saladin
federal parliamentary republic
football
free and compulsory
kubba
masgouf
mathematics
natural gas
oil-based
over 40 million
petroleum

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2010
Bernadette Rostenkowski
Mayim Bialik
Penny
Sheldon Cooper
The Big Bang Theory
fan fiction
fictional character
highly intelligent and socially awkward
married to Sheldon Cooper
monkey brains
neurobiologist
neurobiology
other scientists at university

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
180+ countries
1972
400,000 customers
ABAP
Ariba
Claus Wellenreuther
Concur Technologies
Dietmar Hopp
ERP software
Frankfurt Stock Exchange
Germany
Hans-Werner Hector
Hasso Plattner
Klaus Tschira
Microsoft
Qualtrics
SAP
SAP Business One
SAP Business Suite
SAP Cloud Platform
SAP ERP
SAP S/4HANA
SuccessFactors
Walldorf
business applications
enterprise software
multinational software corporation
over 100,000 employees
public company
software company

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2002
Allianz supervision
Basel Committee on Banking Supervision
Bonn
Bundesanstalt für Finanzdienstleistungsaufsicht
Bundesaufsichtsamt für das Kreditwesen
Bundesaufsichtsamt für das Versicherungswesen
Bundesaufsichtsamt für den Wertpapierhandel
Commerzbank supervision
Deutsche Bank supervision
Deutsche Bundesbank
European Banking Authority
European Central Bank
European Insurance and Occupational Pensions Authority
European Securities and Markets Authority
European System of Financial Supervision
European banking union
Federal Financial Supervisory Authority
Federal Ministry of Finance
Financial Action Task Force
Frankfurt
German
German Banking Act
Germany
Insurance Supervision Act
International Association of Insurance Supervisors
International Organization of Securities Commissions
Munich Re supervision
Payment Services Supervision Act
Securities Trading Act
Single Resolution Board member
Wirecard scandal
annual reports
approximately 1,700 banks
approximately 2,700
approximately 6,000 financial services institutions
approximately 700 insurance companies
asset management
bafin.de
banking supervision
banks
combating money laundering
company register
conduct investigations
consumer information
consumer protection
cryptocurrency businesses
financial regulatory authority
financial services providers
financial stability

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
ancient texts
archaeology
arid
barbel
basin
bird species
carp
catfish
cradle of civilization
cultural heritage
date palms
declining
disputed
drinking water
drought
economic development
environmental studies
extensive
fish species
floodplain
high
historical sites
hydroelectric power
hydrology
increased temperatures
industrial
irrigation
military campaigns
modern
overuse
partially
political stability
pollution
poplar trees
precipitation
reduced flow
reeds
riparian
river
river cruises
salinization
semi-arid
snowmelt
spring floods
threatened
trade route
transboundary disputes
transportation
true
valley

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1988
30
9:00 AM to 5:30 PM CET
Deutsche Börse
Deutsche Börse Group
Deutscher Aktienindex
EURO STOXX 50
Euro
Europe
European Securities and Markets Authority
Frankfurt
Frankfurt Stock Exchange
Germany
Germany's benchmark stock index
STOXX Ltd
Xetra trading system
approximately 80% of German stock market
dax-indices.com
diversified
exchange-traded funds
free-float market capitalization
futures contracts
highly liquid
independent supervisory board
investment benchmarking
options contracts
performance of German blue-chip companies
quarterly
real-time
stock market index
tracking major German corporations

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
100000
2021
Asia
BharatBenz
DTG
Daimler AG
Daimler AG Truck Division
Daimler Truck North America
Europe
Frankfurt Stock Exchange
Freightliner
Fuso
Germany
India
Japan
Latin America
Martin Daum
Mercedes-Benz
Mercedes-Benz Group
Mitsubishi Fuso Truck and Bus Corporation
North America
Stuttgart
Thomas Built Buses
United States
Western Star
automotive
buses
commercial vehicles
electric trucks
global leader in commercial vehicles
hydrogen fuel cell vehicles
truck manufacturer
trucks
zero-emission vehicles

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
causes of Greco-Persian Wars
classical literature
classical studies
cultural differences
customs of various peoples
digressions
divine intervention
dreams
early historical writing
entire known world
ethnographic observations
ethnography
eyewitness accounts
first major historical work
foundation of Western historiography
freedom vs. despotism
geographical descriptions
geography of Africa
geography of Asia
geography of Europe
historical criticism
historical facts
historical reconstruction
historical work
historiography
history
human hubris
inquiry
later Greek historians
legendary material
medieval manuscripts
military tactics
modern languages
multiple copies
mythological elements
narrative history
nine books
omens
oracles
oral performance
oral traditions
political systems
public recitation
religious practices
rise of Persian Empire
source analysis
speeches
travel observations
understanding ancient world
widely read

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1847
311000
Africa
Asia
CEO
CT scanners
Europe
Frankfurt Stock Exchange
Germany
ICE high-speed trains
MRI machines
Munich
North America
Roland Busch
SIE
SINUMERIK
Siemens Digital Industries Software
Siemens Energy
Siemens Healthineers
Siemens Mobility
Transrapid maglev train
Werner von Siemens
automation technology
automotive industry
corporation
electronics
energy sector
engineering
first electric elevator
first electric street lighting
first pointer telegraph
industrial software
infrastructure sector
medical technology
multinational conglomerate
power generation equipment
rail vehicles
siemens.com
technology

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
110000
1865
78.6 billion euros
Agricultural Solutions
Asia
BAS
BASF SE
Chemicals
Ciba
Europe
Fortune Global 500
Frankfurt Stock Exchange
Friedrich Engelhorn
Germany
Haber-Bosch process
Industrial Solutions
Ludwigshafen
Martin Brudermüller
Materials
North America
Nutrition & Care
Shanghai
South America
Surface Technologies
We create chemistry
Wintershall Dea
blue
carbon neutral by 2050
catalysts
chemical company
chemical producers
chemicals
coatings
paint
performance products
pesticides
plastics
polymers
polyurethane
synthetic indigo

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1916
Audi
BMW
BMW 3 Series
BMW 5 Series
BMW 7 Series
BMW Design
BMW Financial Services
BMW Group Research and Innovation Centre
BMW M
BMW Motorrad
BMW X5
BMW i
BMW in motorsport
BMW.DE
Bavaria
Bavarian Motor Works
Bavarian flag colors
Bayerische Motoren Werke
DAX
Dingolfing plant
Germany
Gustav Otto
Karl Rapp
MINI
Mercedes-Benz
Munich
Rolls-Royce Motor Cars
Rover Group
Spartanburg plant
The Ultimate Driving Machine
aircraft engine manufacturer
aircraft engines
automobile manufacturer
iDrive infotainment system
luxury vehicles
motorcycles
over 140 countries
over 150 billion euros

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1995
Bonn
DAX index
DTE
Deutsche Bundespost
Deutsche Bundespost TELEKOM
Deutsche Telekom Capital Partners
Europe
Frankfurt Stock Exchange
German government
Germany
IPTV
T-Mobile
T-Mobile US
T-Systems
Telefónica
Timotheus Höttges
United States
Vodafone
euro
internet services
landline telephony
mobile communications
over 100 billion euros
over 200000
telecommunications
telecommunications company
true
world top telecommunications companies

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1898
2019
2023
Asia Pacific
E.ON
Essen
Europe
Frankfurt Stock Exchange
Germany
Innogy
North America
RWE
RWE Power
RWE Renewables
RWE Supply & Trading
Rheinisch-Westfälisches Elektrizitätswerk
Rheinisch-Westfälisches Elektrizitätswerk AG
Rheinische AG für Braunkohlenbergbau und Brikettfabrikation
United Kingdom
United States
carbon neutrality by 2040
conventional power generation
conventional to renewable energy
electric utility
electricity generation
energy company
energy trading
hydro
lignite
natural gas
nuclear power
offshore wind
onshore wind
over 10 gigawatts
over 19000
over 28 billion euros
over 70 gigawatts
renewable energy
renewable energy expansion
solar
utilities

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1.50
1980
Bachelor of Fine Arts
Batman: The Enemy Within
Batman: The Telltale Series
Bernadette Rostenkowski-Wolowitz
Flower
Harley Quinn
Jewish
Kath & Kim
Marlboro Township
Marymount Manhattan College
Ode to Joy
The Big Bang Theory
The Bronze
The Hot Flashes
The Laundromat
The Office
True Blood
United States
Winston Rauch
actress
comedian
voice actress

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
173
1980
2311 North Los Robles Avenue
Alfred Hofstadter
Apartment 4A
Beverly Hofstadter
California
California Institute of Technology
Eric Gablehauser
Howard Wolowitz
Johnny Galecki
Pasadena
Penny
Princeton University
Rajesh Koothrappali
Sheldon Cooper
Sweetie
The Big Bang Theory
The Hofstadter-Wolowitz Theorem
The Search for Gravitational Waves
Toyota Prius
experimental physicist
fictional character
particle physics
psychiatrist
quantum mechanics

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2011
American
Amy Farrah Fowler
Catholic
Cheesecake Factory
Halley Wolowitz
Howard Wolowitz
Melissa Rauch
Mike Rostenkowski
Mrs. Rostenkowski
Neil Michael Wolowitz
Pasadena, California
Penny Hofstadter
PhD in microbiology
Polish-American
The Big Bang Theory
The Big Bang Theory season 3
Zangen Pharmaceuticals
ambitious
brother
competitive
fictional character
high-pitched
higher than Howard
married to Howard Wolowitz
microbiologist
pharmaceutical researcher
short stature
sweet
waitress

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2000
DAX
E.ON SE
EOAN
Essen
Europe
European Union energy policy
European energy directives
Frankfurt Stock Exchange
Germany
Leonhard Birnbaum
Netherlands
Sweden
United Kingdom
VEBA
VIAG
billions of euros
business
customer satisfaction
decarbonization
economic conditions
economic development
electricity
energy company
energy efficiency
energy market competition
energy transition
for innovation
governments
millions
natural gas
other companies
over 70,000
power plants
regional energy supplier
regulators
renewable energy
residential
shareholders
smart grids
subsidiaries
sustainability
utilities

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
$100 million
1975-04-30
1987-present
1992-1997
3 People's Choice Awards
5'5"
8+ million Facebook followers
American
Bree, Belgium
Christmas Snow
David Healy
English
Entourage
Family Guy
Leonard Hofstadter
Polish-American
Roseanne
Teen Choice Award
The Big Bang Theory
The Glorious Ones
United States
X-Files movie
actor
dated Kaley Cuoco
high school diploma
keeps personal life private
motorcycle racing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1990s
2000s
2010s
2020s
CBS
Caroline in the City
Chuck Lorre
Dharma & Greg
Dream On
Gilmore Girls
People's Choice Award
Primetime Emmy Award
Steven Molaro
Television Critics Association Award
The Big Bang Theory
United States
University of Michigan
Warner Bros. Television
Writers Guild of America
Young Sheldon
comedy
drama
screenwriter
sitcom
television producer
television writer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2011
A&E
Best Actor in a Comedy Series
Best Actor in a Drama Series
Best Actress in a Comedy Series
Best Actress in a Drama Series
Best Animated Series
Best Comedy Series
Best Drama Series
Best Limited Series
Best Movie Made for Television
Best Reality Competition Series
Best Structured Reality Series
Best Talk Show
Best Unstructured Reality Series
Critics Choice Association
Critics' Choice Movie Award
The CW
United States
VH1
award
television critics
television excellence

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1960
ABC
American
American television writer
Baltimore
Brian Westphal
CBS
Caroline in the City
Chuck Lorre
Darla Leighton
Dharma & Greg
Dream On
Gilmore Girls
Humanitas Prize
Maryland
Primetime Emmy Award
Star Trek: Voyager
TCA Heritage Award
The Big Bang Theory
The Muppets
Towson University
Two and a Half Men
Writers Guild of America
Young Sheldon
screenwriter
television producer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1981
2004–present
2011
Business Administration
CBS
Gupta
Ice Age: Continental Drift
Indian
Jim Parsons
Johnny Galecki
Kaley Cuoco
Kunal Nayyar
London
Mayim Bialik
NCIS
Neha Kapur
New Delhi
Portland Actors Conservatory
Raj Koothrappali
Simon Helberg
Temple University
The Big Bang Theory
University of Portland
acting
actor
model
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1890
AA
ALV
AZSEY
Africa
Aktiengesellschaft
Allianz Arena
Allianz Global Investors
Allianz Versicherungs-AG
Allianz and Dresdner Bank
Asia
Australia
Carl von Thieme
DAX
English
Euro Stoxx 50
Europe
Formula E
Frankfurt Stock Exchange
German
Germany
Munich
North America
Olympic Games
PIMCO
South America
Standard & Poor's
Wilhelm Finck
allianz.com
asset management
casualty insurance
corporate clients
financial services company
health insurance
individual clients
insurance
insurance company
largest insurance company
life insurance
life-health insurance
over 100 million
over 150 billion euros
over 150,000
property insurance
property-casualty insurance

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1985-11-30
1992
2016
2018
8 Simple Rules
American
Camarillo, California
Cassie Bowden
Charmed
Critics' Choice Television Award
Golden Globe Award
Harley Quinn
Harley Quinn animated series
Jim Parsons
Johnny Galecki
Karl Cook
Los Angeles
Penny
People's Choice Award
Primetime Emmy Award
Prison Break
Ryan Sweeting
The Big Bang Theory
The Flight Attendant
Yes, Norman Productions
actor
equestrian sports

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1952
1984-present
ABC
Bethpage, New York
CBS
Charles Michael Levine
Chuck Lorre Productions
Cybill
Dharma & Greg
Grace Under Fire
Karen Witter
Los Angeles
Mike & Molly
Mom
The Big Bang Theory
The CW
The Kominsky Method
Two and a Half Men
United States
United States of Al
composer
during show credits
screenwriter
sitcom
television director
television producer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
16.6 trillion USD
19
1993
2004 enlargement
2007 enlargement
2012 Nobel Peace Prize
2013 enlargement
24
26
27
4.2 million km²
447 million
Albania
Austria
Belgium
Bosnia and Herzegovina
Brussels
Bulgaria
Charles Michel
Common Agricultural Policy
Common Fisheries Policy
Competition Policy
Comprehensive Economic and Trade Agreement
Council of the European Union
Croatia
Customs Union
Cyprus
Czech Republic
Denmark
EU-Japan Economic Partnership Agreement
Environmental Policy
Estonia
Euro
European Central Bank
European Coal and Steel Community
European Commission
European Council
European Court of Auditors
European Economic Community
European Health Insurance Card
European Parliament
European Union citizenship
European Union driving license
European Union passport
Finland
Foreign and Security Policy
France
Free movement of capital
Free movement of goods
Free movement of people

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
138699
15 kilometers from Los Angeles
1874
1886
263 meters
59.2 square kilometers
Armory Center for the Arts
ArtCenter College of Design
Brookside Park
California
California Institute of Technology
Colorado Boulevard
Colorado Street Bridge
Fuller Theological Seminary
Greater Los Angeles
Jet Propulsion Laboratory
Los Angeles County
Ludwigshafen, Germany
Mediterranean
Memorial Park
Metro Gold Line
Mishima, Japan
Norton Simon Museum
Old Pasadena
Pacific Asia Museum
Paramount Ranch
Pasadena City College
Pasadena City Hall
Pasadena Playhouse
Pasadena, Indiana
Rose Bowl Game
Rose Bowl Stadium
Tournament of Roses
Tournament of Roses Parade
United States
Vanadzor, Armenia
city
engineering technology
scientific research

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
08:00-22:00 CET
1585
60313
Allianz
BASF
BMW
BaFin
Bull and Bear statues
Börse Frankfurt
Börsenplatz 4
CET
DAX
DAX indices
Deutsche Börse
ETFs
EUR
English
Euro Stoxx 50
Euronext
Frankfurt
Frankfurt floor trading
German
Germany
London Stock Exchange
MDAX
SDAX
Siemens
TecDAX
Volkswagen
Xetra
bonds
certificates
fully electronic Xetra
high daily
largest in Germany
largest in continental Europe
member
one of world's largest
rebuilt after WWII
stock exchange
stocks
thousands
top 10 worldwide
warrants

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Bernadette Rostenkowski
Caltech
Debbie Wolowitz
Footprints on the Moon
French
Halley Wolowitz
I'm an engineer
International Space Station
Jewish
Leonard Hofstadter
MIT
Mandarin
Mars Rover
NASA
Neil Michael Wolowitz
Pasadena
Penny
Raj Koothrappali
Russian
Sheldon Cooper
Simon Helberg
The Big Bang Theory
aerospace engineer
astronaut
bangs
belt buckles
comic books
fictional character
keyboards
lives with mother
magic
robotics
scooter
short stature
tight shirts
video games
womanizer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
lunar calendar
mathematics
metals
mud bricks
multiple gods
nobles
priests
sheep
slaves
stones
timber
time measurement
wheat
wheel
writing
ziggurats

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1952
1974-present
1983
2
2014
Academy Award
Bachelor of Fine Arts
Bowfinger
Broadway
Buffalo
Chicago
Cybill
Diane Lockhart
Frasier
Golden Globe Award
Hurlyburly
Into the Woods
Juilliard School
Mamma Mia!
Mamma Mia! Here We Go Again
Mary Sunshine
Matthew Cowles
New York
Nick & Nora
Pocahontas
Polish-American
Primetime Emmy Award
Rumors
Screen Actors Guild Award
Tanya Chesham-Leigh
The Birdcage
The Good Fight
The Good Wife
The Grinch
The Real Thing
Tony Award
United States
actress

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1926
AMG performance brand
Asia
BMW Group
Beijing
Daimler AG
Daimler-Benz
Europe
Frankfurt Stock Exchange
German automotive industry
German company
Germany
Gottlieb Daimler
Karl Benz
MBG
Maybach luxury brand
Mercedes-Benz Buses division
Mercedes-Benz Cars division
Mercedes-Benz Group AG
Mercedes-Benz Mobility
Mercedes-Benz Trucks division
Mercedes-Benz Vans division
Mercedes-Benz brand
North America
Ola Källenius
Sindelfingen
Smart brand
Stuttgart, Germany
Toyota
Tuscaloosa
Volkswagen Group
Wilhelm Maybach
automotive
automotive engineering
automotive safety systems
buses
carbon neutrality goal
commercial vehicles
diesel-powered passenger car
first production automobile
luxury vehicles
multinational automotive corporation
over 150 billion euros
over 170,000
passenger cars
premium automotive manufacturer
trucks
vans
worldwide

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1970
1972
A400M Atlas
AIR
AS9100
Airbus A300
Airbus A320
Airbus A321XLR
Airbus A330
Airbus A350
Airbus A350F
Airbus A380
Airbus Atlantic
Airbus Defence and Space
Airbus Helicopters
Airbus Industrie
Alabama
Ariane rockets
Asian suppliers
Beijing
Boeing
Bombardier Aerospace
Broughton
China
CityAirbus NextGen
Delta Air Lines
Embraer
Emirates
Eurofighter Typhoon
Euronext Paris
European Aeronautic Defence and Space Company
European Union Aviation Safety Agency
European suppliers
Federal Aviation Administration
France
Frankfurt Stock Exchange
Galileo satellites
Germany
Guillaume Faury
H125
H135
H145
H160
Hamburg
ISO 9001
International Space Station modules
Leiden
Madrid Stock Exchange
Miami
Mobile

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1975-12-12
1988
1990-1995
2000
2007
2010-2019
2021-2023
American
Amy Farrah Fowler
Bachelor of Science
Beaches
Beyond the Sling
Blossom
Blossom Russo
CBS
California
Doctor of Philosophy
Jeopardy!
Judaism
Mayim Bialik's Breakdown
Mayim's Vegan Table
NBC
Neuroscience
People Magazine's Sexiest Vegan Celebrity
San Diego
The Big Bang Theory
United States
University of California, Los Angeles
actress
attachment parenting
neuroscience to general public
neuroscientist
obsessive-compulsive disorder
veganism
women in science

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
performance index
performance of German blue-chip companies
quarterly
stock market index
technology
telecommunications
trading volume

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1928
1954-2017
1966
1994
2012
2017
6
6'2"
ABC
Back to the Batcave
Bat-Signal tribute
Batman
Batman television series
Batman: The Movie
Bruce Wayne
Chicken Little
Family Guy
Futurama
Hollywood Walk of Fame star
Jeff Rovin
Johnny Bravo
Lake View Cemetery
Los Angeles
Marcelle Tagand Lear
Mayor Adam West
Mickey Mouse Clubhouse
Murphy Brown
Robinson Crusoe on Mars
Starring Adam West
The Big Bang Theory
The Detectives
The Detectives Starring Robert Taylor
The Fairly OddParents
The Last Precinct
The Simpsons
The Young Philadelphia
United States
United States Army
Walla Walla
Washington
Whitman College
William West Anderson
actor
blue
brown
generations of Batman actors
iconic portrayal of Batman
leukemia

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
124 acres
1891
Amos G. Throop
Beaver
California Institute of Technology
David Baltimore
Deep Space Network
Gordon Moore
Jet Propulsion Laboratory
Keck Observatory
Kip Thorne
LIGO
Linus Pauling
NASA
Palomar Observatory
Pasadena, California
Richard Feynman
Throop University
United States
approximately 2,200
approximately 900
astronomy
astrophysics
biology
chemistry
eight undergraduate houses
engineering
geological and planetary sciences
high
humanities and social sciences
important
large
low
main campus
multiple
orange and white
physics
private research university
quantum mechanics
quarter system
rigorous
science and engineering
scientific research
six academic divisions
top university
university

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1871
1990
357,022 square kilometers
83 million
Albert Einstein
Austria
BMW
Belgium
Berlin
Bonn
Brandenburg Gate
CET
Central European Time
Cologne
Cologne Cathedral
Czech Republic
Danube
Denmark
Elbe
Euro
Europe
European Union
Federal Chancellor
Federal President
France
Frankfurt
Friedrich Schiller
G7
German
Hamburg
Holy Roman Empire
Johann Sebastian Bach
Johann Wolfgang von Goethe
Ludwig van Beethoven
Luxembourg
Max Planck
Mercedes-Benz
Munich
NATO
Nazi Germany
Netherlands
Neuschwanstein Castle
Oktoberfest
Poland
Rhine
Siemens
Switzerland
United Nations
Volkswagen
Weimar Republic

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1978
2
2 Broke Girls
2004-present
2015
90210
Amanda LaRusso
American
Blue Bloods
Bones
CSI: Miami
California
Cobra Kai
Greek
Italian
Jessie
Kevin Can Wait
Law & Order: Special Victims Unit
Los Angeles
Married... with Children
Melissa & Joey
Missy
Mom
NCIS
New York University
Phillipsburg, New Jersey
Ross Kohn
Royal Pains
The Big Bang Theory
The Closer
The Following
The Good Fight
The Good Wife
The Hard Times of RJ Berger
The Mentalist
The Middle
The Suite Life on Deck
The Troop
The Vampire Diaries
True Jackson, VP
United States
Weeds
White Collar
acting
actress
iCarly

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1929
1960
1963
1972
1978
1990
4
Bernard
Billboard 200 number one
Bob
Bob Hartley
CBS
Catch-22
Dick Loudon
Elf
Ellen DeGeneres
Emmy Award
Grammy Award
Hollywood Walk of Fame star
Horrible Bosses
Jerry Seinfeld
Loyola University Chicago
Mark Twain Prize for American Humor
Newhart
Oak Park, Illinois
Professor Proton
Television Hall of Fame
The Big Bang Theory
The Bob Newhart Show
The Button-Down Mind of Bob Newhart
The Last Newhart
The Rescuers
The Simpsons
The Tonight Show Starring Johnny Carson
United States
United States Army
Virginia Quinn
accountant
actor
comedian
deadpan
innkeeper
one-sided telephone conversations
psychologist
stand-up comedy
television personality

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (17); stopping.
[crawler] finished in 169.9s → outputs in runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231623/batches
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2018
2019
American
Bernadette Rostenkowski
Bill Prady
Caltech
Chuck Lorre
Harvard University
Howard Wolowitz
Jewish
Leonard Hofstadter
Mayim Bialik
Mr. Fowler
Mrs. Fowler
Nobel Prize in Physiology or Medicine
Pasadena
Penny
PhD
Raj Koothrappali
Sheldon Cooper
The Big Bang Theory
Toyota Prius
Young Sheldon
academic
attachment theory
board games
conservative
fictional character
intelligent
logical
main cast member
married
neuroscience
neuroscientist
personal growth
primate behavior
reading
romantic development
scientific experiments
season 3
socially awkward
superfluid helium
supporting character
tea
television
unmentioned
video games

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[bench] OK: runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251029_231623
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1949
1970s-present
2022
American Dad!
Ben 10: Omniverse
Big River
Candy Alu
Data
Dreamland
Dude, Where's My Car?
Family Guy
Gates McFadden
Houston
Independence Day
Independence Day: Resurgence
Jewish
Jonathan Frakes
LeVar Burton
Lore
Loree McBride
Marina Sirtis
Michael Dorn
Noonien Soong
Ol' Yellow Eyes Is Back
Out to Sea
Patrick Stewart
Phenomenon
Saturn Award
Star Trek: First Contact
Star Trek: Insurrection
Star Trek: Nemesis
Star Trek: Picard
Star Trek: The Next Generation
Sunday in the Park with George
Texas
The Aviator
The Simpsons
The Three Musketeers
United States
University of Houston
Wil Wheaton
Young Justice
actor
comedy
drama
married
science fiction
singer
voice actor

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] output_dir: runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_231623
[crawler] seeded: ancient city of Babylon
[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "ancient city of Babylon"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
13
1988
1992
Adult Top 40
Andy Creeggan
Big Bang Theory
Big Bang Theory Theme Song
Brian Wilson
Bruce Cockburn
Canada
Ed Robertson
Europe
Gordon
If I Had $1000000
Jim Creeggan
Juno Award
Kevin Hearn
Last Summer on Earth
Lovers in a Dangerous Time
North America
One Week
Ontario
Pinch Me
Reprise Records
Rock Spectacle
Sarah McLachlan
Sire Records
Steven Page
The Brothers Creeggan
The Old Apartment
Toronto
Tragically Hip
Tyler Stewart
Vanity Project
alternative rock
band
bass
drums
guitar
keyboards
vocals

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1850
Arizona
CA
California Courts of Appeal
California Gold Rush
California Republic
California grizzly bear
California poppy
California quail
California redwood
Channel Islands National Park
Chumash
Death Valley
Francis Drake
Golden State
Hollywood
Juan Rodríguez Cabrillo
Kings Canyon National Park
Lassen Volcanic National Park
Los Angeles
Maidu
Mexico
Miwok
Mount Whitney
Nevada
Oregon
Pacific Ocean
Redwood National and State Parks
Sacramento
San Andreas Fault
San Diego
San Francisco
San Jose
Sequoia National Park
Silicon Valley
Spain
Spanish colonization period
United States
University of California, Berkeley
University of California, Los Angeles
University of California, San Diego
University of California, San Francisco
West Coast of the United States
Yosemite National Park
agriculture
entertainment industry
largest in the United States
liberal
most populous US state
state

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+49
.de
1871
1990
3
357,022 km²
4
83 million
Adidas
Albert Einstein
Albrecht Dürer
Austria
BASF
BMW
Belgium
Berlin
Bosch
Brandenburg Gate
Caspar David Friedrich
Central European Time
Christmas markets
Cologne
Cologne Cathedral
Czech Republic
Danube
Denmark
East Germany
Elbe
Euro
Europe
European Union
Fall of the Berlin Wall
Federal Chancellor
Federal President
France
Frankfurt
Friedrich Nietzsche
Friedrich Schiller
G20
G7
Georg Wilhelm Friedrich Hegel
German
German Empire
German cuisine
German reunification
Germany national football team
Günter Grass
Hamburg
Heidelberg Castle
Hermann Hesse

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
pharmaceutical drugs
pharmaceuticals
polycarbonate
polyurethane
resource efficiency
synthetic rubber
women's healthcare

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
archaeological excavations
astronomical heritage
astronomical observations
astronomical observatory
astronomical records
baked brick
baked brick facing
biblical inspiration
biblical traditions
bitumen
blue
blue glazed brick
building inscriptions
buttressed walls
cardinal directions
celestial observations
center of Babylonian cosmology
ceramic typology
connecting earth to heaven
cuneiform texts
decades
drainage systems
earlier ziggurats
east-west axis
education center
fertile crescent
glazed bricks
hanging gardens nearby
high priest rituals
imperial propaganda
imperial symbolism
imported timber
key Neo-Babylonian site
king's religious duties
largest ziggurat in Babylon
later Mesopotamian temples
local clay
mathematical calculations
monumental architecture
mud brick
partially excavated
post-Assyrian period
ramp construction
religious ceremonies
religious symbols
ruins
shrine
spiral
stepped
stepped pyramid design

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1927
60 Minutes
All in the Family
CBS Evening News
CBS Publishing Group
CBS Radio
CBS eye
CSI: Crime Scene Investigation
Cheers
Columbia Broadcasting System
Columbia Records
Dan Rather
Edward R. Murrow
Face the Nation
Gunsmoke
I Love Lucy
M*A*S*H
Mike Wallace
Murder, She Wrote
NCIS
NFL on CBS
New York City
PGA Championship
Paramount Global
Paramount+
SEC on CBS
See It On CBS
Showtime
Survivor
The Big Bang Theory
The Bold and the Beautiful
The CW
The Honeymooners
The Mary Tyler Moore Show
The Masters Tournament
The Price Is Right
The Twilight Zone
The Young and the Restless
United Independent Broadcasters
United States
Walter Cronkite
William S. Paley
broadcast television network
network affiliates
network owned-and-operated
radio network
television network

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
131,000 employees
1970
1972
A220
A300
A310
A320
A320 family
A330
A340
A350
A380
AIR
Air France
Airbus Commercial Aircraft
Airbus Defence and Space
Airbus Group
Airbus Helicopters
Airbus Industrie
Airbus SE
Aérospatiale
Boeing
Boeing-Airbus dispute
British Airways
CASA
China
Deutsche Airbus
Emirates
Euronext
European aerospace
European launch aid
France
Germany
Lufthansa
Singapore Airlines
Spain
Toulouse
United Kingdom
United States
aerospace corporation
aircraft sales
climate neutrality
commercial aircraft
common cockpit
contracts
dual leadership structure
fly-by-wire
global
helicopters
industry standards

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1949
4D
ADS
Adidas Campus
Adidas Copa Mundial
Adidas Gazelle
Adidas NEO
Adidas NMD
Adidas Originals
Adidas Performance
Adidas Predator
Adidas Samba
Adidas Stan Smith
Adidas Superstar
Adidas Tango
Adidas Ultraboost
Adidas Yeezy
Adolf Dassler
All in for my city
Americas
Argentina national football team
Arsenal
Asia
Belgium national football team
Beyoncé
Bjørn Gulden
Boost
ClimaCool
ClimaLite
Create the new
Damian Lillard
Derrick Rose
Europe
FC Bayern Munich
FIFA World Cup
ForMotion
Formotion
Frankfurt Stock Exchange
Gazelle shoes
Gebrüder Dassler Schuhfabrik
Germany
Germany national football team
Herzogenaurach
Impossible is Nothing
James Harden
Juventus
Kanye West
Lionel Messi
Manchester United
Mohamed Salah

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
124 acres
1891
39
4
6
Amos G. Throop
Association of American Universities
Beaver
Biology and Biological Engineering
California
Caltech
Chemistry and Chemical Engineering
Ditch Day
Engineering and Applied Science
Frank Capra
Geological and Planetary Sciences
Gordon Moore
Humanities and Social Sciences
Jet Propulsion Laboratory
Kip Thorne
LIGO
Linus Pauling
Massachusetts Institute of Technology
Millikan pumpkin drop
Murray Gell-Mann
NASA
NASA projects
NCAA Division III
Owens Valley Radio Observatory
Palomar Observatory
Pasadena
Physics, Mathematics and Astronomy
Richard Feynman
Robert Millikan
Seismological Laboratory
Southern California Intercollegiate Athletic Conference
The truth shall make you free
Theodore von Kármán
Thomas F. Rosenbaum
United States
University of California system
approximately 1300
approximately 300
approximately 900
engineering
gravitational waves
high
house system
large
orange

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1940s
1949
ABC
Academy Awards
Academy of Television Arts & Sciences
CBS
Daytime Emmy Awards
EGOT
Fox
Grammy Awards
Immy
International Emmy Awards
Los Angeles
Louis McManus
NBC
News & Documentary Emmy Awards
Outstanding Comedy Series
Outstanding Drama Series
Outstanding Lead Actor
Outstanding Lead Actress
Primetime Emmy Awards
Primetime Emmy Awards ceremony
Saturday Night Live
Sports Emmy Awards
Technology & Engineering Emmy Awards
Tony Awards
United States
acting
annual
audio and visual industries
award
comedy
directing
documentary
drama
excellence in television
industry professionals
limited series
multiple ceremonies per year
news
peer voting
performance
producing
reality television
regional Emmy Awards
sports
technical achievement
technical fields
television award
television equivalent of Academy Awards

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
0.8228 USD
1 EUR = 1.1743 USD
1 cent
1 euro
1.5990 USD
10 cents
10 euros
100 cents
100 euros
1995
1999
2 cents
2 euros
20 cents
20 euros
200 euros
2002
5 cents
5 euros
50 cents
50 euros
500 euros
Alain Billiet
Andorra
Austria
Austrian Schilling
Belgian Franc
Belgium
Bulgaria
Christine Lagarde
Croatia
Cyprus
Czech Republic
Denmark
Deutsche Mark
Dutch Guilder
EUR
EUR/USD
Estonia
European Central Bank
European Currency Unit
European Stability Mechanism
European Union monetary system
European debt crisis
European single market
Eurozone
Finland
Finnish Markka
France
Frankfurt

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
phosphates
red, white, black, green
right
wheel
writing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Ἱστορίαι

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
variable
water scarcity
water sharing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
1988
30
846900
9:00 AM to 5:30 PM CET
Adidas
Airbus
Allianz
BASF
BMW
Bayer
Beiersdorf
Brenntag
CAC 40
Continental
Covestro
DAX
DAX index family
DE0008469008
December 30, 1987
Delivery Hero
Deutsche Bank
Deutsche Börse
Deutsche Börse AG
Deutsche Lufthansa
Deutsche Post
Deutsche Telekom
Dow Jones Industrial Average
E.ON
ETFs
Eurex
Euro
FTSE 100
Frankfurt Stock Exchange
Fresenius
Fresenius Medical Care
German Federal Financial Supervisory Authority
German blue-chip companies
German economic health
German economy
Germany
Hannover Rück
HeidelbergCement
Henkel
Infineon
Linde
MDAX
MTU Aero Engines
Mercedes-Benz Group
Merck

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
funded by supervised institutions
impose fines
insider list
insurance companies
insurance supervision
investment firms
issue warnings
license financial institutions
payment institutions
pension funds
prohibit business activities
prospectus register
securities supervision
securities trading
supervisory notices
terrorist financing prevention
warning lists
withdraw licenses

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1966
2004
25 Hours
3rd Rock from the Sun
6'6"
Adventure Time
American River College
Bob Odenkirk
Brian Spukowski
California
Cheech & Chong
David Cross
Fart and Wiener Jokes
Friends
George Carlin
Hugh Neutron
Jimmy Kimmel Live!
Just Shoot Me!
Late Night with Conan O'Brien
Live In: Nerd Rage
Melanie Truhett
Mighty Morphin Power Rangers
Monty Python
Mr. Show
Nerd Poker
New Girl
Officer Sacks
Posehn
Richard Pryor
Sacramento
Sacramento City College
Sarah Silverman
Scott Aukerman
Seinfeld
Skeeter
The Big Bang Theory
The Devil's Rejects
The Fartist
The Five-Year Engagement
The Legend of Korra
The Sarah Silverman Program
The Simpsons
The Tonight Show
Uncle Nick
United States
actor
alternative comedy
author
comedian
heavy metal

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1912
APP Pharmaceuticals
Aktiengesellschaft
Asia
Bad Homburg
Caring for Life
Cura Day Hospitals
EMA regulations
Eduard Fresenius
Europe
FDA regulations
FRE
Frankfurt
Frankfurt Stock Exchange
Fresenius Helios
Fresenius Kabi
Fresenius Medical Care
Fresenius Vamed
Germany
Good Manufacturing Practice
ISO standards
Latin America
Michael Sen
North America
Quirónsalud
Stephan Sturm
acquisitions
active
aging population
blue
brand recognition
chronic disease increase
chronic kidney disease
clinical nutrition
complex
comprehensive
corporate governance
critical care
critical illness
dialysis machines
dialysis products
education programs
environmental protection
essential healthcare
expansion focus
fresenius.com
geographic expansion
global
health initiatives
healthcare

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1865
Agricultural Solutions
Antwerp Verbund site
Asia
BAS
BASF Brazil
BASF China
BASF Corporation
BASF India
BASF Japan
BASF SE
Badische Anilin- und Soda-Fabrik
Bayer CropScience businesses
Carbon Management
Chemicals
Ciba Holding
Engelhard Corporation
Europe
Frankfurt Stock Exchange
Freeport Texas site
Friedrich Engelhorn
Germany
Haber-Bosch process
IG Farben
ISO 14001
ISO 9001
Industrial Solutions
Industry 4.0
Ludwigshafen
Ludwigshafen Verbund site
Materials
Mumbai
Nanjing Verbund site
North America
Nutrition & Care
OHSAS 18001
Shanghai
Solvay's polyamide business
South America
Surface Technologies
São Paulo
Tarrytown
Verbund system
Water Stewardship
World War I chemical production
World War II chemical production
agricultural solutions
agriculture
apprenticeship programs
artificial intelligence

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1
160
186
1973
2
2004
2007
2011
2012
2014
2015
2016
2017
2018
2019
2020
2024
24
4
900000
An Act of God
Aries
CBS
Elvis Has Left the Building
Garden State
God
Golden Globe Award
Harold
Hidden Figures
Home
Houston
James Joseph Parsons
Klein Oak High School
March
Master of Fine Arts
Oh
Paul Stafford
Primetime Emmy Award
Satellite Award
Saturday Night Live
Sheldon Cooper
Studio 54
Texas
That's Wonderful Productions
The Big Bang Theory
The Big Year
The Boys in the Band
The Castelluccio
Todd Spiewak
United States

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1781
1850
1984 Summer Olympics
1994
Academy Awards (Oscars)
August
Beverly Hills
California
City of Angels
December
Downtown Los Angeles
English
Getty Center
Glendale
Griffith Observatory
Hollywood
Hollywood Sign
Karen Bass
L.A.
Los Angeles Angels
Los Angeles Chargers
Los Angeles Clippers
Los Angeles County
Los Angeles Dodgers
Los Angeles International Airport (LAX)
Los Angeles Kings
Los Angeles Lakers
Los Angeles Metro Rail
Los Angeles Rams
Mayor-Council government
Mediterranean climate
NASA Jet Propulsion Laboratory development location
Pacific Ocean
Pacific Time Zone
Port of Los Angeles
San Andreas Fault
San Fernando Valley
Santa Monica
Santa Monica Bay
Southern California
The Broad
United States
University of California, Los Angeles (UCLA)
University of Southern California (USC)
Venice Beach
Walk of Fame
West Hollywood
city
contains hills and mountains
earthquakes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+49 69 211 0
12th largest stock exchange
1585
1945
1990s
1997
50.1153° N, 8.6769° E
60313
9:00 AM to 5:30 PM CET
BaFin
Bankenviertel
Börse Frankfurt Visitor Center
Börsenmuseum
Börsenplatz
Börsenplatz 4
CET
Clearstream
DAX
Deutsche Börse
ESG initiatives
ETFs
Euro
European financial system
Federation of European Securities Exchanges
Frankfurt
Frankfurter Wertpapierbörse
General Standard
German
German blue-chip companies
German economy
German public holidays
Germany
MDAX
Monday to Friday
Prime Standard
SDAX
Scale
TARGET2
TecDAX
World Federation of Exchanges
Xetra
academic research partnerships
advanced cybersecurity measures
advanced trading technology
available for groups
banks
boerse-frankfurt.de
bonds
brokerage firms
capital formation

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Free movement of services
G20
G7
Georgia
Germany
Greece
Hungary
Ireland
Italy
Justice and Home Affairs
Latvia
Lithuania
Luxembourg
Maastricht Treaty
Malta
Moldova
Montenegro
Multiannual Financial Framework
Netherlands
North Macedonia
Ode to Joy
Ordinary Legislative Procedure
Poland
Portugal
Regional Development
Roberta Metsola
Romania
Serbia
Single European Act
Single Market
Slovakia
Slovenia
Spain
Strasbourg
Sweden
Trade Policy
Treaty of Amsterdam
Treaty of Lisbon
Treaty of Nice
Treaty of Rome
Turkey
Ukraine
United Kingdom
United Nations
United in diversity
Ursula von der Leyen
World Trade Organization
political and economic union

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Werner Heisenberg
Zugspitze
automotive industry
beer
classical music
country
developed social market economy
federal parliamentary republic
literature
manufacturing
philosophy
pretzels
public universities
sausages
technology

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1916
3 Series
5 Series
7 Series
Alpina
American Samoa
Argentina
Australian Antarctic Territory
Austria
BMW M
BMW Motorrad
Bahamas
Barbados
Barentsøya
Bavarian flag colors
Bayerische Motoren Werke
Bear Island
Bermuda
Bjørnøya
Bolivia
Bouvet Island
Brazil
British Antarctic Territory
British Virgin Islands
Cayman Islands
Chile
China
Christmas Island
Cocos Islands
Colombia
Cook Islands
Costa Rica
Dominican Republic
Ecuador
Edgeøya
Egypt
El Salvador
F Series
Federated States of Micronesia
Fiji
French Polynesia
French Southern and Antarctic Lands
Germany
Guam
Guatemala
Gustav Otto
Heard Island and McDonald Islands
Honduras
Hopen
India

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1871
56 countries
ABS
ADAS
Automotive
Barum
CON
China
ContiTech
Continental
Continental Automotive Systems
Continental Tires
ESC
Elektrobit Automotive
Frankfurt Stock Exchange
General Tire
Germany
Gislaved
Hanover
India
Japan
Mabor
Motorola's automotive electronics
Semperit
Siemens VDO
Siemens VDO Automotive
TPMS
Temic
Tires
Uniroyal
United States
VDO
Viking
academic cooperation
aftermarket
artificial intelligence
automated driving
automated driving systems
automotive
automotive electronics
automotive manufacturers
automotive parts manufacturer
automotive safety systems
body control modules
brake systems
camera systems
certification
charitable donations
circular economy
climate protection

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
0.3
1 billion euros
1 trillion euros
10
10 billion dollars
100 billion euros
100 million
12%
150 euros
150000
152.7 billion euros
1890
1949
20 euros
200%
5 billion euros
5%
50%
70 countries
700 billion euros
8 members
80 billion euros
94%
AA
AAA
AGF
ALV
Africa
Aktiengesellschaft
Allianz Arena
Allianz Assist
Allianz Direct
Allianz Global Investors
Allianz Life
Allianz Online
Allianz Partners
Allianz Riviera
Allianz Technology
Allianz Versicherungs-Aktien-Gesellschaft
Americas
Asia Pacific
Asset Management
BaFin
Berlin
BlackRock
Carl von Thieme
Cornhill Insurance
DAX
Deutsche Bank
Euler Hermes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1.3 trillion euros
1400
1870
1999
200 billion euros by 2025
2008 financial crisis
2010
2018
2019
28.6 billion euros
3000
58
85000
Adelbert Delbrück
Aktiengesellschaft
Alexander Wynaendts
Asia Pacific
BNP Paribas
BaFin
Bankers Trust
Basel III
Berlin International Film Festival
CRS
Chief Compliance Officer
Chief Risk Officer
Chief Technology Officer
Christian Sewing
Commerzbank
Corporate Bank
DAX
DB
DBK
DEUTDEFF
DWS Group
Deutsche Bank
Deutsche Bank Academy
Deutsche Bank Awards
Deutsche Bank Collection
Deutsche Bank KunstHalle
Deutsche Bank Labs
Deutsche Bank Mobile
Deutsche Bank Online
Deutsche Bank Park
Deutsche Bank Research
Deutsche Bank Stiftung
EBA stress tests
ECB stress tests
EU deposit guarantee
EU regulations
EU sanctions

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1850
3rd largest state
5th largest economy in world
Alcatraz Island
Anaheim Ducks
Arizona
California State University
California dogface butterfly
California golden trout
California grizzly bear
California poppy
California quail
California redwood
Central Valley
Channel Islands National Park
Death Valley
Death Valley National Park
Disneyland
Eureka
Fisherman's Wharf
Fresno
Gavin Newsom
Golden Gate Bridge
Golden State
Golden State Warriors
Griffith Observatory
Hearst Castle
Hollywood
Hollywood Sign
I Love You, California
Joshua Tree National Park
Kings Canyon National Park
Knott's Berry Farm
Lake Tahoe
Lassen Volcanic National Park
Lombard Street
Long Beach
Los Angeles
Los Angeles Angels
Los Angeles Chargers
Los Angeles Dodgers
Los Angeles International Airport
Los Angeles Lakers
Los Angeles Rams
Mediterranean
Mexico
Mission San Juan Capistrano
Mojave Desert
Nevada
Oakland

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Netherlands
North American suppliers
Qatar Airways
Seville
Singapore Airlines
Spain
Tianjin
Toulouse
United Airlines
United Kingdom
ZEROe hydrogen aircraft
aerospace
aerospace corporation
autonomous flight
commercial aircraft
common cockpit design
community engagement
diversity and inclusion
education programs
electric aircraft
environmental sustainability
excellent
fly-by-wire technology
fuel-efficient aircraft
global network
helicopters
hydrogen-powered aircraft
largest commercial aircraft manufacturer
military aircraft
over 130,000
over 60 billion euros
satellites
space systems
sustainable aviation fuel
zero-emission aircraft development

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
third largest US state

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19 Emmy Awards
1955
1993-1998
2013
2014
2017-2018
747 aircraft
American Institute of Physics
Bachelor of Science in Mechanical Engineering
Bill Nye Saves the World
Bill Nye the Science Guy
Boeing
CEO
CEO of The Planetary Society
Carl Sagan
Cornell University
Dancing with the Stars
Distinguished Service Award
Emmy Award
Johns Hopkins University
Ken Ham
Microsoft
NASA
National Science Board
National Science Teachers Association
Netflix
PBS
Rensselaer Polytechnic Institute
Science Rules!
The Big Bang Theory
The Late Show with Stephen Colbert
The Planetary Society
The Science Guy
The Tonight Show
Washington, D.C.
William Sanford Nye
YouTube
advance space science
astronomy
author
biology
books
bow tie
children
climate change awareness
climate science
creationism
demonstrations
documentaries
educational videos

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
French Franc
Germany
Greece
Greek Drachma
Hungary
Ireland
Irish Pound
Italian Lira
Italy
Kosovo
Latvia
Lithuania
Luxembourg
Luxembourgish Franc
Maastricht Treaty
Maastricht criteria
Malta
Monaco
Montenegro
Netherlands
Poland
Portugal
Portuguese Escudo
Romania
San Marino
Single Resolution Mechanism
Single Supervisory Mechanism
Slovakia
Slovenia
Spain
Spanish Peseta
Stability and Growth Pact
Sweden
Vatican City
Wim Duisenberg
advanced security features
approximately 20%
architectural styles
below 2%
country-specific designs
cross-border comparisons
currency
digital euro
dual circulation
durable convergence
easier travel
eliminated exchange rate risk
exchange rate stability
floating
generally positive

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Holy Roman Empire
Immanuel Kant
Johann Sebastian Bach
Johann Wolfgang von Goethe
Johannes Brahms
Johannes Gutenberg
Karl Benz
Karl Marx
Ludwig van Beethoven
Luxembourg
Max Planck
Mercedes-Benz
Munich
NATO
Nazi Germany
Netherlands
Neuschwanstein Castle
Oktoberfest
Paul Klee
Poland
Reformation
Reichstag Building
Rhine
Richard Wagner
Robert Koch
Rudolf Diesel
SAP
Siemens
Stuttgart
Switzerland
Thomas Mann
United Nations
Volkswagen
Weimar Republic
Werner Heisenberg
Wernher von Braun
West Germany
Wilhelm Röntgen
Wolfgang Amadeus Mozart
World War I
World War II
Zugspitze
automotive
beer
chemicals
country
electronics
federal parliamentary republic
football
largest in Europe

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
international partners
international partnership
largest civil aircraft manufacturer
military aircraft
multiple countries
over 10,000
space systems
zero-emission aircraft

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
stone
stratigraphic analysis
sun-dried bricks
symbol of Babylonian power
temple
temple economy
temple estates
temple society
thousands of workers
world heritage
ziggurat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
nerd culture
one son
screenwriter
stand-up comedian
thrash metal
voice actor
writer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Nike
Olympic Games
Parley for the Oceans
Paul Pogba
Pharrell Williams
Primeknit
Puma
Real Madrid
Reebok
Runtastic
Spain national football team
Stan Smith shoes
Stella McCartney
Superstar shoes
TaylorMade
Torsion System
UEFA Champions League
UEFA European Championship
Y-3
accessories
adiPRENE
adiWEAR
adidas by Stella McCartney
apparel
basketball
billions of dollars
billions of euros
carbon neutral
cycling
footwear
global
golf
innovation centers
ocean plastic
outdoor
predator football boots
recycled materials
running
second largest sportswear manufacturer
skateboarding
soccer
soccer equipment
sports science
sportswear
sportswear company
swimming
tennis
thousands
thousands worldwide
three stripes logo

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
private research university
research
science
student-run
urban
white

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
television industry
television programming
winged woman holding an atom
writing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
automation
automotive
automotive coatings
biotechnology
carbon neutrality
care chemicals
catalysts
chemical company
chemicals
circular economy
circular products
climate protection
community development
construction
construction chemicals
crop protection products
cultural diversity
customer service
data analytics
digital customer solutions
digital platforms
digitalization
dispersions
distribution centers
educational programs
electronics
employee development
energy
equal opportunity employer
global logistics network
home care
inclusive workplace
largest chemical producer
leadership development
magnetic tape
new materials
nutrition products
occupational safety
oil and gas
oilfield chemicals
over 110000
over 2 billion euros annually
over 200 production sites
over 78 billion euros
packaging
performance products
personal care
pharmaceuticals
plastic additives
plastics

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1952
All Grown Up!
American Dad!
Arrested Development
As Told by Ginger
Austin Powers: International Man of Mystery
Avatar: The Last Airbender
Babu Bhatt
Babylon 5
Batman Beyond
Becker
Ben 10
Boon
Canadian
Castle
Curb Your Enthusiasm
Danny Phantom
Dr. V.M. Koothrappali
ER
Family Guy
Friends
Futurama
Green Lantern: The Animated Series
How I Met Your Mother
Israeli
Jerusalem
Jimmy Neutron: Boy Genius
Justice League Unlimited
Kung Fu Panda: Legends of Awesomeness
MAD
Malcolm in the Middle
Mighty Morphin Power Rangers
Phineas and Ferb
Rugrats
Seinfeld
Star Trek: The Next Generation
Star Wars: The Clone Wars
Static Shock
Superman: The Animated Series
Teen Titans
The 99
The A-Team
The Adventures of Puss in Boots
The Avengers: Earth's Mightiest Heroes
The Batman
The Bernie Mac Show
The Big Bang Theory
The Drew Carey Show
The Fairly OddParents
The Fresh Prince of Bel-Air

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
University of Houston
University of San Diego
Young Sheldon
actor
gay
repeatSNL

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (18); stopping.
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1899
2019
2nd century AD
3rd century BC
Akkadian
Alexander the Great
Amorites
Ashurbanipal
Assyrians
Babylonian Empire
Babylonian astronomy
Babylonian mathematics
Bible
Code of Hammurabi
Esagila
Esarhaddon
Etemenanki
Euphrates River
Hammurabi
Hanging Gardens
Herodotus
Hillah
Hittites
Iraq
Ishtar Gate
Marduk
Mesopotamia
Nebuchadnezzar II
Neo-Babylonian Empire
Nineveh
Persians
Processional Way
Robert Koldewey
Sennacherib
Tower of Babel
Ur
Uruk
advanced irrigation
ancient Mesopotamia
ancient Near East
ancient city
astronomical observations
cuneiform
cuneiform writing
double walls
later civilizations
legal code

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] finished in 166.2s → outputs in runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251029_231623
[crawler] max-subjects reached (21); stopping.
[crawler] finished in 316.6s → outputs in runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251029_231623
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1927
1941
1951
48 Hours
60 Minutes
ABC
ATSC
America's Most Watched Network
Arthur Judson
Big Brother
Blue Bloods
Bob Hearts Abishola
CBS Cares
CBS Entertainment
CBS Evening News
CBS Eye
CBS Eye logo
CBS Foundation
CBS Mornings
CBS News
CBS News Sunday Morning
CBS News app
CBS Radio
CBS Reports
CBS Saturday Morning
CBS Schoolbreak Special
CBS Sports Network
CBS Sports app
CBS Studios
CBS Studios International
CBS Television Network
CBS This Morning
CBS color television system
CBS eye logo
CBS musical signature
CBS owned-and-operated stations
CBS.com
CSI: Crime Scene Investigation
Canada
Columbia Broadcasting System
Criminal Minds
Dan Rather
David Letterman
Ed Bradley
Edward R. Murrow Awards
Evil
FBI
FBI: International
FBI: Most Wanted
Face the Nation

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] output_dir: runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] seeded: The TV Series Big Bang Theory
[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "The TV Series Big Bang Theory"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[crawler] output_dir: runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_231623
[crawler] seeded: DAX 40 Index
[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "DAX 40 Index"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
entertainment industry
extensive in Southern California
film and television industry
founding by Spanish settlers
home to aerospace companies
largest city by area in California
largest city in California
low
major city in United States
motion pictures
multiple worldwide
over 280 per year
support renewable energy sources
tourism
traffic congestion
warm throughout year

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
healthcare company
healthcare infrastructure
healthcare professional development
healthcare providers
healthcare spending growth
high
high priority
holding company
hospital operations
improvement focus
infusion pumps
innovation-driven
international
intravenous drugs
intravenous solutions
large
leading provider of hospital care
major employer
medical devices
medical education
medical supply chain
medical technology
multinational corporation
multiple countries
multiple jurisdictions
national health authorities
nephrology
nutrition therapy
ongoing
organic
over 100 countries
over 300,000
over 40 billion euros
patient-centered
pharmacy
positive
public company
quality-focused
regular
required for products
research capabilities
research institutions
robust
scale
significant
social responsibility
specialized
stock corporation
stringent
surgery

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Munich Re
Porsche
Puma
Qiagen
RWE
S&P 500
SAP
SDAX
Sartorius
Siemens
Symrise
T+2
TecDAX
VDAX
Volkswagen
Vonovia
Xetra
Xetra trading system
Zalando
aerospace
automotive
benchmark for German stocks
chemicals
consumer goods
daily index values
e-commerce
financial news
financial services
free float
free-float market capitalization
futures
healthcare
high
includes dividend payments
industrial
institutional investors
insurance
international investors
large-cap
logistics
long-term growth
major European stock index
market capitalization
options
performance index
price return
quarterly
real estate
real-time
regulated disclosure requirements

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Indonesia
Jamaica
Jan Mayen
K Series
Karl Rapp
Kiribati
Kong Karls Land
Kvitøya
MINI
Malaysia
Marshall Islands
Mexico
Munich
Nauru
Netherlands
New Caledonia
Nicaragua
Niue
Nordaustlandet
Norfolk Island
Northern Mariana Islands
Palau
Panama
Papua New Guinea
Paraguay
Peru
Peter I Island
Philippines
Pitcairn Islands
Prins Karls Forland
Puerto Rico
Queen Maud Land
R Series
Rolls-Royce Motor Cars
Romania
Ross Dependency
Russia
S Series
Samoa
Solomon Islands
South Africa
Spitsbergen
Svalbard
Thailand
Tokelau
Tonga
Trinidad and Tobago
Turkey
Tuvalu
US Virgin Islands

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
certificates
comprehensive disaster recovery
comprehensive risk management
continuous market surveillance
continuous technological innovation
currency exchange
economic resilience
educational programs for schools
efficient capital markets
efficient price discovery
electronic trading
extensive historical archives
financial information services
financial institutions
financial library
financial stability
further digitalization
global capital markets
green bonds trading
high corporate governance standards
high credibility
high investor protection standards
high level of market trust
high liquidity
high market transparency
high performance trading
high system availability
high trading capacity
high trading volume
highly reputable institution
highly scalable systems
innovation
integrity
investor education
key German financial institution
largest stock exchange in Germany
limited public access
liquidity provision
low latency trading
maintain market leadership
market data services
market reports
market research services
modern financial marketplace
numerous international companies
oldest stock exchange in Germany
ongoing digital transformation
over 450
partnerships with universities
price discovery

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Oregon
Pacific Ocean
Pacific Time Zone
Pinnacles National Park
Redwood National Park
Sacramento
Sacramento Kings
San Diego
San Diego International Airport
San Diego Padres
San Diego Zoo
San Francisco
San Francisco 49ers
San Francisco Bay
San Francisco Giants
San Francisco International Airport
San Joaquin soil
San Jose
San Jose Sharks
Santa Monica Pier
Sequoia National Park
Sierra Nevada
Silicon Valley
Six Flags Magic Mountain
Stanford University
U.S. state
United States
Universal Studios Hollywood
University of California
University of Southern California
Yosemite National Park
agriculture
alpine
beaches
benitoite
cultural diversity
desert
desert tortoise
diverse geography
earthquakes
entertainment
environmental leadership
film industry
gold
largest state economy in U.S.
most populous state
multiple area codes
national parks
progressive politics
serpentine

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
cloud services
collaborations
community engagement
compliance
connected car technologies
connectivity
cultural activities
customer support
cyber security
cybersecurity solutions
data analytics
digital services
digitalization
display solutions
diversity and inclusion
divestitures
documentation
education support
electric mobility
emissions reduction
employee development
energy conservation
engine management systems
environmental protection
equal opportunity
fleet management
functional safety
government projects
human-machine interfaces
hybrid and electric vehicle components
industry consortia
infotainment systems
innovation
instrument clusters
intellectual property
interior electronics
joint ventures
leading automotive supplier
lidar systems
logistics
machine learning
manufacturing
mergers and acquisitions
mobility services
over 200000
over 40 billion euros
over 500 locations
over-the-air updates
partnerships
patents

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 197.1s → outputs in runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231623
[crawler] seeded: ancient city of Babylon
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Euro Stoxx 50
Europe
Fireman's Fund Insurance Company
Forbes Global 2000
Formula E
Fortune Global 500
Frankfurt Stock Exchange
Freshfields Bruckhaus Deringer
GDPR compliant
Germany
ISO 27001 certified
KPMG
Life/Health
MSCI
Michael Diekmann
Middle East
Moody's
Munich
Munich Re
Norges Bank
Oliver Bäte
Olympic Games
PIMCO
Paralympic Games
Property-Casualty
RAS
Standard & Poor's
The Power On Your Side
Wilhelm von Finck
above average
agents
allianz.com
asset management
automated underwriting
banks
blue
brokers
calendar year
casualty insurance
crisis response team
customer centricity
digital claims handling
digital transformation
digitalization
direct sales
disaster recovery plans
diversified portfolio
enterprise risk management
financial services company
financial strength

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "ancient city of Babylon"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1956
2016
Adam Driver
Adam Sandler
Agnes of God
American
Andy Serkis
Austin Powers: International Man of Mystery
Barbara Hershey
Ben Burtt
Billie Lourd
Billy Crystal
Billy Dee Williams
Central School of Speech and Drama
Daisy Ridley
Dan Aykroyd
Debbie Reynolds
Delusions of Grandma
Diane Keaton
Disney Legend Award
Domhnall Gleeson
Drew Barrymore
Dustin Hoffman
Eddie Fisher
Emmy Award
Family Guy
Fanboys
Gary Kurtz
George Lucas
Goldie Hawn
Grammy Award
Gwendoline Christie
Hannah and Her Sisters
Harrison Ford
Hollywood
Hook
Howard Kazanjian
Irene
Irvin Kershner
J.J. Abrams
John Belushi
John Boyega
John Landis
John Williams
Julia Roberts
Julie Andrews
Kathleen Kennedy
Kevin Costner
Lawrence Kasdan
Lethal Weapon 3

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1997
ABC
Amazon Prime Video
American popular culture
American television comedy
American television history
Bob Hearts Abishola
Bookie
CBS
CBS Television Studios
California
Chuck Lorre
Critics' Choice Television Awards
Cybill
Dharma & Greg
English
Golden Globe Awards
Grace Under Fire
HBO Max
Hollywood Walk of Fame star
Los Angeles
Mike & Molly
Mom
Netflix
North America
People's Choice Awards
Primetime Emmy Awards
Roseanne
Television Academy Hall of Fame
Television Critics Association Awards
The Big Bang Theory
The Kominsky Method
Two and a Half Men
United States
United States of Al
Warner Bros. Television
Young Sheldon
adults
award-winning company
business models
character-driven comedy
comedy
comedy entertainment
comedy series
commercially successful
consistent output
consistent ratings
content creation
critically acclaimed
decades of television production

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
30 Rock
Aarti Majumdar
Connecticut
Damages
Grey's Anatomy
Heroes
Indian-American
New York University
Noah's Arc
Outsourced
Priya Koothrappali
Raj Koothrappali's sister
Royal Pains
The Accountant 2
The Amateur
The Arrangement
The Aviator
The Bad Guys
The Banshees of Inisherin
The Batman
The Batman Part II
The Beekeeper
The Big Bang Theory
The Black Demon
The Black Phone
The Bob's Burgers Movie
The Bold Type
The Book of Boba Fett
The Book of Clarence
The Boys
The Brutalist
The Butterfly Effect
The Cable Guy
The Cell
The Cleaner
The Closer
The Color Purple
The Contender
The Creator
The Crow
The Crown
The Day After Tomorrow
The Equalizer 3
The Ex List
The Fabelmans
The Falcon and the Winter Soldier
The Fall Guy
The Family Man
The Flight Attendant
The French Dispatch

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Emerging markets
Euro Stoxx 50
Europe
European Central Bank
FATCA
Frankfurt
Frankfurt Stock Exchange
German GAAP
German deposit guarantee
Germany
Goldman Sachs
Google Cloud
HSBC
IFRS
Investment Bank
JPMorgan Chase
KPMG
LCR
LGBTQ+ inclusion
LIBOR scandal
Ludwig Bamberger
MREL
MiFID II
Microsoft Azure
NSFR
NYSE
North America
OFAC
PRIIPs
Postbank
Private Bank
Project Guardian
SEPA
SWIFT
Singapore
Women in Business
annual general meeting
annual reviews
asset management
automatic exchange
bank
banking
blue
blue square with slash
capital return
client-centric
commercial banking
confidential reporting
corporate social responsibility
corporations

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1952
ABC
Al Higgins
Alan Arkin
Alan Rachins
Allison Janney
Andy Ackerman
Angus T. Jones
Anna Faris
Annie Potts
April Bowlby
Ashley Aufderheide
Ashton Kutcher
Bill Prady
Billy Gardell
Bob Hearts Abishola
Bookie
Brian Thomas Smith
Brian d'Arcy James
CBS
Carol Ann Susi
Charlie Sheen
Chris Elliott
Christine Baranski
Chuck Lorre Productions
Cleo King
Conchata Ferrell
Cybill
Dan Bakkedahl
David Koechner
David Kohan
Dharma & Greg
Don Foster
Eddie Gorodetsky
Folake Olowofoyeku
Gemma Baker
Golden Globe Award
Grace Under Fire
Graham Rogers
Holland Taylor
Humanitas Prize
Iain Armitage
James Burrows
James Widdoes
Jenna Elfman
Jennifer Taylor
Jim Parsons
Joel Murray
John Ross Bowie
Johnny Galecki

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
engineering
entertaining science education
evolution
exploration
general public
hands-on experiments
honorary degrees
humor
hydraulic pressure resonance suppressor
inventor
mechanical engineer
online content
physics
pseudoscience
public education
public understanding of science
renewable energy
science advocacy
science and public
science communication
science communicator
science education
science education curriculum
science education reform
science educator
science museums
scientific concepts
scientific literacy
social media
space exploration
television
television presenter
young scientists

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
global
map of Europe
over 340 million Europeans
perceived price increases
price stability
sound public finances
trillions of dollars
world
€

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
machinery
pretzels
right
sauerkraut
sausages
social market economy

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
polystyrene
polyurethane
polyurethanes
process safety
product stewardship
raw material sourcing
recognized chemical brand
renewable energy
research institutions
resource efficiency
social engagement
sustainable solutions
synthetic indigo
textiles
thousands of patents
universities worldwide
vitamin A
vitamin E
women in leadership
world's largest chemical company

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
retail investors
sector representation
stock market index
technology
total return
trading volume
utilities

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
training
worldwide

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Alexander the Great"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Akkadian"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Amorites"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Ashurbanipal"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Assyrians"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Bible"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Code of Hammurabi"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Esagila"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Esarhaddon"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Babylonian Empire"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Hammurabi"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Euphrates River"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Etemenanki"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Hanging Gardens"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Herodotus"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Ishtar Gate"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Hittites"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Hillah"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Iraq"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Marduk"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The King of Queens
The Legend of Korra
The Looney Tunes Show
The Mentalist
The Mighty B!
The New Batman Adventures
The Penguins of Madagascar
The Simpsons
The Spectacular Spider-Man
The West Wing
The Wild Thornberrys
The X-Files
The Zeta Project
Transformers: Prime
Voltron: Legendary Defender
Wolverine and the X-Men
Young Justice
actor

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
tax contributor
transfusion medicine
transfusion technology
transparent
treatment optimization
universities
vertical integration
white
world's largest provider of dialysis products

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Fox
Frank Stanton
Ghosts
Golden Age of Radio
Golden Age of Television
Hawaii Five-0
MacGyver
Magnum P.I.
Mexico
Mike Wallace
Mom
NBC
NCAA March Madness
NCIS
NFL games
NTSC
New York City
PGA Tour
Paramount Global
Paramount+
Peabody Awards
Pop TV
Primetime Emmy Awards
S.W.A.T.
SEAL Team
SEC football
Showtime Networks
Simon & Schuster
Stephen Colbert
Survivor
The Amazing Race
The Big Bang Theory
The Bold and the Beautiful
The CW
The Good Fight
The Good Wife
The Late Show
The Masters Tournament
The Neighborhood
The Price Is Right
The United States of Al
The Young and the Restless
Two and a Half Men
United States
Viacom
Walter Cronkite
Westinghouse Electric Corporation
William S. Paley
Young Sheldon
broadcast journalism

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
United Kingdom
United States
Uruguay
Vanuatu
Venezuela
Vietnam
Wallis and Futuna
X Series
Z Series
automobile manufacturer
automotive
blue and white roundel
financial services
i Series
luxury vehicles
motorcycle manufacturing
motorcycles
multinational corporation
sports cars

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Akkadian
Alexander the Great
Amorites
Ancient Mesopotamian religion
Babylon ruins
Babylonia
Babylonian Captivity
Babylonian astronomy
Babylonian calendar
Babylonian civilization
Babylonian mathematics
Bible
Bronze Age
Code of Hammurabi
Cuneiform
Etemenanki ziggurat
Euphrates River
Hammurabi
Hanging Gardens
Hanging Gardens of Babylon
Hebrew Bible
Hellenistic period
Iraq
Iron Age
Ishtar Gate
Marduk
Mesopotamia
Nebuchadnezzar II
Neo-Babylonian Empire
Persian Empire
ancient city

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
surfing
tech industry
technology
tourism
wine production

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
primary trading method
redundant backup systems
reliability
robust business continuity plans
statistical data
stock exchange
stocks
strict disclosure requirements
strict membership requirements
strict regulatory compliance
sustainability indices
third largest in Europe
top 15 stock exchanges worldwide
traditional trading floor
transparency
warrants

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Jon Cryer
Kaley Cuoco
Katy Mixon
Kevin Sussman
Kunal Nayyar
Lance Barber
Laura Spencer
Laurie Metcalf
Lee Aronsohn
Louis Mustillo
Marco Pennette
Marin Hinkle
Mark Cendrowski
Mark Roberts
Matt Hobby
Matt Ross
Max Mutchnick
Mayim Bialik
Megan Suri
Melissa McCarthy
Melissa Rauch
Michael Douglas
Mike & Molly
Mimi Kennedy
Miriam Shor
Mitchell Ryan
Mom
Montana Jordan
My Two Dads
Nancy Travis
Netflix
New York
Nick Bakay
Nyambi Nyambi
Omar J. Dorsey
Pamela Fryman
Paul Reiser
Primetime Emmy Award
Producers Guild of America Award
Raegan Revord
Regina King
Reno Wilson
Rondi Reed
Roseanne
Ryan Phuong
Sarah Baker
Sebastian Maniscalco
Shae D'Lyn
Simon Helberg
Sophie Winkleman

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
1988
2021
40
9:00-17:30 CET
Adidas
Airbus
Allianz
BASF
BMW
Bayer
DAX 30 Index
DAX indices
Daimler Truck
Deutsche Bank
Deutsche Börse
Deutsche Post
Deutsche Telekom
Deutscher Aktienindex
E.ON
Euro
European Union
Frankfurt Stock Exchange
German Stock Index
German economy
Germany
MDAX
Mercedes-Benz Group
RWE
SAP
SDAX
Siemens
Siemens Energy
TecDAX
Volkswagen
Zalando
automotive
chemicals
energy
finance
free-float market capitalization
healthcare
industrial
market capitalization
performance index
quarterly
stock market index
technology
telecommunications
trading volume

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
powertrain components
predictive maintenance
private investment
prototyping
public funding
quality management
radar systems
recycling
reliability engineering
remote diagnostics
research and development
resource efficiency
restructuring
safety
sensor technologies
simulation
social responsibility
software development
sports sponsorship
standardization
strategic alliances
supply chain management
sustainability
technical training
telematics
testing and validation
tires
transformation
transmission control systems
ultrasonic sensors
vehicle-to-everything communication
venture capital
volunteer programs
waste reduction
work-life balance
world's fourth-largest tire manufacturer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
global compliance program
global presence
growth markets
health insurance
high
institutional investors
insurance
insurance company
largest insurer
life insurance
low interest rates
natural disasters
net-zero emissions by 2050
one share one vote
online
property insurance
public company
regular dividend payments
retail investors
strong brand
sustainability
trusted brand
two-tier board system

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
dedicated fan base
defining American sitcoms
dominant comedy producer
enduring television franchises
ensemble casts
executive producer
experienced writers
families
franchise building
global television
high production values
high-budget television
influential comedy creator
influential comedy producer
influential comedy style
international
international audience
leading television production company
licensing
live audience
long-running shows
long-running television series
long-term series development
mainstream television comedy
major networks
major studios
major television production
millions of viewers
multi-camera sitcoms
multiple Emmy Awards
multiple Golden Globe Awards
multiple series simultaneously
network television
network television leader
numerous television series
popular culture references
production practices
professional television production
profitable television production
relatable humor
respected television producer
scripted television
showrunner
sitcom
sitcom production
skilled directors
streaming rights
streaming services
studio audience
studio partnerships

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Los Angeles
Lupita Nyong'o
Mark Hamill
Matt Groening
Max von Sydow
Meg Ryan
Meryl Streep
Mia Farrow
Michael Caine
Mike Myers
Mike Nichols
Morgan Freeman
Oscar Isaac
Outbreak
Paul Simon
Penny Marshall
Postcards from the Edge
Princess Leia
Princess Leia Organa
Rene Russo
Rian Johnson
Richard Dreyfuss
Richard Marquand
Rob Lowe
Rob Reiner
Robert Watts
Robin Williams
Roger Christian
Sandra Bullock
Sarah Lawrence College
Saturn Award
Seth MacFarlane
Shampoo
Shockaholic
Sister Act
Star Wars
Star Wars: A New Hope
Star Wars: Return of the Jedi
Star Wars: The Empire Strikes Back
Star Wars: The Force Awakens
Star Wars: The Last Jedi
Star Wars: The Rise of Skywalker
Steven Spielberg
Surrender the Pink
The Best Awful
The Blues Brothers
The Princess Diarist
The Simpsons
The Wedding Singer
Warren Beatty

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
crypto custody
dbEnable
dbPride
dbWomen
deutsche-bank.de
disability inclusion
financial institution
financial services
fixed and variable
governments
hybrid working
institutional investors
integrated reporting
investment banking
investment grade
living will
mental health support
money laundering
net zero emissions by 2050
occupational health
private banking
private individuals
quarterly results
risk-aware
shareholder returns
sustainable finance
systemically important bank
total loss-absorbing capacity
zero tolerance

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The Game
The Garfield Movie
The Gift
The Good Doctor
The Good Wife
The Gray Man
The Grudge
The Hours
The Incredibles
The Inspection
The Iron Claw
The Karate Kid
The Kominsky Method
The Last Samurai
The Last Voyage of the Demeter
The League
The Lost City
The Lost Daughter
The Manchurian Candidate
The Mandalorian
The Marvels
The Mask
The Matrix
The Matrix Resurrections
The Mentalist
The Menu
The Mexican
The Mindy Project
The Morning Show
The Mummy
The Naked Gun
The Nice Guys 2
The Northman
The Notebook
The Others
The Outrun
The Pale Blue Eye
The Patriot
The Perfect Storm
The Phantom
The Pianist
The Polar Express
The Power of the Dog
The Protector
The Queen's Gambit
The Resident
The Rock
The Rookie
The Royal Tenenbaums
The Saint

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+964
100 kilometers
1101
34 meters
Arabia Standard Time
Arabic
Babylon Governorate
Babylon ruins
Euphrates River
Hillah City Council
Hillah Museum
Hillah Railway Station
Imam Ali Mosque
Iraq
Ishtar Gate replica
Lion of Babylon statue
Mesopotamia
Sayf al-Dawla
Shia Islam
University of Babylon
agriculture
ancient Babylon
city
date palm cultivation
desert climate
food processing
near ancient Babylonian ruins
over 500000
textile manufacturing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
broadcasting company
color television development
most-watched television network
radio network
television network

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2000 BCE
Akkadian texts
Akkadians
Amorite language
Amurru
Ancient Near East
Arameans
Assyrian culture
Assyrians
Babylon
Babylonian culture
Bronze Age
Canaanite people
Deuteronomy
Ebla tablets
Egyptian texts
Eshnunna
First Dynasty of Babylon
Genesis
Hammurabi
Joshua
Larsa
Late Bronze Age
Levant
Mari
Mari tablets
Martu
Mesopotamia
Old Babylonian period
Old Testament
Semitic languages
Sumerian texts
Sumerians
Syrian Desert
West Semitic traditions
ancient Semitic-speaking people
animal husbandry
establishing city-states
nomadic pastoralism
skilled warriors
trade
tribal confederations
tribal society

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1913
323 BCE
5th century BCE
6th century BCE
7
91 meters
Alexander the Great
Babylon
Babylonian
Berossus
Ctesias
Esagila temple complex
Herodotus
Histories
Iraq
Marduk
Mesopotamia
Nebuchadnezzar II
Neo-Babylonian Empire
Robert Koldewey
Sumerian ziggurats
Tell Babil
Tower of Babel
Xerxes I
axis mundi
death of Alexander
earlier ziggurat
foundation of heaven and earth
glazed brick
mud brick
ruins
shrine to Marduk
temple
ziggurat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Akkadian"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Alexander the Great"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Amorites"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Ancient Mesopotamian religion"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Babylonia"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Babylonian Captivity"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Bible"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Code of Hammurabi"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Etemenanki ziggurat"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Euphrates River"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Hammurabi"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Hanging Gardens"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Hanging Gardens of Babylon"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Hebrew Bible"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Iraq"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Ishtar Gate"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Marduk"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Mesopotamia"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Nebuchadnezzar II"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Neo-Babylonian Empire"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 344.4s → outputs in runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251029_231623
[crawler] output_dir: runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] seeded: The TV Series Big Bang Theory
[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "The TV Series Big Bang Theory"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Akitu
Babylon
Babylonian
Babylonian pantheon
Babylonian texts
Bel
Bible
Bronze Age
Damkina
Enki
Enlil
Enuma Elish
Esagila
Etemenanki
Hebrew Bible
Hellenistic period
Imhullu
Jupiter
Lord
Mesopotamian
Mesopotamian religion
Nabu
Near Eastern mythology
Sarpanit
Tiamat
Zeus
bow
captured
creator god
deity
flood
god
healing
humanity
justice
king of gods
magic
mushhushshu
national god
net
patron god
power
returned
spade
storms
thunder
wisdom
world

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1915
3–4 million
609 BC
911–609 BC
Akitu
Akkadian
Aramaic
Ashurbanipal
Assur
Assyria
Assyrian Church of the East
Assyrian Empire
Assyrian architecture
Assyrian genocide
Assyrian people
Assyrian reliefs
Australia
Babylonians
Chaldean Catholic Church
Christianity
Germany
Iran
Iraq
Khigga
Library of Ashurbanipal
Medes
Mesopotamia
Middle Assyrian Period
Neo-Assyrian Empire
Nimrud
Nineveh
Old Assyrian Period
Ottoman Empire
Sargon II
Sennacherib
Sweden
Syria
Syriac
Syriac Christianity
Syriac Orthodox Church
Turkey
United States
cuneiform
ethnic group
indigenous people
monarchy
siege warfare
trade

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
5th century BCE
7th century BCE
Babylon
Iraq
Marduk
Nebuchadnezzar II
Tower of Babel
Xerxes I
ziggurat

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
19th century
627 BC
668 BC
Akkadian
Ashur-etil-ilani
Assyrian king
Assyriology
Austen Henry Layard
British Museum
Elamite kingdom
Epic of Gilgamesh
Esarhaddon
Iraq
Iron Age
King of Assyria
King of Sumer and Akkad
Library of Ashurbanipal
Mesopotamia
Neo-Assyrian Empire
Nineveh
North Palace at Nineveh
Sennacherib
Shamash-shum-ukin
Sumerian
Susa
after his death
against Shamash-shum-ukin
astronomical texts
bureaucratic reforms
collection of cuneiform tablets
conquest of Egypt
correspondence
cuneiform tablets
high priest of Ashur
last great Assyrian king
library tablets
lion hunt reliefs
medical texts
mythological texts
palace construction
palace reliefs
royal annals
royal inscriptions
scientific texts
scribal arts
suppression of Babylonian revolt
temple restoration
war against Elam

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
14 meters
1899-1917
1902
1930
30 meters
575 BCE
Adad
Aibur-shabu
Akkadian
Babylon
Babylon ruins
Berlin
German Oriental Society
Germany
Iraq
Ishtar
Marduk
Mesopotamian
Nebuchadnezzar II
Neo-Babylonian Empire
Neo-Babylonian period
Pergamon Museum
Robert Koldewey
Vorderasiatisches Museum
Walls of Babylon
best preserved Babylonian structure
blue
blue glazed bricks
brick
bulls
city defense
city gate
dragons
glazed brick
lapis lazuli
lions
mushussu
northern entrance of Babylon
relief
religious procession
symbol of Babylonian power
to Esagila temple

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1200 BCE
1259 BCE
1600 BCE
1906
Aegean civilizations
Anatolia
Ancient Egypt
Arinna
Assyria
Babylon
Battle of Kadesh
Bogazkoy Archive
Bronze Age
Bronze Age empire
Cyprus
Egyptian-Hittite peace treaty
Hattusa
Hittite
Hittite laws
Hugo Winckler
Indo-European
Labarna I
Late Bronze Age collapse
Mitanni
Muwatalli II
Mycenaean Greece
Neo-Hittite states
New Kingdom of Egypt
Suppiluliuma I
Telipinu
Teshub
Turkey
Yazılıkaya
agriculture
ancient Near East
ancient civilization
archers
chariot warfare
chariots
cuneiform
hierarchical
infantry
ironworking
mining
monarchy
polytheistic
pottery
sculpture
seals
trade

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1754 BCE
1901
2.25 meters
282 laws
Akkadian language
Babylon
Babylonia
Babylonian civilization
Euphrates
Gustave Jéquier
Hammurabi
Hammurabi receiving laws from Shamash
Louvre Museum
Mesopotamia
Old Babylonian period
Paris
Shamash
Susa
adoption
ancient Near Eastern law
awilum
civil law
commercial law
contracts
criminal law
cuneiform
diorite
divorce
earlier Mesopotamian laws
epilogue
establish justice
eye for an eye
family law
inheritance
later legal systems
legal code
lex talionis
marriage
multiple copies
mushkenum
oldest deciphered legal code
prevent oppression
prices
prologue
property rights
slavery
social status
stele
understanding Babylonian society
wages

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Amyitis
Ancient era
Babylon
Iraq
Mesopotamia
Nebuchadnezzar II
adobe bricks construction
ancient wonder
archimedes screw
garden accomplishment
terraced gardens

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Adidas"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Airbus"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Allianz"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "BASF"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "BMW"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Bayer"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "DAX 30 Index"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "DAX indices"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Daimler Truck"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Deutsche Bank"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Deutsche Börse"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Deutsche Post"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Deutsche Telekom"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Deutscher Aktienindex"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "E.ON"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Euro"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "European Union"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Frankfurt Stock Exchange"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "German Stock Index"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Germany"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Steven Molaro
Susan McMartin
Susan Sullivan
Swoosie Kurtz
Ted Wass
Television Academy Honors
The Big Bang Theory
The Kominsky Method
Thomas Gibson
Toks Olagundoye
Two and a Half Men
United States
Warner Bros. Television
Warren Bell
Wil Wheaton
Writers Guild of America Award
Wyatt McClure
Young Sheldon
Zoe Perry
comedy
director
screenwriter
sitcom
television producer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The Sea Beast
The Shadow
The Sixth Sense
The Son
The Sopranos
The Substance
The Suicide Squad
The Terminal
The Tragedy of Macbeth
The Truman Show
The Umbrella Academy
The Unbearable Weight of Massive Talent
The Undoing
The Unit
The Village
The Watchers
The Whale
The White Lotus
The Wild Robot
The Witcher
The Woman King
United States
actress

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1750 BCE
1792 BCE
1901
282 laws
7.4 feet
Akkadian
An eye for an eye
Babylon
Babylonian king
Bible
Bronze Age
Code of Hammurabi
Eshnunna
First Babylonian Dynasty
Iraq
Larsa
Louvre Museum
Marduk
Mari
Mesopotamia
Old Babylonian period
Samsu-iluna
Shamash
Sin-Muballit
Susa
agriculture
ancient Near Eastern law
ancient history
archaeology
army organization
awilum
biblical law
bureaucratic reforms
commercial law
criminal law
cuneiform
diorite stele
earliest legal codes
economy
establish justice
family law
fortifications
foundation of Western law
irrigation canals
lawgiver
legal history
lex talionis
mushkenum
prevent strong from oppressing weak
property law

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
16th century BCE
18th century BCE
Akkadian
Akkadian Empire
Ammi-Ditana
Anatolia
Ancient Egypt
Assyrian Empire
Babylon
Babylon ruins
Babylonian calendar
Bronze Age
Code of Hammurabi
Egypt
Enuma Elish
Epic of Gilgamesh
Etemenanki ziggurat
Hammurabi
Hanging Gardens of Babylon
Hittite Empire
Hittites
Iraq
Ishtar
Ishtar Gate
Kassite dynasty
Levant
Marduk
Mesopotamia
Mesopotamian polytheism
Middle East
Nabu
Neo-Babylonian Empire
Samsu-iluna
Sumerian city-states
Sumerian civilization
Tigris-Euphrates
agriculture
algebra
ancient empire
astronomical observations
astronomy
barley
base-60 number system
class-based society
cuneiform
dates
geometry
lunar calendar
mathematics
mudbrick construction

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Afro-Asiatic
Akkad
Akkadian Empire
Ancient Near East
Aramaic
Assyrian
Babylonian
East Semitic
Epic of Gilgamesh
Mesopotamia
Semitic language
c. 2500–500 BCE
case system
clay tablets
cuneiform
lingua franca of Ancient Near East

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2 Kings 19:37
669 BC
681 BC
Arabian campaign
Ashur
Ashurbanipal
Ashurbanipal as king of Assyria
Assur
Assyrian royal annals
Assyrian royal inscriptions
Assyrian ruler
Assyriologists
Babylon
Babylonian Chronicles
Babylonian chronicles
Babylonian temples
Bible
Egypt
Egyptian campaign
Esagila
Esarhaddon's Treaty with Baal of Tyre
Ezra 4:2
Harran
Iron Age
Ishtar
Kushite Empire
Levant
Marduk
Median campaign
Memphis
Mesopotamia
Naqi'a
Necho I
Neo-Assyrian Empire
Neo-Assyrian period
Nineveh
Sennacherib
Shamash-shum-ukin
Shamash-shum-ukin as king of Babylon
Taharqa
against Arabs
against Egypt
against Medes
between his sons
biblical texts
building remains
centralized Assyrian government
clay tablets
conquest of Egypt
in Babylon

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
425 BC
484 BC
Achaemenid dynasty
Athens
Babylon
Battle of Marathon
Battle of Plataea
Battle of Salamis
Battle of Thermopylae
Byzantine scholars
Caria
Cyrus the Great
Darius I
Dryo
Egypt
Euripides
Father of History
Greco-Persian Wars
Halicarnassus
Hecataeus of Miletus
Homer
Ionic Greek
Leonidas I
Lyxes
Panyassis
Pericles
Persia
Persian Empire
Scythia
Sophocles
The Histories
Themistocles
Theodorus
Thucydides
Thurii
Western historiography
Xerxes I
ancient Egyptian history
ancient Greek historian
ancient Greek history
ancient Persian history
ancient cultures
ancient geography
ancient historiography
anthropology
customs
ethnographic descriptions
foundation of Thurii
geography
historical investigation

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
successful television producer
syndication
syndication revenue
syndication rights
syndication success
talent agencies
talented actors
television advertising
television comedy
television comedy standards
television comedy writing
television networks
television production
television production company
television syndication
traditional studio system
vanity cards

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
When Harry Met Sally...
Whoopi Goldberg
Wishful Drinking
Woody Allen
actress
addiction recovery
author
bipolar disorder
mental health
mental health advocacy
mental health awareness
screenwriter
substance abuse recovery
women in Hollywood

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1792 BCE
1894 BCE
Akkadian
Amorites
Ancient Mesopotamian religion
Babylon
Babylonian numerals
Bronze Age
Code of Hammurabi
Hammurabi
Hittites
Kassites
Marduk
Mesopotamia
Middle East
Neo-Babylonian Empire
ancient kingdom
astronomy
cuneiform writing
mathematics
sexagesimal system
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
2007
2019
22 minutes
279
Adam West
Amy Farrah Fowler
Barenaked Ladies
Barry Kripke
Bernadette Rostenkowski
Bill Gates
Bill Nye
Bill Prady
Burt Ward
Buzz Aldrin
CBS
Caltech
Carrie Fisher
Chuck Lorre
Chuck Lorre Productions
Critics' Choice Television Award
Elon Musk
Emmy Awards
English
George Takei
Golden Globe Award
Golden Globe Awards
HBO Max
Howard Wolowitz
Jim Parsons
Johnny Galecki
Kaley Cuoco
Kunal Nayyar
LeVar Burton
Leonard Hofstadter
Leonard Nimoy
Leslie Winkle
Los Angeles
Mark Hamill
May 16, 2019
Mayim Bialik
Melissa Rauch
Mrs. Wolowitz
Neil deGrasse Tyson
Pasadena, California
Penny
People's Choice Award
Primetime Emmy Award
Raj Koothrappali
Screen Actors Guild Awards

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
6th century BC
Ancient Babylonian civilization
Ancient travelers
Babylon
Babylonian texts
Greek historians
Hanging Gardens of Babylon
Iraq
Mesopotamia
Nebuchadnezzar II
Neo-Babylonian Empire
Seven Wonders of the Ancient World
ancient Mesopotamian
ancient engineering marvel
ancient wonder
archaeological site
bricks
irrigation systems
royal gardens
terraced gardens
unconfirmed

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Akkadian texts
Amorite language
Amurru
Ancient Near East
Babylon
Babylonian Dynasty
Bronze Age
Egyptian texts
Hammurabi
Hammurabi Code
Hebrew Bible
Levant
Mari
Mesopotamia
Mesopotamian culture
Semitic languages
Sumerian texts
Syrian Desert
Westerners
Yamhad
ancient Semitic-speaking people
c. 2000-1600 BCE
nomads
polytheistic
warriors

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
539 BCE
587 BCE
626 BCE
Achaemenid Empire
Akkadian
Ancient Egypt
Babylon
Babylonian captivity
Babylonian religion
Hanging Gardens of Babylon
Iraq
Iron Age
Ishtar Gate
Kingdom of Judah
Mesopotamia
Nabonidus
Nabopolassar
Nebuchadnezzar II
Neo-Assyrian Empire
ancient Mesopotamian civilization
astronomy
empire
mathematics

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2800
Asia
Babylon
Bible
Fertile Crescent
Holocene
Iraq
Mesopotamia
Quran
Shatt al-Arab
Sumer
Syria
Tigris River
Tigris-Euphrates river system
Turkey
agricultural development
irrigation
marshes
perennial river
precipitation
river
site of ancient cities
snowmelt
transportation
water rights disputes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
538 BCE
597 BCE
Babylon
Babylonian Exile
Book of Ezekiel
Book of Jeremiah
Books of Chronicles
Books of Kings
Cyrus Cylinder decree
Cyrus the Great
Hebrew Bible
Jewish diaspora
Jewish religious development
Mesopotamia
Nebuchadnezzar II
Neo-Babylonian Empire
Neo-Babylonian period
Prophet Daniel
Prophet Ezekiel
Second Temple period
ancient Israelites
approximately 60 years
destruction of Solomon's Temple
development of synagogues
historical event
siege of Jerusalem

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
4000 BCE
Akkadian
Ancient Near East
Assyrian
Babylon
Babylonian
Code of Hammurabi
Epic of Gilgamesh
Euphrates
Hammurabi
Hanging Gardens of Babylon
Iraq
Nineveh
Sargon of Akkad
Sumerian
Tigris
Ur
Uruk
agriculture
between the rivers
cuneiform script
first cities
historical region
irrigation
timekeeping systems
wheel
writing
writing system
ziggurats

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
14 meters
1899-1914
1930
6th century BCE
Babylon
Babylonian
Babylonian mythology
Germany
Ishtar
Mesopotamia
Mesopotamian
Nebuchadnezzar II
Neo-Babylonian
Pergamon Museum
Processional Way
Robert Koldewey
Staatliche Museen zu Berlin
World Heritage Site
blue
blue glazed bricks
bulls
city gate
cuneiform
dragons
early 20th century
entrance to inner city
lions
monument
procession of statues

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
562 BC
605 BC
Amel-Marduk
Assyria
Babylon
Babylonian captivity
Babylonian dominance
Battle of Carchemish
Book of Daniel
Book of Jeremiah
Egypt
Etemenanki ziggurat
First Temple
Hanging Gardens of Babylon
Iraq
Iron Age
Ishtar Gate
Jerusalem
Jews
King of Babylon
Kingdom of Judah
Mesopotamia
Nabopolassar
Neo-Babylonian Empire
building projects
king
military campaigns

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1750 BC
1792 BC
1901
Akkadian
Amorite
Ancient Near East
Babylon
Babylonian
Babylonian Empire
Babylonian culture
Babylonian king
Bible
Code of Hammurabi
Eshnunna
French archaeologists
Larsa
Louvre Museum
Marduk
Mari
Mesopotamia
Old Babylonian period
Shamshi-Adad I
Susa
Talmud
ancient legal systems
diorite stele
early legal tradition
first written law code
imperial expansion
lex talionis

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 395.5s → outputs in runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251029_231623
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Akkad
Akkadian
Anu
Ashur
Assyria
Babylon
Bronze Age
Canaanite religion
Enki
Enlil
Enuma Elish
Epic of Gilgamesh
Inanna
Kur
Marduk
Mesopotamia
Sumer
Sumerian
Sumerian religion
ancient religion
animal sacrifice
creation of world
dark underworld
divine kingship
flat earth cosmology
great flood
libations
prayer
priests
rise of Christianity
spread of Islam
temples
theocratic
true
ziggurats

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] output_dir: runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231623
[crawler] seeded: DAX 40 Index
[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "DAX 40 Index"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+964
.iq
1932
2003
Arabian Standard Time
Arabic
Arabs
Assyria
Ba'ath Party
Babylon
Baghdad
Basra
Erbil
Euphrates
Gulf War
Iran
Iran-Iraq War
Iraq War
Iraqi dinar
Islam
Jordan
Karbala
Kurdish
Kurdistan Regional Government
Kurds
Kuwait
Mesopotamia
Middle East
Mosul
Najaf
Organization of the Petroleum Exporting Countries
Saddam Hussein
Saudi Arabia
Sumer
Syria
Tigris
Turkey
United Nations
country
federal parliamentary republic
oil
rise of ISIS
top 40 most populous
top 60 largest

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12
2007
2019
279
Amy Farrah Fowler
Bernadette Rostenkowski
Bill Prady
CBS
Caltech
Chuck Lorre
Chuck Lorre Productions
Critics' Choice Television Award
Golden Globe Award
Howard Wolowitz
Jim Parsons
Johnny Galecki
Kaley Cuoco
Kunal Nayyar
Leonard Hofstadter
Los Angeles
Mayim Bialik
Melissa Rauch
Pasadena, California
Penny
Primetime Emmy Award
Rajesh Koothrappali
Sheldon Cooper
Simon Helberg
Warner Bros. Television
Young Sheldon
friendship
geek culture
physicist
romance
science
sitcom
sitcom tropes
television series

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1585
1950s
1997
9:00 AM to 5:30 PM CET
BaFin
Bankenviertel
Börsenplatz
Clearstream
DAX
Deutsche Börse
Eurex
Euro
Euronext
FWB
Federation of European Securities Exchanges
Frankfurt
General Standard
German public holidays
Germany
London Stock Exchange
MDAX
Napoleonic occupation
Prime Standard
SDAX
Scale
TecDAX
World War II destruction
Xetra
advanced
financial services
high
largest
many
one of the world's largest
over 200
rare
stock exchange
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Babylonian captivity
Christian Old Testament
Christian theology
Dead Sea Scrolls
Deuteronomy
Ecclesiastes
Exodus
Exodus from Egypt
Ezekiel
Genesis
Hebrew
Isaiah
Islamic scripture
Israelites
Jeremiah
Jerusalem
Job
Joshua
Judaism
Judges
Ketuvim
Kings
Leviticus
Masoretes
Moses
Nevi'im
Numbers
Pentateuch
Proverbs
Psalms
Samuel
Tanakh
Ten Commandments
Torah
YHWH
centuries
creation of the world
halakha
history
law
northern kingdom
prophecy
religious text
southern kingdom
united kingdom
wisdom

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1993
BaFin
Berlin Stock Exchange
CET
Clearstream
DAX
Deutsche Börse Group
ETFs
Eurex Clearing
Euro
Euronext
Exchange Council
Frankfurt
Frankfurt Stock Exchange
German law
Germany
London Stock Exchange
MDAX
T7 trading system
TecDAX
Xetra trading platform
banks
bonds
brokerage firms
derivatives
dividend payments
financial institutions
indices
large
market data
order-driven
stock exchange
stock splits
stocks
stringent
weekdays
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1999
Austria
Austrian Schilling
Belgium
Croatia
Croatian Kuna
Cypriot Pound
Cyprus
Deutsche Mark
Dutch Guilder
EUR
Estonia
Estonian Kroon
European Central Bank
European Union
Eurozone
Finland
Finnish Markka
France
Frankfurt
French Franc
Germany
Greece
Greek Drachma
Ireland
Irish Pound
Italian Lira
Italy
Latvia
Latvian Lats
Lithuania
Lithuanian Litas
Luxembourg
Malta
Maltese Lira
Netherlands
Portugal
Portuguese Escudo
Slovak Koruna
Slovakia
Slovenia
Slovenian Tolar
Spain
Spanish Peseta
cent
currency
€

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
27
39
66
Ancient Israel
Aramaic
Catholic Bible
Christianity
Christians
Epistles
Genesis
Gospels
Greek
Gutenberg Bible
Hebrew
Jesus Christ
Judaism
King James Version
Latin Vulgate
Luther Bible
New International Version
New Testament
Old Testament
Orthodox Bible
Pentateuch
Prophets
Protestant Bible
Psalms
Revelation
Roman Empire
Western culture
all time
art
covenant between God and humanity
ethical systems
faith movements
first century
late antiquity for New Testament
legal systems
literature
liturgy
millennia
missionary activity
multiple authors
music
religious guidance
religious text
sacred text
theology
thousands
various denominations

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1754 BC
18th century BC
1901
2.25 meters
282 laws
Akkadian
Ancient
Ancient Near East
Ancient Near Eastern law
Assyriology
Babylon
Hammurabi
Hammurabi receiving laws from Shamash
Jacques de Morgan
Louvre Museum
Mesopotamia
Mesopotamian religion
Old Babylonian period
Shamash
Susa
awilum
basalt
commercial law
contract law
criminal law
cuneiform
cuneiform law
debt forgiveness
eye for an eye
family law
iconic ancient legal document
legal code
legal history
lex talionis
major Mesopotamian legal text
mushkenum
nearly complete
one of the oldest legal codes
other ancient law codes
property law
retributive justice
social justice
stele
understanding Mesopotamian society
wardum
well-preserved
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
trade
wheat
ziggurat temples

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
in Egypt
in Samaria
king
parts of Anatolia
provincial system
rebuilding Babylon
royal inscriptions
royal palace at Nineveh
with Arabian tribes
with Median rulers

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
wardum

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1450s
150
31 chapters
Abraham
Acts
Arabic
Aramaic
Bethlehem
Chinese
Christian denomination
Christian faith
Christian theology
Christian worship
Christianity
Creation
Crucifixion of Jesus
Daniel
David
Deuterocanonical books
Deuteronomy
English
Epistles
Exodus
French
Genesis
God
Gospels
Gutenberg Bible
Hebrew
Isaiah
Jerusalem
Jesus Christ
John
Judaism
Judeo-Christian tradition
King James Version
Koine Greek
Latin Vulgate
Leviticus
Luke
Mark
Matthew
Middle East
Moses
Nazareth
New Testament
Numbers
Old Testament
Paul
Pentecost

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
September 24, 2007
Sheldon Cooper
Simon Helberg
Stan Lee
Stephen Hawking
Steven Molaro
Stuart Bloom
TBS
TCA Award
The Big Bang Theory Theme
The Big Bang Theory: The Game
United States
Warner Bros. Television
Warner Bros. Television Distribution
Wil Wheaton
Young Sheldon
action figures
actress
astrophysicist
board games
clothing
comic books
cultural phenomenon
engineer
friendship
geek culture
high ratings
highest-rated comedy series
increased interest in science
mainstream acceptance of nerd culture
mixed reviews
multi-camera
nerd culture
neuroscientist
one of the most successful sitcoms
pharmaceutical scientist
physicist
relationships
science
science fiction
scientific concepts
sitcom
television series

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
20
32
323 BC
336-323 BC
356 BC
Alexander IV
Alexander Mosaic
Alexander Sarcophagus
Alexandria
Alexandria Eschate
Alexandria on the Caucasus
Anatolia
Antigonus
Antigonus I Monophthalmus
Arabia
Aristotle
Arrian
Asia
Babylon
Bactria
Balkan campaign
Basileus
Battle of Gaugamela
Battle of Issus
Battle of the Hydaspes
Bucephala
Bucephalus
Carthage
Cassander
Central Asia
Cleopatra of Macedon
Craterus
Darius III
Diadochi
Diodorus Siculus
Egypt
Gordium
Greece
Hegemon
Hellenistic kingdoms
Hellenistic period
Hellenization
Hellespont
Hephaestion
India
Indian campaign
Julius Caesar
King Porus
Leonidas
Levant

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2nd century BCE
6th century BCE
Amytis of Media
Archimedes screw
Babylon
Babylonian records
Babylonian technology
Berossus
Diodorus Siculus
Dutch paintings
German Oriental Society
Iraq
Iraqi government
Islamic gardens
Maerten van Heemskerck
Martin Heemskerck
Mesopotamian heritage
Mughal gardens
Nebuchadnezzar II
Neo-Babylonian Empire
Nineveh
Oxford University
Quintus Curtius Rufus
Renaissance art
Robert Koldewey
Sennacherib
Seven Wonders of the Ancient World
Strabo
UNESCO
University of London
ancient Greek historians
ancient engineering
ancient history
ancient irrigation
ancient texts
ancient wonder
approximately 75 feet
archaeological methods
archaeological reports
archaeological tourism
archaeology
archaeology studies
architectural marvel
books
botanical gardens
chain pump
classical studies
cultural heritage
cultural heritage programs
cultural tourism

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
southern Mesopotamia
standardized weights and measures
temple construction
temples
wardum

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1988
40 companies
40 largest German companies
Allianz
BASF
BMW
DAX 30 Index
Daimler Truck
Deutsche Bank
Deutsche Börse
Frankfurt Stock Exchange
German equities
German financial authorities
German stock market
Germany
Mercedes-Benz Group
SAP
Siemens
Volkswagen
economic indicator
free-float market capitalization
global financial indices
investment decisions
stock market index

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
historical methodology
historical writing
inquiry
mythological elements
narrative history
nine books

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1990 Syrian-Turkish water agreement
2800 kilometers
500000 square kilometers
Assyria
Atatürk Dam
Babylon
Balikh River
Battle of Karbala
Bible
Christianity
Eastern Turkey
Ebla
Euphrates softshell turtle
Fallujah
Fertile Crescent
Garden of Eden
Haditha Dam
Iraq
Iraq War
Islam
Judaism
Karasu River
Khabur River
Mari
Marsh Arabs
Mesopotamia
Mesopotamian Marshes
Middle East
Murat River
Nasiriyah
Nineveh
Persian Gulf
Purattu
Quran
Raqqa
Shatt al-Arab
Silk Road
Southeast Anatolia Project
Sumer
Syria
Syria-Iraq border
Syrian Civil War
Tabqa Dam
Tigris River
Turkey
Turkey-Syria border
UNESCO sites
Ur
Uruk
agricultural expansion

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1899
1st millennium BCE
484 BCE
4th century BCE
5th century BCE
6th century BCE
Achaemenid period
Akitu festival
Alexander the Great
Asia
Assyriology
Babil Governorate
Babylon
Babylon religious complex
Babylon ruins
Babylonian
Babylonian New Year
Babylonian empire
Babylonian religion
Esagila tablet
Etemenanki
Euphrates River
Fertile Crescent
German Oriental Society
German expedition
Hellenistic period
Herodotus
Iraq
Iron Age
Iron Age II
Ishtar
Marduk
Marduk statue
Mesopotamia
Mesopotamian
Mesopotamian civilization
Mesopotamian temple
Middle East
Nabonidus Chronicle
Nabopolassar
Nabu
Near East
Nebuchadnezzar II
Neo-Babylonian
Neo-Babylonian period
New Year festival
Robert Koldewey
Tell Amran ibn Ali
Xerxes I
Zababa

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1890
ALV
Africa
Allianz Arena
Allianz Global Investors
Allianz Life
Allianz Partners
Allianz Versicherungs-Aktien-Gesellschaft
Asia
Berlin
Carl von Thieme
ESG commitments
Europe
Formula E
Frankfurt Stock Exchange
Germany
Latin America
Munich
North America
Oliver Bäte
Olympic Games
PIMCO
Rugby World Cup
Wilhelm Finck
acquired companies globally
asset management
banking
businesses
casualty insurance
financial services company
health insurance
high credit rating
individuals
institutions
insurance
insurance company
international expansion
investing in technology
large capitalization
life insurance
over 100 billion euros
over 150,000
post-war reconstruction
property insurance
survived World War II
top insurance company
two-tier board system
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
1987-12-30
1988
2021
30
40
40 major German companies
9:00-17:30 CET
CAC 40
DAX
DAX Steering Committee
Deutsche Börse
Deutsche Börse indices
ETFs
Euro
Euro Stoxx 50
FTSE 100
Frankfurt Stock Exchange
German Federal Financial Supervisory Authority
German economy
German stock market performance
Germany
MDAX
Prime Standard
SDAX
TecDAX
Xetra trading system
automotive
blue-chip German companies
chemicals
derivatives
finance
financial reporting
free float
free float market capitalization
healthcare
high
index funds
major European index
market capitalization
performance index
prices from Xetra
quarterly
reinvested
stock market indices
technology
trading volume
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2000
2016
Bundesnetzagentur
Czech Republic
E.ON Czech Republic
E.ON Hungária
E.ON Romania
E.ON Slovakia
E.ON Sverige
E.ON UK
EOAN
Essen
Frankfurt Stock Exchange
Germany
Hungary
Innogy
Ofgem
Romania
Slovakia
Sweden
Uniper
United Kingdom
VEBA
VIAG
billions of euros
biomass
carbon neutrality targets
climate protection
customer solutions
digitalization
electric vehicle charging
electricity generation
electricity supply
energy
energy company
energy efficiency solutions
energy networks
energy trading
energy transition
gas supply
grid modernization
hydroelectric power
natural gas distribution
one of Europe's largest energy companies
over 70000
renewable energy
renewable energy projects
smart home technologies
solar power
wind power

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1995
30000 vehicles
600000
81.7 billion euros
Airborne Express
Boeing 757
Boeing 777
Bonn
DHL
DHL Express
DHL Global Forwarding
DHL Supply Chain
DHL eCommerce
DPW
Deutsche Bundespost
Deutsche Post DHL Group
Exel
FedEx
Frankfurt Stock Exchange
Germany
Hermes
Tobias Meyer
UPS
black
carbon neutral delivery
electric vehicles
express mail
formerly
logistics
logistics company
mail delivery
market leader in Germany
online postage
packaging stations
parcel delivery
parcel service
post offices
postal service
registered mail
retail stores
tracking
transportation
true
worldwide
yellow

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2021
Asia
BharatBenz
Brazil
China Foton Daimler Automotive
DTG
Daimler Trucks
Europe
Frankfurt Stock Exchange
Freightliner
Fuso
Germany
India
Japan
Latin America
Leinfelden-Echterdingen
Martin Daum
Mercedes-Benz
Mercedes-Benz Group
Mexico
Navistar
North America
PACCAR
Thomas Built Buses
United States
Volvo Group
Volvo Trucks
Western Star
automotive
autonomous driving
buses
carbon neutrality
commercial vehicle manufacturer
commercial vehicles
connected vehicles
construction industry
electric trucks
financing
heavy-duty trucks
hydrogen fuel cell vehicles
logistics companies
maintenance
medium-duty trucks
over 100000
over 50 billion euros
parts distribution
public transport
trucks
zero-emission vehicles

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
323 BCE
336 BCE
356 BCE
Achaemenid Empire
Alexander IV of Macedon
Alexandria
Alexandria Eschate
Alexandria in Egypt
Alexandria on the Caucasus
Aristotle
Asia
Babylon
Battle of Gaugamela
Battle of Issus
Battle of the Granicus
Battle of the Hydaspes
Bucephalus
Companion cavalry
Craterus
Darius III
Egypt
Greek culture
Hellenistic period
Hellespont
Hephaestion
India
Indian campaign
Indian king Porus
Macedonia
Macedonian Empire
Macedonian army
Olympias
Oracle of Ammon
Parmenion
Parysatis
Pella
Persia
Persian Empire
Persian campaign
Persian clothing
Persian court ceremonial
Philip II of Macedon
Philip III of Macedon
Ptolemy I Soter
Roxana
Seleucus I Nicator
Stateira
Zeus-Ammon
cavalry charges
encouraged intermarriage

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
1987-12-30
1988
40
9:00-17:30 CET
Adidas
Allianz
BASF
BMW
CAC 40
DAX
DE0008469008
Daimler Truck
Deutsche Bank
Deutsche Börse
Deutscher Aktienindex
Dow Jones Industrial Average
ETFs
Euro
European Union financial regulations
FTSE 100
Frankfurt Stock Exchange
German Federal Financial Supervisory Authority
German economy
Germany
MDAX
Mercedes-Benz Group
SAP
SDAX
Siemens
TecDAX
Volkswagen
automotive
chemicals
finance
financial analysts
financial data providers
free-float market capitalization weighted
fund managers
futures
healthcare
index funds
industrial
investors
large-cap
major European index
options
performance index
quarterly
real-time

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
100 CE
19th century
2500 BCE
Afro-Asiatic
Akkadian Empire
Alalakh
Amarna
Amarna letters
Amorite
Arabic
Aramaic
Aramaic loanwords
Assur
Assyria
Assyrian
Assyrian Empire
Assyriology
Babylon
Babylonia
Babylonian
Babylonian Empire
Behistun Inscription
Code of Hammurabi
D-stem
Dur-Kurigalzu
Ebla
Eblaite
Edward Hincks
Emar
Enuma Elish
Epic of Gilgamesh
G-stem
Greek loanwords
Hattusa
Hebrew
Henry Rawlinson
Julius Oppert
Khorsabad
Mari
Mesopotamia
N-stem
Nimrud
Nineveh
Nippur
Nuzi
Persepolis
Persian loanwords
SOV
Semitic
Semitic language

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Amy Farrah Fowler"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Bernadette Rostenkowski"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
1987-12-30
1988
30
9:00-17:30 CET
Adidas
Airbus
Allianz
BASF
BMW
Bayer
Beiersdorf
Continental
Covestro
DAX indices
Deutsche Bank
Deutsche Börse
Deutsche Post
Deutsche Telekom
E.ON
ETFs
Euro
Frankfurt Stock Exchange
Fresenius
Fresenius Medical Care
German economy
Germany
Henkel
Infineon Technologies
Linde
MDAX
Mercedes-Benz Group
Merck
Munich Re
Porsche
Qiagen
RWE
SAP
SDAX
Sartorius
Siemens
Symrise
TecDAX
Volkswagen
Vonovia
Zalando
free-float market capitalization weighted
futures
major European index
market capitalization

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Bill Prady"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "CBS"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Caltech"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Chuck Lorre"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Chuck Lorre Productions"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Critics' Choice Television Award"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Golden Globe Award"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Howard Wolowitz"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Jim Parsons"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Johnny Galecki"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Kunal Nayyar"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Leonard Hofstadter"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Kaley Cuoco"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Los Angeles"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Mayim Bialik"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Penny"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Pasadena, California"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Melissa Rauch"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1870
1999
2018
2019 strategic overhaul
Aktiengesellschaft
Asia
BaFin
Bankers Trust
Berlin
Berlin Philharmonic
Christian Sewing
Commerzbank
Corporate Bank
DAX
DB
DWS Group
Deutsche Bank Twin Towers
ESG investing
Europe
European Central Bank
Frankfurt
Frankfurt Stock Exchange
German reunification role
Germany
Goldman Sachs
HSBC
Hong Kong
Investment Bank
JPMorgan Chase
Latin America
Libor scandal
London
New York
New York Stock Exchange
North America
Postbank
Private Bank
Singapore
World War II era controversies
asset management
bank
banking
blue
commercial banking
digital asset custody
digital banking
financial institution
foreign trade financing
golf tournaments
governments

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Allianz"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "BASF"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "BMW"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "DAX 30 Index"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Daimler Truck"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Deutsche Bank"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Deutsche Börse"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Germany"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Frankfurt Stock Exchange"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Mercedes-Benz Group"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "SAP"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Siemens"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Volkswagen"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
world
worship services

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Adam West"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Amy Farrah Fowler"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Barenaked Ladies"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Barry Kripke"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Bernadette Rostenkowski"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Bill Gates"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Bill Nye"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Bill Prady"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Burt Ward"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Buzz Aldrin"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "CBS"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Caltech"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Carrie Fisher"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+964
.iq
1932
1990-1991
2003
2003-2011
2005
2007
2017
40 million
438,317 km²
5th largest in world
Abdul Latif Rashid
Al Basra Oil Terminal
Allahu Akbar
Arabia Standard Time
Arabic
Arabic literature
Arabs
Ashur
Assyria
Assyrians
Babylon
Baghdad
Basra
Cheekha Dar
Chukar partridge
Code of Hammurabi
Council of Representatives
Epic of Gilgamesh
Erbil
Euphrates
Gulf War
Hanging Gardens of Babylon
Hatra
ISIL
ISIL conflict
Imam Ali Shrine
Imam Hussein Shrine
Iran
Iran-Iraq War
Iraq War
Iraq national football team
Iraqi Armed Forces
Iraqi cuisine
Iraqi dinar
Islam
Islamic art
Jordan
Karbala

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Chuck Lorre"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Chuck Lorre Productions"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Critics' Choice Television Award"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Elon Musk"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Emmy Awards"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "George Takei"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/dont_know/elicitation.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- ELICITATION PROMPT ---
 You are a knowledge base construction expert.

## Objective
Extract factual (subject, predicate, object) triples for the given subject with **both high precision and high recall**.

- **High precision:** Only include facts you are confident are true. Never guess or extrapolate.
- **High recall:** Cover names, aliases, instance types, roles/positions, works, dates (coarse years ok), places, affiliations, awards, events, parts/contains, composition, influenced/inspired, predecessors/successors, etc.

If the subject is fictional/ambiguous/speculative or you are **not confident**, return exactly:
{"facts": []}

## Coverage & Bias-Aware Guidance
- Actively consider **global coverage** (Global North/South, West/East). Do not default to Western entities/relations.

Avoid hyper-specific long-tail details (episode numbers, street addresses, catalog/serial IDs).

## Quantity & Quality Rules

- **Globally famous subjects:** produce **50–100+** concise, factual triples.
- **Moderately famous subjects:** produce **30–50**.
- **Lesser-known but real subjects:** produce **10–30**.
- **Unknown, ambiguous, or fictional subjects:** return exactly `{"facts": []}`.

### Structural & Quality Requirements
- Include at least one `"instanceOf"` triple when applicable.
- Keep objects concise and use canonical names (avoid aliases unless relevant).
- Each triple must be **atomic** — split multiple objects into separate triples.
- **De-duplicate** all triples and avoid contradictions.
- Maintain high precision — do not invent or speculate.
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Be generous but realistic: capture broad, well-known facts rather than obscure trivia.


## Output contract
- **STRICT JSON ONLY** — no prose, no markdown, no code fences.
- Return the single object:
  {
    "facts": [
      {"subject":"...", "predicate":"...", "object":"..."}
    ]
  }
- Always include at least one `"instanceOf"`.
- Keep each triple atomic. Use canonical, concise object names. De-duplicate.

---

## ✅ Positive ICL (general, high-precision)

Input: "Eiffel Tower"
Output:
{
  "facts": [
    {"subject":"Eiffel Tower","predicate":"instanceOf","object":"tower"},
    {"subject":"Eiffel Tower","predicate":"locatedIn","object":"Paris"},
    {"subject":"Eiffel Tower","predicate":"country","object":"France"},
    {"subject":"Eiffel Tower","predicate":"createdBy","object":"Gustave Eiffel"},
    {"subject":"Eiffel Tower","predicate":"completedIn","object":"1889"}
  ]
}

Input: "Pyramids of Giza"
Output:
{
  "facts": [
    {"subject":"Pyramids of Giza","predicate":"instanceOf","object":"pyramids"},
    {"subject":"Pyramids of Giza","predicate":"locatedIn","object":"Giza"},
    {"subject":"Pyramids of Giza","predicate":"country","object":"Egypt"},
    {"subject":"Pyramids of Giza","predicate":"partOf","object":"Giza pyramid complex"}
  ]
}

Input: "Game of Thrones"
Output:
{
  "facts": [
    {"subject":"Game of Thrones","predicate":"instanceOf","object":"television series"},
    {"subject":"Game of Thrones","predicate":"genre","object":"fantasy drama"},
    {"subject":"Game of Thrones","predicate":"basedOn","object":"A Song of Ice and Fire"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"David Benioff"},
    {"subject":"Game of Thrones","predicate":"createdBy","object":"D. B. Weiss"},
    {"subject":"Game of Thrones","predicate":"network","object":"HBO"},
    {"subject":"Game of Thrones","predicate":"firstAired","object":"2011"},
    {"subject":"Game of Thrones","predicate":"lastAired","object":"2019"},
    {"subject":"Game of Thrones","predicate":"filmedIn","object":"Northern Ireland"},
    {"subject":"Game of Thrones","predicate":"won","object":"Primetime Emmy Award for Outstanding Drama Series"}
  ]
}

Input: "World War II"
Output:
{
  "facts": [
    {"subject":"World War II","predicate":"instanceOf","object":"global war"},
    {"subject":"World War II","predicate":"startYear","object":"1939"},
    {"subject":"World War II","predicate":"endYear","object":"1945"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Allied Powers"},
    {"subject":"World War II","predicate":"majorParticipants","object":"Axis Powers"},
    {"subject":"World War II","predicate":"causedBy","object":"German invasion of Poland"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Germany"},
    {"subject":"World War II","predicate":"endedWith","object":"surrender of Japan"},
    {"subject":"World War II","predicate":"resultedIn","object":"formation of the United Nations"},
    {"subject":"World War II","predicate":"country","object":"Germany"},
    {"subject":"World War II","predicate":"country","object":"United States"},
    {"subject":"World War II","predicate":"country","object":"United Kingdom"},
    {"subject":"World War II","predicate":"country","object":"Soviet Union"},
    {"subject":"World War II","predicate":"country","object":"Japan"}
  ]
}


## ❌ Abstain ICL — produce {"facts": []}

Input: "Zorbaxian Empire"
Output: {"facts": []}

Input: "Purple gravity"
Output: {"facts": []}

Input: "John from the store"
Output: {"facts": []}

---

Now process this subject with the exact same behavior.

Input: "Golden Globe Award"
Output:

Return ONLY valid JSON; no prose; no markdown; no code fences. 
--------------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Peter
Proverbs
Psalms
Resurrection of Jesus
Revelation
Romans
Rome
Septuagint
Spanish
Tanakh
Western civilization
academia
ancient Israel
archaeology
art
biblical criticism
centuries
churches
commandments
countless works of art
covenants
early Christianity
ethics
films
first century CE
first millennium BCE
historical books
law
literature
miracles
music
music compositions
parables
personal devotion
poetry
prophecies
prophetic books
religious education
religious text
sacred scripture
seminaries
theology
wisdom literature
world
world literature
worship services

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Lysimachus
Macedon
Macedonian Empire
Mesopotamia
Mieza
Napoleon Bonaparte
Olympias
Opis
Oracle of Siwa
Parmenion
Parysatis
Pella
Persia
Persian Empire
Persian campaign
Philip II of Macedon
Philip III
Plutarch
Ptolemy
Ptolemy I Soter
Punjab
Quintus Curtius Rufus
Rome
Roxana
Seleucus
Seleucus I Nicator
Siege of Gaza
Siege of Tyre
Sogdia
Stateira
Strategos
Susia weddings
Thebes
Troy
creating one of largest ancient empires
cultural diffusion
god
king
military commander
military genius
one of history's greatest commanders
proskynesis
son of Zeus
spreading Greek culture
uncertain
undefeated in battle

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2
2009
American
Amy Farrah Fowler
Cheesecake Factory
Howard Wolowitz
Melissa Rauch
New Jersey
Penny
The Big Bang Theory
fictional character
high-pitched
microbiologist

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
American
Caroline in the City
Chuck Lorre
Critics' Choice Television Award
Dharma & Greg
Dream On
Gilmore Girls
People's Choice Award
The Big Bang Theory
United States
comedy
producer
sitcom
television
television producer
television writer
writer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
cultural transmission
documentaries
earthquake
educational media
elaborate irrigation
existence debated
exotic plants
films
garden
garden design
green buildings
historical accuracy
historical fiction
historical reconstructions
history curricula
horticultural achievement
horticultural masterpiece
hotels
human achievement
international archaeologists
landscape architecture
landscape history
later Persian gardens
lead
literature
longing for homeland
looting
love
modern skyscrapers
mud brick
neglect
other ancient wonders
poetry
potential World Heritage Site
remind Amytis of her homeland
resorts
rooftop gardens
royal power
stone
sustainable design
terraced gardens
trees
urban development
urban planning
vertical gardens
video games
vines
war
waterfalls
world history

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1995
Burbank
California
Chuck Lorre
Cybill
Dharma & Greg
Grace Under Fire
Mike & Molly
Mom
The Big Bang Theory
The Kominsky Method
Trilogy
Two and a Half Men
United States
Warner Bros. Television
Young Sheldon
production company

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
academic publications
ancient Mesopotamia
ancient Near East
ancient city
ancient era
ancient historians
ancient history
ancient religion
archaeological reports
archaeological site
archaeology
architectural achievement
baked brick
center of Marduk worship
chronicles
classical antiquity
classical authors
courtyard gates
courtyards
cult center
cult statues
cultural heritage
cuneiform tablets
cuneiform texts
divine kingship
divine processions
divine worship
early 20th century
historical monument
historical records
key Babylonian temple
main temple of Babylon
massive walls
mud brick
multiple chapels
political symbol
religious center
religious ceremonies
royal inscriptions
royal rituals
sanctuaries
south of Etemenanki
tell mound
temple
temple towers
temple whose top is lofty
temple worship

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2011
Best Actor in a Comedy Series
Best Actor in a Drama Series
Best Actress in a Comedy Series
Best Actress in a Drama Series
Best Comedy Series
Best Drama Series
Best Limited Series
Best Television Movie
Critics Choice Association
Critics' Choice Television Awards
television achievement
television award
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
American
Beverly Hofstadter
California Institute of Technology
Cheesecake Factory
Dr. Gablehauser
Howard Wolowitz
Johnny Galecki
Leslie Winkle
Pasadena
Penny
Princeton University
Raj Koothrappali
Sheldon Cooper
Thai food
The Big Bang Theory
experimental physics
fictional character
physicist
quantum mechanics

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1980
Bernadette Rostenkowski-Wolowitz
CBS
Hello It's Me Doll
Marlboro Township, New Jersey
Marymount Manhattan College
Night Club
Protect the Family
The Big Bang Theory
The Bronze
The LaTrivian
The Office
The Superhero
True Blood
United States
actor
actress
chick flick
comedian
voice actor

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1949
1974 World Cup final
4D
ADS
Adidas Neo
Adidas Originals
Adidas Performance
Adolf Dassler
Americas
Arsenal
Asia
Bayern Munich
Beyoncé
Bjørn Gulden
Boost
Copa Mundial
Damian Lillard
David Beckham
Europe
FIFA World Cup
Frankfurt Stock Exchange
Gazelle
German Excellence
German engineering
Germany
Global Brand
Herzogenaurach
Impossible is Nothing
James Harden
Juventus
Kanye West
Kylian Mbappé
Lionel Messi
Manchester United
Miracle of Bern
Nike
Olympic Games
Parley Ocean Plastic
Parley for the Oceans
Pharrell Williams
Predator
Primeblue
Primegreen
Primeknit
Puma
Real Madrid
Reebok
Runtastic
Samba
Stan Smith

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1874
1886
ArtCenter College of Design
Arts and Crafts architecture
California
California Institute of Technology
Jet Propulsion Laboratory
KFWB News 98
Los Angeles
Los Angeles County
Old Pas Beads stores
Pasadena City College
Pasadena City Hall
Pasadena Sandwich Company
Rose Bowl
Rose Bowl Game
Rose Bowl Stadium
Tournament of Roses Parade
United States
city
ninth-largest city in Greater Los Angeles
rose bushes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1 Series
1916
1928
1998
2 Series
24 Hours of Le Mans
3 Series
4 Series
5 Series
6 Series
7 Series
8 Series
Audi
BMW
BMW 2002
BMW 3 Series
BMW 5 Series
BMW 7 Series
BMW Art Car
BMW Group Research and Innovation Centre
BMW M
BMW M3
BMW Museum
BMW Tower
BMW Welt
BMW Z4
BMW i
Bavarian Motor Works
Bavarian flag colors
Bayerische Motoren Werke
China
DTM
Dixi
F series
Formula One
Frankfurt Stock Exchange
Germany
Gustav Otto
Hofmeister kink
K series
Karl Rapp
Lexus
Mercedes-Benz
Mini
Munich
Neue Klasse platform
Olympic Games
R series
Rolls-Royce
Rolls-Royce Motor Cars

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
agriculture
alluvial plain
ancient artifacts
ancient mythology
annual inundation
arid
bird migration
carp
catfish
climate change
cradle of civilization
cuneiform tablets
dams
date palms
domestic
drainage
drinking water
fishing
high
high salinity
historical sites
hydroelectric power
increased evaporation
industry
marsh restoration
population growth
post-2003
reduced flow
reduced precipitation
reeds
river
river cruises
shallow draft vessels
softshell turtles
southern Iraq
spring floods
threatened
transportation
urbanization
water disputes
water management
water pollution
water scarcity

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2007
2019
Bernadette Rostenkowski
California
Caltech
Debbie Wolowitz
English
Halley Wolowitz
International Space Station
Jewish
Klingon
Leonard Hofstadter
MIT
Mandarin
Neil Michael Wolowitz
Pasadena
Penny
Raj Koothrappali
Sheldon Cooper
Simon Helberg
The Big Bang Theory
United States
aerospace engineer
bachelor's degree
electronic
fictional character
keyboard
master's degree
mother
scooter
smart car
turtleneck
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1927
1941
1968
America's Most Watched Network
CBS
CBS Sports Network
Columbia Broadcasting System
George Cheeks
NCIS
NFL
New York City
Paramount Global
Paramount+
Peabody Award
Primetime Emmy Award
Survivor
The Big Bang Theory
The CW
United Independent Broadcasters
United States
Viacom
William S. Paley
World's Best Sight
blue
broadcasting
commercial
national
public affairs
television entertainment
television network

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1944
Academy Awards
Best Actor - Motion Picture Drama
Best Actress - Motion Picture Drama
Best Director - Motion Picture
Best Motion Picture - Drama
Best Supporting Actor - Motion Picture
Best Supporting Actress - Motion Picture
Best Television Series - Drama
Beverly Hills
California
Hollywood Foreign Press Association
NBC
United States
annual ceremony
award
awards season
bronze
calendar year
excellence in film
excellence in television
golden globe
international entertainment industry
modern entertainment awards
zinc

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2010
American
Bernadette Rostenkowski
Caltech
Harvard University
Howard Wolowitz
Jewish
Mayim Bialik
Mensa
Pasadena
Penny
Raj Koothrappali
Sheldon Cooper
The Big Bang Theory
blunt
collecting comic books
comic books
conservative dress
fictional character
intelligent
monkeys
neuroscience
neuroscientist
primates
singing
socially awkward

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
130000
1970
1972
A220
A300
A320 family
A320neo
A330
A330 MRTT
A330neo
A350
A380
A400M Atlas
AIR
Airbus Atlantic
Airbus Central R&T
Airbus Commercial Aircraft
Airbus Defence and Space
Airbus Flight Academy
Airbus Helicopters
Airbus SE
Airbus Training Center
Airbus UpNext
ArianeGroup
Beluga
BelugaXL
Boeing
Canada
China
Denis Ranque
EASA
Embraer
Eurofighter Typhoon
Euronext
European consortium
FAA
France
Frankfurt
Germany
Guillaume Faury
H125
H135
H145
H160
Instagram
LinkedIn
NH90
Premium Aerotec
Spain
Stelia Aerospace

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
institutional investors
investment banking
money laundering investigations
multinational corporations
over 1.3 trillion euros
over 25 billion euros
over 80000
post-war reconstruction
private banking
slanted square
systemically important bank

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
09:00-17:30
1993
BaFin
Börsenplatz
CET
Clearstream
DAX
DB
Deutsche Börse Group
ETFs
European exchange consolidation
Frankfurt
German companies
German economy
Germany
IPOs
London Stock Exchange
Monday to Friday
NYSE
Xetra
billions of euros
bonds
equity trading
global exchanges
large trading volumes
primary market
public company
secondary market
stock exchange
stocks

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
from Greece to India
historical figure
illness
king
military commander
one of history's greatest military commanders
use of combined arms

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000
1987-12-30
1988
40
Adidas
Airbus
Allianz
BASF
BMW
Bayer
Beiersdorf
Brenntag
Continental
Covestro
DAX
Deutsche Bank
Deutsche Börse
Deutsche Post
Deutsche Telekom
E.ON
Euro
Frankfurt Stock Exchange
Fresenius
Fresenius Medical Care
Germany
Hannover Rück
HelloFresh
Henkel
Infineon Technologies
Linde
MDAX
MTU Aero Engines
Mercedes-Benz Group
Merck
Munich Re
Porsche
Puma
Qiagen
RWE
Rheinmetall
SAP
SDAX
Sartorius
Siemens
Siemens Energy
Siemens Healthineers
Symrise
TecDAX
Volkswagen
Vonovia

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2019
Asia
BharatBenz
DTG
Daimler AG
Daimler AG's truck division
Daimler Buses
Europe
Frankfurt Stock Exchange
Freightliner
Germany
Latin America
Martin Daum
Mercedes-Benz
North America
Stuttgart
Thomas Built Buses
Western Star
autonomous driving technology
billions of euros
buses
commercial buses
commercial vehicle manufacturer
commercial vehicles
electric trucks
heavy trucks
heavy-duty commercial vehicles
over 100000
publicly traded company
transportation solutions
trucks

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
08:00 to 22:00 CET
1585
1945
1991
Börse Frankfurt
Börse zu Frankfurt
Börsenplatz
Central European Time
DAX
Deutsche Börse
Deutsche Börse Group
ETFs
Federal Financial Supervisory Authority
Frankfurt
Germany
MDAX
Neue Börse
SDAX
TecDAX
Xetra
all German public holidays
auction trading
banking days
bonds
continuous trading
funds
stock exchange
stocks
trade fairs
warrants

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
stock market index
technology

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1995
4G LTE
5G
Aktiengesellschaft
Austria
BT Group
Best Brand
Best Employer
Bonn
Croatia
Czech Republic
DTE
Deutsche Bundespost
Deutsche Telekom Global Carrier
Deutsche Telekom IT
European Commission
FC Bayern Munich
Federal Network Agency
Frankfurt Stock Exchange
German Sustainability Award
German government
German national football team
Germany
Greece
Hungary
Internet of Things
Kai-Uwe Ricke
Magenta Telekom
MagentaTV
MetroPCS
Netherlands
Orange
Poland
René Obermann
Romania
Slovakia
SoftBank
Sprint
SunCom
T-Mobile
T-Mobile US
T-Systems
Tele2
Telefónica
Tim Höttges
United Kingdom
United States
Vodafone
VoiceStream Wireless
artificial intelligence

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Sippar
Sumerian
Sumerian loanwords
Susa
Ugarit
Uruk
a
accusative
administrative records
ancient language
astronomy
boundary stones
building inscriptions
city of Akkad
clay tablets
cuneiform
diplomatic language
divination
dual
e
economic texts
emphatic consonants
epic poetry
feminine
fusional
genitive
grammatical texts
guttural consonants
historical texts
hymns
i
imperfective
language
legal language
legal texts
letters
lexical lists
literary works
masculine
mathematics
medicine
mythology
nominative
nominative-accusative
omen collections
omen texts
perfective
plural
prayers
religious language

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1973
2017
2019
American
Garden State
Golden Globe Award
Hidden Figures
Hollywood Walk of Fame
Houston
James Joseph Parsons
Klein Oak High School
Paul Stafford
Primetime Emmy Award
Sheldon Cooper
Texas
That's Wonderful Productions
The Big Bang Theory
The Big Year
The Boys in the Band
The Normal Heart
Through a Dog's Eyes
Todd Spiewak
United States
University of Houston
University of San Diego
Young Brainy Smurf
Young Sheldon
actor
gay
male
married
over $1 million per episode

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1952
ABC
American
American television producer
Bethpage, New York
Bob Hearts Abishola
CBS
Charles Michael Levine
Chuck Lorre Productions
Cybill
Dharma & Greg
Grace Under Fire
Mom
Primetime Emmy Awards
Roseanne
Roseanne writer
Television Critics Association Heritage Award
The Big Bang Theory
The Kominsky Method
Two and a Half Men
Warner Bros. Television
Young Sheldon
character-driven comedy
cohesive storylines
composer
creator
ensemble casts
long-running comedies
multicamera sitcoms
musician
phenomenal actors dynamic
producer
screenwriter
showrunner
sitcom producers of 1990s-2000s
situation comedies
television
television comedy
television director
theme music composition
vanity cards
writer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1975
American
Baby Rain
Belgium
Bree
David Healy
Dr. Leonard Hofstadter
Illinois
Irish
Italian
Kaley Cuoco
Mary Lou Noonan
Negative Attachions etc as author
Oak Park
Polish
Richard Galecki
Roseanne
Sara Gilbert
The Big Bang Theory
The Little Dog Laughed
William Howard Taft School
actor
among highest-earning television actors
mid1990s
proving early network appeal
theBigBangTheFirstWork

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1981
2004-present
2011
CBS
Delhi
England
English
Hindi
Ice Age: Continental Drift
Indian
Jim Parsons
Johnny Galecki
Kaley Cuoco
London
Mayim Bialik
Melissa Rauch
NCIS
Neha Kapur
Raj Koothrappali
Screen Actors Guild Award
Simon Helberg
The Big Bang Theory
The Role
Trolls World Tour
United States
University of Portland
Warner Bros. Television
Yes, My Accent Is Real
actor
author
comedy
comic
television
voice actor

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
options
performance index
quarterly
stock market index
trading volume
true

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1863
1925-1952
1952
2002
2006
2018
Africa
Aktiengesellschaft
Aleve
Alka-Seltzer
Animal Health
Asia
Aspirin
Aventis CropScience
BASF
BAYN
Barmen
Bayer CropScience
Bayer Cross
Bayer Foundation
Bayer HealthCare
Bayer MaterialScience
Berlin
Betaferon
Bill Anderson
Claritin
Consumer Health
Crop Science
EMA
Europe
Eylea
FDA
FWB
Farbenfabriken vorm. Friedr. Bayer & Co.
Friedrich Bayer
Germany
Good Manufacturing Practice
Heroin
IG Farben
ISO standards
Johann Friedrich Weskott
Kogenate
Latin America
Leverkusen
Merck
Miralax
Mirena
Monheim
Monsanto
Nexavar

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
124 acres
1300
1891
2.9 billion USD
39
3:1
900
Association of American Universities
Beavers
Biology and Biological Engineering
California
California State Legislature
Chemistry and Chemical Engineering
Ditch Day
Engineering and Applied Science
Geological and Planetary Sciences
Jet Propulsion Laboratory
MIT
NASA
National Medal of Science
National Medal of Technology
Palomar Observatory
Pasadena
Physics, Mathematics and Astronomy
SCIAC
The truth shall make you free
United States
WM Keck Observatory
astronomy
biology
chemistry
engineering
engineering education
geology
orange
physics
quarter system
research
science education
selective
university
white

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1990s
2000s
2010s
ABC
CBS
Caroline in the City
Chuck Lorre
Dharma & Greg
Dream On
Dustin Hoffman
Gilmore Girls
HBO
Los Angeles
Primetime Emmy Award
The Big Bang Theory
The Muppets
United States
Writers Guild of America
Writers Guild of America Award
comedy
screenwriter
sitcom
television producer
television series
television writer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1985
5 feet 6 inches
8 Simple Rules
Alvin and the Chipmunks: The Squeakquel
American
Bratz: The Movie
Bridget Hennessy
Camarillo, California
Cassie Bowden
Charmed
Critics' Choice Television Award
DC animated projects
Harley Quinn
Harley Quinn series
Kaley Christine Cuoco
Karl Cook
Laycu Cuoco
Penny Hofstadter
People's Choice Award
Primetime Emmy Award
Prison Break
Ryan Sweeting
Satellite Award
Suicide Squad
The Big Bang Theory
The Flight Attendant
United States
acting
actress
animated Harley Quinn
homeschooled
multi-cultural
producer
sitcom comedy roles
sitcoms
voice actress

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1847
1966
200 countries
300000
DAX index
Digital Industries
Europe
Frankfurt Stock Exchange
General Electric
Germany
Indo-European telegraph line
Johann Georg Halske
Mobility
Munich
Roland Busch
SIE
Siemens & Halske
Siemens AG
Siemens Communications
Siemens Energy
Siemens Healthineers
Siemens Home Appliances
Siemens Mobility
Siemens-Schuckert
Smart Infrastructure
Velaro high-speed trains
Werner von Siemens
automation
building automation systems
conglomerate
digital factory technology
digitalization
dynamo machine
electric railway
electronics
energy management systems
engineering
euros
first electric street lighting
industrial automation systems
industrial software
medical diagnostic equipment
multinational corporation
pointer telegraph
power generation equipment
rail vehicles
railway signaling systems
trains
transcontinental telegraph line
wind power solutions

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1865
Africa
Agricultural Solutions
Asia Pacific
BAS
BASF SE
Badische Anilin- und Soda-Fabrik
Chemicals
Europe
Frankfurt Stock Exchange
Friedrich Engelhorn
Germany
Industrial Solutions
Largest chemical producer in the world
Ludwigshafen
Ludwigshafen Verbund site
Materials
North America
Nutrition & Care
South America
Surface Technologies
agricultural chemicals
agriculture
automotive industry
catalysts
chemical company
chemicals
climate protection
coatings
construction industry
integrated production system
marketing
nutrition products
over 100000
over 200
over 70 billion euros
over 80 countries
petrochemicals
plastics
production
research and development
resource efficiency

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Kirkuk
Kurdish
Kurdistan Region
Kurds
Kuwait
Mawtini
Mesopotamia
Mesopotamian Marshes
Middle East
Mohammed Shia' Al Sudani
Mosul
Najaf
National Museum of Iraq
Nimrud
Nineveh
October 3
Persian Gulf
Popular Mobilization Forces
Saddam Hussein
Saddam Hussein era
Samarra Archaeological City
Saudi Arabia
Shia Islam
Sumer
Syria
Tigris
Turkey
Turkmens
UNESCO World Heritage Site
United States
University of Baghdad
Ur
Uruk
War against ISIL
ancient astronomy
ancient mathematics
chronic
complex
concerns
corruption
country
cuneiform
damaged by wars
desert
developing
dolma
established 2005
federal parliamentary republic
increasing
inflation

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2008
2019
American
Bill Prady
CBS
Caltech
Chuck Lorre
Howard Wolowitz
John Ross Bowie
Leonard Hofstadter
Raj Koothrappali
Sheldon Cooper
The Big Bang Theory
The Big Bang Theory universe
academic conferences
ambitious
competitive
experimental physics
fictional character
intelligent
physicist
recurring character
rhotacism
sitcom
speech with rhotacism
university laboratories
university setting

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1000 points
1988
30
Adidas AG
Allianz SE
BASF SE
BMW AG
Bayer AG
DAX indices
Deutsche Bank AG
Deutsche Börse
ETFs
Euro
Frankfurt Stock Exchange
German stock market
Germany
MDAX
Mercedes-Benz Group AG
SAP SE
SDAX
Siemens AG
TecDAX
Volkswagen AG
Xetra trading hours
automotive
blue chip companies
chemicals
daily
financial services
futures
healthcare
options
performance index
prime standard
quarterly
regulated market
stock market index
technology
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2 sons
Amy Farrah Fowler
Bachelor of Science in Neuroscience
Beyond the Sling
Blossom
Blossom Russo
Blossom Russo in Blossom
California
Critics' Choice Television Award
Curb Your Enthusiasm
December 12, 1975
Doctor of Philosophy in Neuroscience
Fat Actress
Grok Nation
Holocaust remembrance
Jewish
Joseph Bower
Kim Possible
Mayim Bialik
Mayim Bialik's Breakdown
Mayim's Vegan Table
No
Pound Puppies
Primetime Emmy Award
San Diego
Satellite Award
Screen Actors Guild Award
Squirrel Boy
Texas Instruments calculators
The Big Bang Theory
United States
University of California, Los Angeles
Women in Film Lucy Award
actress
animal welfare
attachment parenting
divorced
host of Jeopardy!
neuroscience
neuroscientist
obsessive-compulsive disorder
parental hypo thalamic-pituitary-adrenal axis
parenting advice
vegan
vegan cookbook

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 181.5s → outputs in runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251029_231623
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1890
ALV
Allianz Arena
Allianz Foundation
Allianz Global Investors
Allianz Life
Allianz Partners
Allianz SE
Frankfurt Stock Exchange
Germany
Giulio Terzariol
Munich
Oliver Bäte
PIMCO
asset management
blue
casualty insurance
corporate insurance
corporations
financial services company
health insurance
individuals
institutions
insurance
insurance company
largest insurance company
life insurance
life-health
multinational corporation
over 150,000
over 70 countries
over €150 billion
pension planning
property insurance
property-casualty
retail insurance
risk management
societas Europaea
sustainable investing
three interlocking triangles
wealth management
white

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1865
1952
Africa
Agricultural Solutions
Antwerp
Asia
BAS
BASF Brazil
BASF China
BASF Corporation
BASF India
BASF Japan
BASF SE
Badische Anilin- und Soda-Fabrik
Becker Underwood
Chemetall
Chemicals
Ciba Holding
Covestro
DAX index
Dow Chemical
DuPont
EcoVadis Gold Rating
Engelhard Corporation
Europe
Evonik
Facebook
Fortune Global 500
Frankfurt Stock Exchange
Freeport
Friedrich Engelhorn
Geismar
German Sustainability Award
Germany
Haber-Bosch process
IG Farben
ISO 14001
ISO 9001
Industrial Solutions
Instagram
Kuantan
Lanxess
LinkedIn
Ludwigshafen
Materials
Nanjing
North America
Nutrition & Care
OHSAS 18001
Responsible Care Award

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1781
1932 Summer Olympics
1984 Summer Olympics
Asian Americans
Beverly Hills
California
California burrito
City of Angels
Downtown LA
English
Entertainment Capital of the World
Griffith Observatory
Hispanic and Latino Americans
Hollywood
Hollywood Sign
Karen Bass
LA
LAX (Los Angeles International Airport)
Los Angeles Clippers
Los Angeles County
Los Angeles Dodgers
Los Angeles Kings
Los Angeles Lakers
Los Angeles Metro
Los Angeles Rams
Mediterranean climate
Pacific Ocean
Pacific Time Zone
Santa Monica
Santa Monica Mountains
Santa Monica Pier
Southern California
Spanish
UCLA (University of California, Los Angeles)
USC (University of Southern California)
United States
Venice
Walk of Fame
White Americans
about 500 square miles
aerospace
city
entertainment industry
film industry
film industry hub
film production
motion picture industry
music industry
over 3.8 million
technology

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2007-2019
2018
Bernadette Rostenkowski
Bill Prady
CBS
Caltech
Chuck Lorre
Howard Wolowitz
Leonard Hofstadter
Mayim Bialik
Nobel Prize in Physics
Penny
PhD
Raj Koothrappali
Sheldon Cooper
The Big Bang Theory
became more emotional
evolved socially
fictional character
intelligent
logical
love interest for Sheldon
main character
married
neurobiologist
neuroscience
personal growth
professional success
romantic relationship with Sheldon
season 3
sitcom
socially awkward
super asymmetry
supporting character

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1937
2015
295.8 billion euros
600000
Audi
Bentley
Brazil
Bugatti
China
DAX component
Ducati
FAW-Volkswagen
Ferdinand Porsche
Frankfurt Stock Exchange
German Labour Front
Germany
Lamborghini
Mexico
Nazi Germany
Porsche
Porsche SE
SAIC Volkswagen
SEAT
Spain
United States
VOW3
Volkswagen
Volkswagen Beetle
Volkswagen Golf
Volkswagen Group
Volkswagen ID.3
Volkswagen ID.4
Volkswagen Passat
Volkswagen Polo
Volkswagen Transporter
Wolfsburg
automobile manufacturer
automobiles
automotive
commercial vehicles
diesel emissions scandal
engines
motorcycles
people's car project
public limited company
Škoda

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
111000
12 billion euros
1972
1973
200000000000
437000
75%
ABAP
Accenture
Baden-Württemberg
Christian Klein
Concur
Dietmar Hopp
ERP rival to Oracle and IBM
Enterprise Resource Planning (ERP) systems
Frankfurt Stock Exchange
German multinational software corporation
Germany
Jennifer Morgan was Co-CEO 2019-2020
Management Board and Supervisory Board
NYSE
Oracle ERP
SAP
SAP Business One
SAP ERP
SAP R/3
SAP S/4HANA
SAP SuccessFactors
System Analysis Program Development
The Best-Run Businesses Run SAP
Walldorf
enterprise software
large mainframes on-premises
multinational corporations
no formal political affiliations
organizations
over 200
publicly traded (mostly institutional investors)
worldwide

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1.3 trillion euros
1870
1999
2023
2400
25 billion euros
58 countries
85000
Adolf von Hansemann
Aktiengesellschaft
Alexander Wynaendts
Asia Pacific
BaFin
Bankers Trust
Christian Sewing
Corporate & Investment Bank
Corporate Bank
DAX
DBK
DWS Group
Deutsche Bank Twin Towers
Emerging markets
Europe
European Central Bank
Frankfurt
Frankfurt Stock Exchange
German
German Empire
Germany
Investment Bank
Josef Ackermann
Libor scandal
Ludwig Bamberger
North America
Postbank
Private & Business Clients
Private Bank
asset management
bank
commercial banking
corporate sector
financial institution
financial services
institutional investors
investment banking
multinational investment bank
primary dealer in German government bonds
retail banking
systemically important bank

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2011
2016
A&E
Best Actor in a Comedy Series
Best Actor in a Drama Series
Best Actress in a Comedy Series
Best Actress in a Drama Series
Best Animated Series
Best Comedy Series
Best Drama Series
Best Limited Series
Best Movie Made for Television
Best Reality Competition Series
Best Reality Show Host
Best Structured Reality Series
Best Talk Show
Best Unstructured Reality Series
Broadcast Film Critics Association
Critics Choice Association
Critics' Choice Movie Award
Los Angeles
The CW
United States
VH1
annual
award
excellence in television programming
television critics
television industry

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1926
2022
Benz & Cie. and Daimler-Motoren-Gesellschaft
Bremen plant
Chrysler Corporation
DTM
Daimler AG
Daimler Truck
Daimler-Benz
Deutsche Airbus
Formula One
Fortune Global 500 company
Frankfurt Stock Exchange
G-Class
Germany
Gottlieb Daimler
Karl Benz
Li Shufu
MBG
Mercedes 300SL
Mercedes Jellinek
Mercedes S-Class
Mercedes-AMG
Mercedes-Benz
Mercedes-Benz cars
Mercedes-Maybach
Ola Källenius
Rastatt plant
Sindelfingen plant
Stuttgart
W124
W126
W201
X-Class pickup truck
automotive
automotive company
commercial vehicles
compact cars
executive cars
first diesel-powered car production
first gasoline-powered automobile patented
first passenger car with crumple zone
luxury cars
luxury vehicles
manufacturing company
moovel
myTaxi
passenger cars
sports cars
vans

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1916
1928
2012 London Olympics
2013
24 Hours of Le Mans
3 Series
5 Series
7 Series
Asia
Audi
BMW 326
BMW Group
BMW M
BMW M Motorsport
BMW Motorrad
BMW i
Bavarian Engine Works
Bavarian flag colors
Bayerische Motoren Werke
Camillo Castiglioni
Dingolfing
Dixi
EfficientDynamics
Europe
Formula One
Germany
Isetta
Karl Rapp
M Series
MINI
Mercedes-Benz
Munich
Munich Plant
North America
Rolls-Royce Motor Cars
Shenyang
Spartanburg
The Ultimate Driving Machine
TwinPower Turbo
Valvetronic
X Series
aircraft engine manufacturing
automobile manufacturer
blue and white
blue and white roundel
first anti-lock braking system on motorcycles
i3
i4
iX
inline engines

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+49
.de
1871
1990
357,022 square kilometers
83 million
Adidas
Albert Einstein
Alps
Angela Merkel
Ascension Day
Audi
Austria
Autobahn
BMW
Baden-Württemberg
Bavaria
Belgium
Berlin
Black Forest
Bosch
Brandenburg
Brandenburg Gate
Bremen
Central European Time
Christmas Day
Christmas markets
Cologne
Cologne Cathedral
Czech Republic
Danube
Das Lied der Deutschen
Day of German Unity
Denmark
Deutsche Bahn
Dortmund
Düsseldorf
East Germany
Easter Monday
Elbe
Essen
Euro
Europe
European Union
FIFA World Cup
Federal Chancellor
Federal President
France
Frankfurt
G20

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1997
ABC
Bob Hearts Abishola
CBS
CBS Television Studios
California
Chuck Lorre
Critics' Choice Television Award
Cybill
Dharma & Greg
Golden Globe Award
Grace Under Fire
Los Angeles
Mike & Molly
Mom
Netflix
People's Choice Award
Primetime Emmy Award
Roseanne
Television Critics Association Award
The Big Bang Theory
The Kominsky Method
Two and a Half Men
United States
United States of Al
Warner Bros. Television
Warner Bros. Television Distribution
Young Sheldon
comedy
comedy series
drama
drama series
entertainment company
long-running comedy series
media company
production company
sitcom
sitcom production
sitcoms
successful television sitcoms
television comedy
television directing
television producing
television production
television production company
television series
television series development
television writing

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
2009
2015
2019
American
Amy Farrah Fowler
California
Catholic
Cheesecake Factory
Christmas
Comic-Con
Halley Wolowitz
Howard Wolowitz
Melissa Rauch
Mike Rostenkowski
Mrs. Rostenkowski
Neil Michael Wolowitz
New Jersey
Pasadena
Penny
PhD
Polish-American
Thanksgiving
The Big Bang Theory
Young Sheldon
ambitious
blonde
colorful clothing
competitive
drugs
fictional character
from waitress to scientist
group activities
high-pitched
infectious diseases
main cast
main character
microbiologist
microbiology
multiple sisters
pharmaceutical company
pharmaceutical researcher
pharmaceuticals
short
sweet
university

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
$16.6 trillion
1993
24
27
4,233,262 km²
447 million
Belgium
Brussels
Carbon neutrality by 2050
Common Agricultural Policy
Common Fisheries Policy
Competition Policy
Comprehensive Economic and Trade Agreement
Cosmetics Regulation
Council of the European Union
Cross-Border Healthcare Directive
Customs Union
Digital Single Market
EU Clinical Trials Register
Emergency Response Coordination Centre
Environmental Policy
Erasmus Programme
Euro
Eurojust
Europe's Beating Cancer Plan
European Central Bank
European Commission
European Committee of the Regions
European Consumer Centres Network
European Core Health Indicators
European Court of Auditors
European Court of Justice
European Development Fund
European Economic Community
European Economic and Social Committee
European Environment Agency
European External Action Service
European Food Safety Authority
European Green Deal
European Health Accelerators
European Health Advocacy
European Health Associations
European Health Charities
European Health Clusters
European Health Conferences
European Health Consultation
European Health Data Space
European Health Dialogue
European Health Events
European Health Expenditure

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Stella McCartney
Superstar
TaylorMade
Torsion
UEFA Champions League
Ultraboost
accessories
apparel
athletes
basketball
billions of dollars
billions of euros
brother of Puma founder
company
first lightweight football boots
first screw-in studs
football
football clubs
footwear
form follows function
global
golf
hip hop culture
outdoor
running
second largest sportswear manufacturer
sneaker culture
sports apparel
sports shoes
sportswear
sportswear manufacturer
streetwear
tennis
thousands
three stripes logo
training
worldwide

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
cloud computing
competition law
courage
customer focus
cybersecurity
data centers
data privacy
digital inclusion
digital transformation
diversity
environmental sustainability
excellence
fiber optics
fixed-line telephony
innovation
integrity
international expansion
internet services
largest telecommunications company in Europe
liberalization of telecommunications market
magenta
management board
market leader in Germany
mobile telephony
over 100 billion euros
over 200 million mobile customers
over 200000
privatization
public limited company
respect
responsibility
satellite communications
submarine cables
supervisory board
sustainability
teamwork
telecommunications
telecommunications company
telecommunications network
telecommunications regulation
television services
trust
two-tier board system

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
royal annals
royal inscriptions
scholarly language
school exercises
singular
treaties
true
u
wisdom literature
Š-stem

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
S series
SUV
South Africa
Spartanburg, South Carolina
The Ultimate Driving Machine
Toyota
United States
X1
X3
X5
X7
aircraft engines
automobile manufacturer
carbon neutrality
convertible
coupe
golf tournaments
i3
i4
i7
iDrive infotainment system
iX
inline-six engines
kidney grille
luxury vehicle manufacturer
motorcycle manufacturer
over 100 billion euros
over 100,000
over 120 countries
over 2 million vehicles
premium automotive segment
rear-wheel drive
sedan
sporty driving dynamics
twin-turbocharging
xDrive all-wheel drive

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
+49
.de
16 states
1871
1954
1974
1990
2014
357588 km²
49
83 million
Adidas
Albert Einstein
Alps
Audi
Austria
BASF
BMW
Belgium
Berlin
Black Forest
Bosch
Brandenburg Gate
CET
Cologne
Cologne Cathedral
Czech Republic
Danube
Das Lied der Deutschen
Denmark
East Germany
Elbe
Euro
Europe
European Union
European integration
France
France (EU partnership)
Frank-Walter Steinmeier
Frankfurt
G7
German
German Empire
German idealism
German national football team
Hamburg
Holy Roman Empire
Immanuel Kant
Johann Wolfgang von Goethe
Karl Marx

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Zalando
aerospace
automotive
chemicals
consumer goods
defense
energy
financial services
healthcare
industrial
insurance
logistics
materials
performance index
performance of German blue-chip companies
real estate
stock market index
technology
telecommunications
utilities

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Tiger
Toulouse
Twitter
United Kingdom
United States
Xetra
YouTube
ZEROe hydrogen aircraft
aerospace
aerospace corporation
airbus.com
aircraft maintenance
airlines
aviation industry awards
billion euros
carbon neutrality
circular economy
commercial aircraft
common cockpit
community engagement
composite materials
digital solutions
diversity and inclusion
education programs
emissions reduction
fly-by-wire
fuel efficiency
governments
helicopters
largest airliner manufacturer
launch vehicles
military
military aircraft
noise reduction
renewable energy
research institutions
safety
satellites
space systems
suppliers
support
thousands of aircraft
training
urban air mobility

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1941
2008
Allegiance
Bachelor of Architecture
Brad Takei
Democratic
Emmy Award
Facebook
Futurama
GLAAD Award
Heroes
Hikaru Sulu
Hollywood Walk of Fame
Japanese American
Japanese American National Museum
Japanese American civil rights
Kim Possible
LGBTQ+ rights
Lions and Tigers and Bears
Los Angeles
Malcolm in the Middle
Master of Arts
Mulan
Oh Myyy!
Order of the Rising Sun
Rohwer War Relocation Center
Star Trek
Star Trek films
Star Trek: The Original Series
The Big Bang Theory
The Howard Stern Show
The Simpsons
The Takei Take
The Terror: Infamy
They Called Us Enemy
To Be Takei
Tule Lake War Relocation Center
Twitter
United States
University of California, Berkeley
University of California, Los Angeles
World War II
activist
actor
author
gay
social media personality

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
North America
Novartis
One A Day
Pfizer
Pharmaceuticals
Roche
Roundup
Schering
Science For A Better Life
Stivarga
Syngenta
Wuppertal
Xarelto
Yasmin
agricultural chemicals
animal health products
bayer.com
biotechnology
blue
cardiology
chemicals
consumer healthcare products
cultural events
digital health
educational programs
environmental protection
global distribution network
hematology
leading agricultural company
leading pharmaceutical company
multinational corporation
multiple global locations
oncology
ophthalmology
other national health authorities
over 100000
over 50 billion euros
over 90 countries
personalized medicine
pharmaceutical company
pharmaceutical drugs
pharmaceuticals
pioneer in chemical industry
pioneer in pharmaceuticals
pioneer in synthetic dyes
precision agriculture
public limited company
scientific research
social programs
sports events

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1956
1975
1983-1984
2009
2016
2017
2019
2023
30 Rock
American
Best Spoken Word Album
Billie Lourd
Burbank, California
Censored Scenes from King Kong
Central School of Speech and Drama
Debbie Reynolds
Delusions of Grandma
Disney Legend
Eddie Fisher
Family Guy
Forest Lawn Memorial Park
Grammy Award
Hannah and Her Sisters
Hollywood Walk of Fame
Hollywood royalty
Hook
Irene
Judy Garland
Lethal Weapon 3
Outbreak
Paul Simon
Postcards from the Edge
Princess Leia Organa
Princess Leia character
Princess Leia figurine
Return of the Jedi
Sarah Lawrence College
Sex and the City
Shampoo
Shockaholic
Sister Act
Star Wars
Star Wars: A New Hope
Star Wars: The Last Jedi
Star Wars: The Rise of Skywalker
Surrender the Pink
The Blues Brothers
The Empire Strikes Back
The Force Awakens
The Princess Diarist

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
international
kubba
large
maqam
masgouf
millions
multiple
oil
oil exports
oil-dependent
ongoing
parliamentary
proportional representation
receives
red, white, black, green
restricted
right
significant
threatened by conflict
unemployment
water scarcity
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
STEM education
Shanghai
Solenis
Solvay
South America
Surface Technologies
Twitter
We create chemistry
YouTube
agricultural products
agriculture
ammonia synthesis
automotive
basf.com
carbon neutral growth
catalysts
certified systems
chemical company
chemicals
circular economy
climate protection
coatings
community programs
construction
construction chemicals
corporate blue
crop protection products
cultural activities
electronics
fine chemicals
global
global supply chain
industry associations
industry standards
largest chemical producer
magnetic tape
multiple locations
oil and gas
over 100,000
over 2 billion euros annually
over 50 billion euros
packaging
pharmaceuticals
pipeline
plastics
polystyrene
polyurethane
publicly traded
published yearly
rail transport

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 153.9s → outputs in runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251029_231623
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
vans business

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1988
1990s Canadian music
1990s alternative rock
All in Good Time
Barenaked Ladies Are Me
Barenaked Ladies Are Men
Barenaked Ladies Foundation
Barenaked in America
Big Bang Theory theme song
Billboard Hot 100
Brian Wilson
Call and Answer
Canada
Canada's Walk of Fame
Canadian Albums Chart
Canadian Music Hall of Fame
Canadian music exports
Chantal Kreviazuk
Desperation Records
Ed Robertson
Ed Robertson solo work
Elvis Costello
Everything to Everyone
Fake Nudes
Falling for the First Time
Gordon
Grammy Award nomination
Grinning Streak
If I Had $1000000
It's All Been Done
Jim Creeggan
Juno Award
Kevin Hearn
Kevin Hearn and Thin Buckle
Last Summer on Earth
Maroon
One Week
Pinch Me
Raisin' Records
Reprise Records
Rock Spectacle
Sarah McLachlan
Saturday Night Live
Ships and Dip
Silverball
Steven Page
Stunt
Testing 1,2,3
The Beatles
The Big Bang Theory

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 304.2s → outputs in runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_231623/batches
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Ludwig van Beethoven
Luxembourg
Martin Luther
Mercedes-Benz
Munich
NATO
Nazi Germany
Netherlands
Neuschwanstein Castle
OECD
Oktoberfest
Olaf Scholz
Otto von Bismarck
Poland
Rhine
Siemens
Switzerland
United Nations
United States (NATO ally)
Volkswagen
Weimar Republic
West Germany
X-rays
Zugspitze
automobile
automotive
chemical
chemicals
country
developed country
engineering
federal parliamentary republic
federal republic
football (soccer)
free university tuition
largest in Europe
machinery
printing press
right
sovereign state
transatlantic relations
vehicles

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1955-10-28
1994
2021
Berkshire Hathaway
Berkshire Hathaway in 2020
Bill & Melinda Gates Foundation
Bower Award for Business Leadership
Breakthrough Energy Ventures
Business @ the Speed of Thought
CEO of Microsoft
Cascade Investment
Chairman of Microsoft
Chief Software Architect of Microsoft
Corbis
Frasier
Gates Notes
Gavi, the Vaccine Alliance
Global Fund
HIV/AIDS prevention
Harvard University
How to Avoid a Climate Disaster
Inside Bill's Brain: Decoding Bill Gates
Jennifer Gates
Lakeside School
Lasker-Bloomberg Public Service Award
LinkedIn
MS-DOS
Medina
Melinda French Gates
Microsoft
Microsoft CEO in 2000
Microsoft Chairman in 2014
Microsoft Office
Microsoft Windows
Microsoft in 2020
National Medal of Technology and Innovation
Padma Bhushan
Paul Allen
Phoebe Gates
Presidential Medal of Freedom
Rory Gates
Seattle
TerraPower
The Giving Pledge
The Road Ahead
The Simpsons
The Social Network
Time Person of the Year
Tsinghua University
Twitter

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[bench] OK: runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251029_231623
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
G7
German
German Confederation
German Empire
German Unity Day
Hamburg
Harz
Hesse
Holy Roman Empire
Immanuel Kant
Johann Sebastian Bach
Johann Wolfgang von Goethe
Karl Marx
Labour Day
Leipzig
Lower Saxony
Ludwig van Beethoven
Luxembourg
MP3 format
Main
Martin Luther
Mecklenburg-Vorpommern
Mercedes-Benz
Munich
NATO
Nazi Germany
Netherlands
Neuschwanstein Castle
New Year's Day
North Rhine-Westphalia
Oktoberfest
Olympic Games
Poland
Puma
Reichstag Building
Rhine
Rhineland-Palatinate
SAP
Saarland
Saxony
Saxony-Anhalt
Schleswig-Holstein
Siemens
Stuttgart
Switzerland
Thuringia
UEFA European Championship
United Nations
Volkswagen
Weimar Republic

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
kidney grille
luxury vehicle brand
motorcycle manufacturer
over 140 countries
over 2 million vehicles
rear-wheel drive
sporty handling
top global automaker
white turn signals

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1928
1959
1960s Batman craze
1964
1966
1966-1968
1969
1970-2017
1994
2003
2010
2012
2016
2017
2018
6
ABC
Back to the Batcave
Bat-Signal projection
Batman
Batman '66 action figures
Batman '66 comic series
Batman '66 video games
Batman Hall of Fame
Batman and Me
Batman costumes
Batman lunchboxes
Batman television series
Batman toys
Batman vs. Two-Face
Batman: Return of the Caped Crusaders
Batman: The Brave and the Bold
Batman: The Movie
Best Guest Starring Role on Television
Bruce Wayne
Burt Ward
Captain CAAAAAAVE MAAAAAAN
Catman
Classic Batman
Comic-Con
Family Guy
Hollywood Walk of Fame
Lakeview Cemetery
Lego Batman 3: Beyond Gotham
Los Angeles
Marcelle Tagand Lear
Mayor Adam West
Murphy Brown
Robinson Crusoe on Mars
Saturn Award

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
European Health Facilities
European Health Financing
European Health Forums
European Health Foundations
European Health Governance
European Health Incubators
European Health Innovation
European Health Insurance Card
European Health Interview Survey
European Health Legislation
European Health Lobbying
European Health Monitoring
European Health NGOs
European Health Networks
European Health Policy Coordination
European Health Promotion
European Health Stakeholders
European Health Startups
European Health Systems
European Health Technologies
European Health Venture Capital
European Health Workforce
European Health Workforce Data
European Medicines Agency
European Parliament
European Patients' Rights Day
European Public Prosecutor's Office
European Reference Networks
European Union Civil Protection Mechanism
European Union Disease Prevention
European Union Force
European Union citizenship
European Union delegation
European Union passport
European Union sanctions
European Union–Japan Economic Partnership Agreement
European Vaccination Information Portal
European driving licence
European eHealth Digital Service Infrastructure
Europol
Eurostat Health Statistics
France
Frontex
General Court
General Data Protection Regulation
Germany
HERA
Health Inequalities
Health Security Committee
Health Technology Assessment

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1955
1990s
1993-1998
2014
2017
2017-2018
747 aircraft
Bachelor of Science in Mechanical Engineering
Bill Nye Saves the World
Bill Nye the Science Guy
Bill Nye: Science Guy
Boeing
Carl Sagan
Committee for Skeptical Inquiry
Consider the Following
Cornell University
Dancing with the Stars
Emmy Award
Johns Hopkins University
Ken Ham
Microsoft
NASA
NASA Distinguished Public Service Medal
National Science Foundation
Neil deGrasse Tyson
Netflix
PBS
Peabody Award
Rensselaer Polytechnic Institute
Science Channel
Science Rules!
Science rules!
Starmen
The Big Bang Theory
The Planetary Society
The Science Guy
United States
Washington, D.C.
William Sanford Nye
author
books
children
climate change
climate change awareness
climate change denial
creationism
critical thinking
documentary
educational television
engaging presentation

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1971
2022
Austin, Texas
Bachelor of Science in Economics
Bachelor of Science in Physics
Canada
Cybertruck
Dragon spacecraft
Errol Musk
FAA Distinguished Service Award
Falcon 9
Falcon Heavy
Fellow of the Royal Society
Forbes list of most powerful people
Hawthorne, California
Heinlein Prize
Isaac Asimov
J.R.R. Tolkien
Maye Musk
Model 3
Model S
Model X
Model Y
Musk Foundation
Neuralink
OpenAI
PayPal
Pretoria
Queen's University
Robert Heinlein
Royal Aeronautical Society Gold Medal
SolarCity
South Africa
SpaceX
SpaceX rockets
SpaceX stock
Stanford University
Starship
Technoking
Tesla electric vehicles
Tesla stock
Tesla, Inc.
Texas
The Boring Company
Time 100
Twitter
United States
University of Pennsylvania
University of Pretoria
X.com

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1949
ABC
Academy Awards for film
Academy of Television Arts & Sciences
American television culture
CBS
Cheers
Critics' Choice Television Awards
Daytime Emmy Awards
Emmy
Fox
Frasier
Game of Thrones
Golden Globe Awards
Grammy Awards for music
Hill Street Blues
Immy
International Emmy Awards
L.A. Law
Los Angeles
Mad Men
Modern Family
NBC
New York City
News and Documentary Emmy Awards
Outstanding Comedy Series
Outstanding Directing
Outstanding Drama Series
Outstanding Lead Actor
Outstanding Lead Actress
Outstanding Limited Series
Outstanding Supporting Actor
Outstanding Supporting Actress
Outstanding Writing
Peabody Awards
Primetime Emmy Awards
Regional Emmy Awards
Saturday Night Live
Screen Actors Guild Awards
September
Sports Emmy Awards
Succession
Technology and Engineering Emmy Awards
The Crown
The West Wing
Tony Awards for theater
United States
actors
advertising revenue
annual

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1944
Academy Awards
Best Actor – Motion Picture Drama
Best Actor – Television Series Drama
Best Actress – Motion Picture Drama
Best Actress – Television Series Drama
Best Animated Feature Film
Best Director
Best Foreign Language Film
Best Miniseries or Television Film
Best Motion Picture – Drama
Best Original Score
Best Original Song
Best Screenplay
Best Supporting Actor
Best Supporting Actress
Best Television Series – Drama
Beverly Hills
California
Cecil B. DeMille Award
Dick Clark Productions
Emmy Awards
Hollywood Foreign Press Association
Hollywood Foreign Press Association members
Hollywood tradition
January
NBC
Oscar nominations
United States
annual
award
awards season
celebrity attendance
continued relevance
diversity initiatives
diversity issues
enduring
entertainment
excellence in film
excellence in television
expanded categories
extensive
gold
golden globe
high
increased diversity
informal atmosphere
international
journalists
major

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The River Wild
The Simpsons
The Wedding Singer
When Harry Met Sally...
Wishful Drinking
actress
author
bipolar disorder
candor about personal struggles
cardiac arrest
feminist icon
mental health advocacy
mental health awareness
science fiction icon
screenwriter

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
registered globally
research institutions
resource efficiency
shipping
synthetic dyes
synthetic indigo
textiles
thousands
trucking
universities
vitamin synthesis

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
124 acres
1891
39
3:1
4
5
6
8
Amos G. Throop
ArtCenter College of Design
Baseball Field
Beaver
Beckman Auditorium
Beckman Institute
Braun Athletic Center
Broad Center for the Biological Sciences
Cahill Center for Astronomy and Astrophysics
California
California Institute of Technology
Caltech Archives
Caltech Submillimeter Observatory
Children's Hospital Los Angeles
City of Hope
Dabney Hall
Demetriades-Tsafka-Kokkalis Prize
Ditch Day
Division of Biology and Biological Engineering
Division of Chemistry and Chemical Engineering
Division of Engineering and Applied Science
Division of Geological and Planetary Sciences
Division of Humanities and Social Sciences
Division of Physics, Mathematics and Astronomy
Engineering & Science
Feynman Prize
Firestone Laboratory
Frances Arnold
Frank Capra
Gates-Thomas Laboratory
Gordon Moore
Guggenheim Laboratory
House System
Huntington Medical Research Institutes
Jet Propulsion Laboratory
Kavli Nanoscience Institute
Keck Laboratories
Keck Observatory
Kip Thorne
LIGO
Linde + Robinson Laboratory
Linus Pauling

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
sustainability initiatives
thousands of patents
white
women's healthcare

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
16 radio stations
1927
1941
1951
200+ stations
2000s
2010s
2020s
24 hours
48 Hours
60 Minutes
ABC
ATSC
America's Most Watched Network
Beijing
Blue Bloods
CBS
CBS Affiliate Relations
CBS All Access
CBS Entertainment
CBS Evening News
CBS Mornings
CBS News
CBS News and Stations
CBS Radio
CBS Sports
CBS Studios
CBS Studios International
CBS Sunday Morning
CBS Television Stations
CBS-owned television stations
Central Time Zone
Chicago
Columbia Broadcasting System
Columbia Phonographic Broadcasting System
Columbia Records
Dan Rather
Eastern Time Zone
Edward R. Murrow
Edward R. Murrow Awards
FBI
Face the Nation
Fox
Gayle King
George Cheeks
George Schweitzer
Jeff Fager
Leslie Moonves
Let's Make a Deal
London

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
12 days 1 hour 52 minutes
1930
1969
1971
5 hours 30 minutes
Air Force Distinguished Service Medal
American
Apollo 11
Apollo program
Buzz Aldrin's Space Institute
Colonel
Congressional hearings
Dancing with the Stars
Doctor of Science in astronautics
Edwin Eugene Aldrin Jr.
Edwin Eugene Aldrin Sr.
Gemini 12
Glen Ridge, New Jersey
International Space Hall of Fame
Korean War
Madame Tussauds
Magnificent Desolation
Magnificent desolation
Marion Moon
Mars exploration
Massachusetts Institute of Technology
Men from Earth
Michael Collins
NASA
NASA Distinguished Service Medal
NASA Exceptional Service Medal
NASA astronaut training
NASA history
National Aviation Hall of Fame
Neil Armstrong
Presbyterian
Presidential Medal of Freedom
Return to Earth
STEM education
ShareSpace Foundation
Space Race
The Big Bang Theory
Transformers: Dark of the Moon
Twitter
US government
United States Air Force
United States Astronaut Hall of Fame
United States Military Academy
advocate
aerospace companies

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
1952
1980s
1998
2
2000s
2010s
2011
Allison Janney
Anna Faris
Ashton Kutcher
Bethpage, New York
Bill Prady
Billy Gardell
Bob Hearts Abishola
Bookie
CBS
California
Charles Michael Levine
Charlie Sheen
Chuck Lorre Productions
Cybill
Dharma & Greg
Eddie Gorodetsky
English
Golden Globe Awards
Grace Under Fire
Hollywood Walk of Fame star
Iain Armitage
Jim Parsons
Johnny Galecki
Jon Cryer
Kaley Cuoco
Lee Aronsohn
Los Angeles
Max
Melissa McCarthy
Mike & Molly
Mom
My Two Dads
Netflix
People's Choice Awards
Primetime Emmy Awards
Roseanne
Teenage Mutant Ninja Turtles
Television Academy Honors
Television Showman of the Year
The Big Bang Theory
The Chuck Lorre Family Foundation
The Hollywood Reporter
Two and a Half Men

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (14); stopping.
[crawler] finished in 170.9s → outputs in runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251029_231623
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
United States
United States v. Microsoft
Waiting for Superman
Warren Buffett
Waseda University
Washington
William Henry Gates III
World Health Organization
Xanadu 2.0
agricultural innovation
bgC3
billionaire
business magnate
clean energy
climate change
computer on every desk
education
global health
investor
licensing software
malaria eradication
nuclear energy
partnership with IBM
person
personal computers
personal computing industry
philanthropist
polio eradication
poverty alleviation
richest person in the world
software developer
software in every computer
software industry
tuberculosis treatment
vaccine development
water sanitation

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Weser
West Germany
Whit Monday
X-rays
Zugspitze
aspirin
automobile
automobile manufacturing
automotive
basketball
beer
black
black eagle
chemicals
classical music
compulsory until age 18
country
electronics
engineering
federal parliamentary republic
football
gold
handball
ice hockey
largest in Europe
machinery
philosophy
printing press
red
right
sausages
social market economy
universal multi-payer

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
168 cm
1945
1965
1966
1968
1969
1975
1979
1981
1984
1985
1989
1990
1995
2000
2003
2004
2005
2013
2016
2017
2018
2020
4
5 feet 6 inches
6
ABC
Adam West
American
Batman
Batman television series
Batman vs. Two-Face
Batman: Return of the Caped Crusaders
Batman: The Complete History
Batman: The Movie
Bert Gervis Sr.
Bert John Gervis Jr.
Beverly Gervis
Bonnie Lindsey
Boy Wonder: My Life in Tights
Burt Ward
But Can They Sing?
California
Christian
Dick Grayson
Donald Trump
Dynamic Duo
English
Entertainment Tonight
Family Guy

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Horizon Europe
Horizon Europe Health Cluster
Intelligence and Situation Centre
Italy
Luxembourg
Maastricht Treaty
Medical Devices Regulation
Multiannual Financial Framework
Netherlands
Ode to Joy
Ordinary Legislative Procedure
Qualified Majority Voting
RAPEX
REACH
Rotating presidency
Schengen Area
Single Market
Social Determinants of Health
United in diversity
political and economic union

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
The Brothers Creeggan
The Kinks
The Old Apartment
The Tonight Show
Too Little Too Late
Toronto
Tyler Stewart
acoustic performances
alternative rock
alternative rock scene
audience interaction
band
bass
children's charities
drums
energetic
environmental causes
everyday life
guitar
humor
humorous
humorous lyrics
improvisational
international
international tours
keyboards
loyal following
multi-million album sales
multi-platinum
musically diverse
platinum
pop rock
relationships
social commentary
vocals

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Seattle
Silver Age of Comic Books
Starring Adam West
Superest Super Hero
TV Land Award
Television
The Adventures of Batman and Robin
The Batman
The Big Bang Theory
The Cape Crusade
The Fairly OddParents
The Girl Who Knew Too Much
The Simpsons
The Young Philadelphia
Thomas Wayne
To the Batcave
United States
United States Army
University of Puget Sound
Walla Walla
Washington
Whitman College
William West Anderson
actor
campy
cancer research
children's hospitals
commercials
fan expos
generations of Batman actors
himself
iconic portrayal of Batman
leukemia
narration

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
environmental protection
evidence-based thinking
evolution
general public
hands-on experiments
hydraulic pressure resonance suppressor
making science accessible
mechanical engineer
popular culture icon
popular science
pseudoscience
public speaking
public understanding of science
renewable energy
science ambassador
science communication
science communicator
science demonstrations
science education
science education reform
science educator
science-based policy
scientific literacy
scientific method
signature accessory
signature clothing
space exploration
television
television presenter
visual demonstrations
young scientists

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Zip2
aerospace
automotive
battery storage
business
business magnate
colonize Mars
commercial space industry
economics
electric vehicle industry
electric vehicles
engineer
engineering
entrepreneur
father
first reusable orbital rockets
industrial designer
mother
multi-planetary species
multiple
neural interfaces
neural technology
over $200 billion
pediatric health
physics
renewable energy
renewable energy adoption
renewable energy research
reusable rockets
rockets
satellites
science education
social media
solar panels
sustainable energy
tunnel boring machines
tunnel construction
world
xAI
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
artistic excellence
award
black-tie event
career advancement
category definitions
celebrities
comedians
cultural institution
directors
diversity representation
emotional speeches
excellence in television
expanded categories
extensive
general public
historic wins
image orthicon tube
increased diversity
industry benchmark
international
international television
millions
most prestigious television award
overall quality
peer voting
producers
program popularity
program syndication value
red carpet fashion
significant
submission based
surprise upsets
technical achievement
technological adaptation
televised ceremony
televised event
television award
television excellence standard
television history documentation
television industry
television industry standards
television performances
television personalities
television production
television professionals
television programs
tourism
voting process
winged woman holding an atom

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
millions
separate drama and comedy categories
significant
substantial
voting body composition
voting body expansion

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 308.2s → outputs in runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251029_231623
[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
astronaut
author
aviation pioneer
awards
biographies
buildings
coins
consultant
docking techniques
documentaries
educational institutions
educator
engineer
fighter pilot
generations of scientists
human spaceflight
inventor
jet pilot training
laser ranging retroreflector
lunar exploration
medals
multiple countries
multiple locations
multiple universities
officer
orbital mechanics techniques
postage stamps
scholarships
schools
scientific organizations
scientist
seismic measurements
solar wind composition
space advocacy
space agencies
space conferences
space enthusiasts
space exploration
space industry
space missions
space museums
space policy committees
space science
space systems
spacecraft designs
spacecraft development
speaker
survival training
test pilot
three

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Linus Pauling Professor of Chemical Engineering
MIT
Mediterranean Revival
Millikan Library
Millikan Medal
Mudd Laboratory of the Geological Sciences
Murray Gell-Mann
NASA
Noyes Laboratory
Owens Valley Radio Observatory
Palomar Observatory
Pasadena
Pool
Pranks
Precollege Science Initiative
RV Sally Ride
Ramo Auditorium
Resnick Sustainability Institute
Richard Feynman
Robert Millikan
Schlinger Laboratory
Seismological Laboratory
Sherman Fairchild Library
Sloan Laboratory
Soccer Field
Southern California Intercollegiate Athletic Conference
Stanford University
Summer Undergraduate Research Fellowships
Tennis Courts
The California Tech
The truth shall make you free
Theodore von Kármán
Thomas F. Rosenbaum
Track and Field
UCLA
USC
United States
WAVE Fellows Program
approximately 1300
approximately 300
approximately 4%
approximately 900
astronomy research
biology research
engineering
engineering research
orange
over $3 billion
over $300 million annually
planetary science

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Los Angeles
Mike Wallace
Mountain Time Zone
NBC
NCAA March Madness
NCIS
NFL on CBS
NTSC
National Amusements
New York City
Norah O'Donnell
PGA Tour
Pacific Time Zone
Paramount Global
Paramount+
Peabody Awards
Pop TV
Primetime Emmy Awards
SEC on CBS
Showtime
Stephen Colbert
Survivor
The Amazing Race
The Big Bang Theory
The Bold and the Beautiful
The CW
The Eye Network
The Late Show with Stephen Colbert
The Masters Tournament
The Price Is Right
The Talk
The Young and the Restless
United Independent Broadcasters
United States
Viacom
Walter Cronkite
Washington D.C.
Westinghouse Electric Corporation
William S. Paley
Young Sheldon
adults 25-54
advertising
blue
broadcasting
broadcasting company
cbs.com
content licensing
entertainment
most-watched network in United States
news broadcasting

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
UCLA
United States
United States of Al
Variety
Young Sheldon
Zoe Perry
biographical articles
broad
chucklorre.com
collaborative
comedy
digital vanity cards
director
divorced
documentaries
entertainment
established
exceptional
family dynamics
famous
friendship
global
high
highly influential
hundreds of millions
limited
long-running television series
long-term
medical research
memorable
mixed
modern television comedy
most successful sitcom producer
multi-camera sitcoms
multiple
musician
personal growth
popular
private
prolific
rare
relationships
respected
screenwriter
significant
sitcom
songwriter
strong
studio audience
television

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
Fantasy Island
Gentle Giants
Gentle Giants Rescue
George H. W. Bush
Hollywood Boulevard
Hollywood Walk of Fame
Holy
Holy Batmania!
Irish
July
Jungle Warriors
Larry King Live
Legends of the Superheroes
Lisa Ward
Los Angeles
Mariana Torchia
Melissa Ward
Republican
Robin
Robot Chicken
Ronald Reagan
Ruth Gervis
Scottish
Sidehackers
Starring Adam West
Superheroes: A Never-Ending Battle
TV Land Award
Television
The Cape Crusader: A Hero's Hero
The Castaways on Gilligan's Island
The Girl Who Knew Too Much
The Harlem Globetrotters on Gilligan's Island
The Love Boat
The New Adventures of Batman
The New Adventures of Wonder Woman
The New Original Wonder Woman
The Simpsons
The Surreal Life
The Tonight Show
Tracy Posner Ward
True Hollywood Story
United States
University of California
actor
animal rescue
animal welfare
business administration
charity work
comic conventions
dog adoption

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
true
universities

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
private research university
quantum mechanics research
research
science
top universities worldwide
white

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
news programming
procedural dramas
public company
reality competition shows
sitcoms
sports broadcasting
subscription fees
television network
television programming

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
television producer
thousands
traditional
vanity cards
wealthy
work
workplace comedy
writer's room
yes

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[prompts] using: general/calibration/ner.j2 (root=/Users/muhammedsaeed/Downloads/TU Dresden/GPTKB_Hallucinations/prompts)

--- NER PROMPT ---
 You are an expert in Named Entity Recognition (NER).

Your task:
Classify each line (phrase) as a named entity (NE), literal, or noise.

Definitions:
- NE (Named Entity): A real-world proper name — person, organization, location, event, creative work, etc.
- Literal: Generic term, date, number, category, or descriptor.
- Noise: Unrelated, meaningless, or malformed text.
- Always include the "keep" boolean: true for NE, false otherwise.

Output STRICT JSON only — no markdown fences, no extra text.

Output format:
{
  "entities": [
    { "name": "...", "type": "NE|Literal|Noise", "keep": true|false }
  ]
}

Example:
{
  "entities": [
    { "name": "Albert Einstein", "type": "NE", "keep": true },
    { "name": "March 14, 1879", "type": "Literal", "keep": false },
    { "name": "physics", "type": "Literal", "keep": false }
  ]
}

Now classify these phrases:
dog breeding
dog food
fan events
public speaking
rescue

Return ONLY valid JSON; no prose; no markdown; no code fences. 
------------------

[crawler] max-subjects reached (21); stopping.
[crawler] finished in 370.9s → outputs in runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251029_231623
[crawler] queue.json        : runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/queue.json
[crawler] facts.json        : runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.json
[crawler] facts.jsonl       : runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts.jsonl
[crawler] lowconf.json      : runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.json
[crawler] lowconf.jsonl     : runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/facts_lowconf.jsonl
[crawler] ner log           : runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/ner_decisions.jsonl
[crawler] errors.log        : runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/errors.log
[crawler] batch_state       : runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/batch_state.json
[crawler] batches dir       : runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251029_231623/batches
[bench] OK: runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251029_231623

[bench] DONE  ok=24  failed=0  skipped=0
[bench] START
[bench] root_out=runs/AllParallelTest
[bench] crawler=crawler_batch_concurrency_topic.py
[bench] total_planned=72
  plan[0] domain=topic model=deepseek seed=ancient city of Babylon strategy=baseline profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251030_002408
  plan[1] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=baseline profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251030_002408
  plan[2] domain=topic model=deepseek seed=DAX 40 Index strategy=baseline profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251030_002408
  plan[3] domain=topic model=deepseek seed=ancient city of Babylon strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251030_002408
  plan[4] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251030_002408
  plan[5] domain=topic model=deepseek seed=DAX 40 Index strategy=baseline profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251030_002408
  plan[6] domain=topic model=deepseek seed=ancient city of Babylon strategy=calibrate profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251030_002408
  plan[7] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=calibrate profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251030_002408
  plan[8] domain=topic model=deepseek seed=DAX 40 Index strategy=calibrate profile=medium batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251030_002408
  plan[9] domain=topic model=deepseek seed=ancient city of Babylon strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251030_002408
  plan[10] domain=topic model=deepseek seed=The TV Series Big Bang Theory strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251030_002408
  plan[11] domain=topic model=deepseek seed=DAX 40 Index strategy=calibrate profile=wild batch=False conc=20 → runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251030_002408
[bench] executing with max_procs=6

[RUN 1/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/baseline/medium/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 2/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/baseline/medium/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 3/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/baseline/medium/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 4/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 5/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 6/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/baseline/wild/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 7/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/medium/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 8/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 9/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/medium/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 10/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 11/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 12/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/calibrate/wild/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 13/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/icl/medium/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 14/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/icl/medium/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 15/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/icl/medium/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 16/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 17/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 18/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/icl/wild/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 19/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/medium/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 20/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 21/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/medium/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 22/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 23/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 24/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/deepseek/dont_know/wild/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key deepseek --ner-model-key deepseek --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 25/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/gpt4o-mini/baseline/medium/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 26/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/gpt4o-mini/baseline/medium/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 27/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/gpt4o-mini/baseline/medium/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 28/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/gpt4o-mini/baseline/wild/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 29/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/gpt4o-mini/baseline/wild/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 30/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/gpt4o-mini/baseline/wild/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 31/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/gpt4o-mini/calibrate/medium/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 32/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/gpt4o-mini/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 33/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/gpt4o-mini/calibrate/medium/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 34/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/gpt4o-mini/calibrate/wild/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 35/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/gpt4o-mini/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 36/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/gpt4o-mini/calibrate/wild/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 37/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/gpt4o-mini/icl/medium/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 38/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/gpt4o-mini/icl/medium/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 39/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/gpt4o-mini/icl/medium/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 40/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/gpt4o-mini/icl/wild/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 41/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/gpt4o-mini/icl/wild/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 42/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/gpt4o-mini/icl/wild/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 43/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/gpt4o-mini/dont_know/medium/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 44/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/gpt4o-mini/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 45/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/gpt4o-mini/dont_know/medium/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 46/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/gpt4o-mini/dont_know/wild/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 47/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/gpt4o-mini/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 48/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/gpt4o-mini/dont_know/wild/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key gpt4o-mini --ner-model-key gpt4o-mini --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --openai-batch --openai-batch-size 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 49/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/granite8b/baseline/medium/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 50/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/granite8b/baseline/medium/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 51/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/granite8b/baseline/medium/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 52/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/granite8b/baseline/wild/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 53/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/granite8b/baseline/wild/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 54/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/granite8b/baseline/wild/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy baseline --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 55/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/granite8b/calibrate/medium/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 56/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/granite8b/calibrate/medium/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 57/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/granite8b/calibrate/medium/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 58/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/granite8b/calibrate/wild/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 59/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/granite8b/calibrate/wild/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 60/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/granite8b/calibrate/wild/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy calibrate --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 61/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/granite8b/icl/medium/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 62/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/granite8b/icl/medium/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 63/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/granite8b/icl/medium/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 64/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/granite8b/icl/wild/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 65/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/granite8b/icl/wild/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 66/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/granite8b/icl/wild/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy icl --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 67/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/granite8b/dont_know/medium/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 68/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/granite8b/dont_know/medium/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 69/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/granite8b/dont_know/medium/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 0.7 --top-p 0.95 --top-k 50 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 70/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'ancient city of Babylon' --output-dir runs/AllParallelTest/topic/granite8b/dont_know/wild/ancient_city_of_Babylon/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 71/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'The TV Series Big Bang Theory' --output-dir runs/AllParallelTest/topic/granite8b/dont_know/wild/The_TV_Series_Big_Bang_Theory/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5

[RUN 72/72] /Users/muhammedsaeed/anaconda3/envs/KB/bin/python crawler_batch_concurrency_topic.py --seed 'DAX 40 Index' --output-dir runs/AllParallelTest/topic/granite8b/dont_know/wild/DAX_40_Index/20251030_002408 --domain topic --elicitation-strategy dont_know --ner-strategy calibrate --elicit-model-key granite8b --ner-model-key granite8b --max-depth 10 --max-facts-hint 100 --max-subjects 0 --ner-batch-size 50 --concurrency 20 --temperature 2.0 --top-p 1.0 --top-k 100 --max-tokens 4096 --http-timeout 60.0 --http-retries 6 --http-backoff 0.5
